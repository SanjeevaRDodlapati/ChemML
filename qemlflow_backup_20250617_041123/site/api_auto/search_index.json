[
  {
    "type": "function",
    "name": "_setup_chemml",
    "full_name": "._setup_chemml",
    "module": "",
    "description": "Setup ChemML with sensible defaults.",
    "url": "functions.html#_setup_chemml"
  },
  {
    "type": "function",
    "name": "get_config",
    "full_name": "core.common.config.get_config",
    "module": "core.common.config",
    "description": "Get the global configuration instance.",
    "url": "functions.html#get_config"
  },
  {
    "type": "function",
    "name": "update_config",
    "full_name": "core.common.config.update_config",
    "module": "core.common.config",
    "description": "Update the global configuration.",
    "url": "functions.html#update_config"
  },
  {
    "type": "function",
    "name": "reset_config",
    "full_name": "core.common.config.reset_config",
    "module": "core.common.config",
    "description": "Reset the global configuration to defaults.",
    "url": "functions.html#reset_config"
  },
  {
    "type": "function",
    "name": "ensure_exists",
    "full_name": "core.common.config.ensure_exists",
    "module": "core.common.config",
    "description": "Create directories if they don't exist.",
    "url": "functions.html#ensure_exists"
  },
  {
    "type": "function",
    "name": "get_paths",
    "full_name": "core.common.config.get_paths",
    "module": "core.common.config",
    "description": "Get structured paths object.",
    "url": "functions.html#get_paths"
  },
  {
    "type": "function",
    "name": "ensure_directories",
    "full_name": "core.common.config.ensure_directories",
    "module": "core.common.config",
    "description": "Create all required directories.",
    "url": "functions.html#ensure_directories"
  },
  {
    "type": "function",
    "name": "Field",
    "full_name": "core.common.config.Field",
    "module": "core.common.config",
    "description": "",
    "url": "functions.html#Field"
  },
  {
    "type": "function",
    "name": "validator",
    "full_name": "core.common.config.validator",
    "module": "core.common.config",
    "description": "",
    "url": "functions.html#validator"
  },
  {
    "type": "function",
    "name": "path_validator",
    "full_name": "core.common.config.path_validator",
    "module": "core.common.config",
    "description": "",
    "url": "functions.html#path_validator"
  },
  {
    "type": "function",
    "name": "memory_limit_validator",
    "full_name": "core.common.config.memory_limit_validator",
    "module": "core.common.config",
    "description": "",
    "url": "functions.html#memory_limit_validator"
  },
  {
    "type": "function",
    "name": "max_workers_validator",
    "full_name": "core.common.config.max_workers_validator",
    "module": "core.common.config",
    "description": "",
    "url": "functions.html#max_workers_validator"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.common.config.__init__",
    "module": "core.common.config",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "decorator",
    "full_name": "core.common.config.decorator",
    "module": "core.common.config",
    "description": "",
    "url": "functions.html#decorator"
  },
  {
    "type": "function",
    "name": "handle_exceptions",
    "full_name": "core.common.errors.handle_exceptions",
    "module": "core.common.errors",
    "description": "Decorator for graceful exception handling with logging.\n\nArgs:\n    default_return: Value to return on exception\n    exceptions: Tuple of exception types to catch\n    log_errors: Whether to log excepti",
    "url": "functions.html#handle_exceptions"
  },
  {
    "type": "function",
    "name": "validate_smiles",
    "full_name": "core.common.errors.validate_smiles",
    "module": "core.common.errors",
    "description": "Validate and standardize SMILES string.\n\nArgs:\n    smiles: SMILES string to validate\n\nReturns:\n    Validated SMILES string\n\nRaises:\n    MolecularValidationError: If SMILES is invalid",
    "url": "functions.html#validate_smiles"
  },
  {
    "type": "function",
    "name": "validate_numeric_range",
    "full_name": "core.common.errors.validate_numeric_range",
    "module": "core.common.errors",
    "description": "Validate numeric value is within specified range.\n\nArgs:\n    value: Value to validate\n    min_val: Minimum allowed value\n    max_val: Maximum allowed value\n    name: Name of the value for error messag",
    "url": "functions.html#validate_numeric_range"
  },
  {
    "type": "function",
    "name": "error_context",
    "full_name": "core.common.errors.error_context",
    "module": "core.common.errors",
    "description": "Context manager for consistent error handling and logging.\n\nArgs:\n    operation: Description of the operation being performed",
    "url": "functions.html#error_context"
  },
  {
    "type": "function",
    "name": "safe_divide",
    "full_name": "core.common.errors.safe_divide",
    "module": "core.common.errors",
    "description": "Safely divide two numbers, returning default on division by zero.\n\nArgs:\n    numerator: Numerator value\n    denominator: Denominator value\n    default: Value to return if denominator is zero\n\nReturns:",
    "url": "functions.html#safe_divide"
  },
  {
    "type": "function",
    "name": "retry_on_failure",
    "full_name": "core.common.errors.retry_on_failure",
    "module": "core.common.errors",
    "description": "Decorator to retry functions on specific exceptions.\n\nArgs:\n    max_attempts: Maximum number of retry attempts\n    delay: Initial delay between attempts (seconds)\n    backoff: Multiplier for delay on ",
    "url": "functions.html#retry_on_failure"
  },
  {
    "type": "function",
    "name": "decorator",
    "full_name": "core.common.errors.decorator",
    "module": "core.common.errors",
    "description": "",
    "url": "functions.html#decorator"
  },
  {
    "type": "function",
    "name": "wrapper",
    "full_name": "core.common.errors.wrapper",
    "module": "core.common.errors",
    "description": "",
    "url": "functions.html#wrapper"
  },
  {
    "type": "function",
    "name": "monitor_performance",
    "full_name": "core.common.performance.monitor_performance",
    "module": "core.common.performance",
    "description": "Decorator to monitor function performance.\n\nArgs:\n    log_threshold: Log warning if execution time exceeds this (seconds)\n    memory_threshold: Log warning if memory usage exceeds this (MB)\n    enable",
    "url": "functions.html#monitor_performance"
  },
  {
    "type": "function",
    "name": "performance_context",
    "full_name": "core.common.performance.performance_context",
    "module": "core.common.performance",
    "description": "Context manager for monitoring performance of code blocks.\n\nArgs:\n    operation_name: Name of the operation being monitored",
    "url": "functions.html#performance_context"
  },
  {
    "type": "function",
    "name": "get_system_info",
    "full_name": "core.common.performance.get_system_info",
    "module": "core.common.performance",
    "description": "Get current system performance information.",
    "url": "functions.html#get_system_info"
  },
  {
    "type": "function",
    "name": "log_performance_summary",
    "full_name": "core.common.performance.log_performance_summary",
    "module": "core.common.performance",
    "description": "Log a summary of all performance metrics.",
    "url": "functions.html#log_performance_summary"
  },
  {
    "type": "function",
    "name": "get_performance_monitor",
    "full_name": "core.common.performance.get_performance_monitor",
    "module": "core.common.performance",
    "description": "Get the global performance monitor instance.",
    "url": "functions.html#get_performance_monitor"
  },
  {
    "type": "function",
    "name": "to_dict",
    "full_name": "core.common.performance.to_dict",
    "module": "core.common.performance",
    "description": "Convert to dictionary for serialization.",
    "url": "functions.html#to_dict"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.common.performance.__init__",
    "module": "core.common.performance",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "get_instance",
    "full_name": "core.common.performance.get_instance",
    "module": "core.common.performance",
    "description": "Get singleton instance.",
    "url": "functions.html#get_instance"
  },
  {
    "type": "function",
    "name": "record_metrics",
    "full_name": "core.common.performance.record_metrics",
    "module": "core.common.performance",
    "description": "Record performance metrics.",
    "url": "functions.html#record_metrics"
  },
  {
    "type": "function",
    "name": "get_function_stats",
    "full_name": "core.common.performance.get_function_stats",
    "module": "core.common.performance",
    "description": "Get aggregated stats for a function.",
    "url": "functions.html#get_function_stats"
  },
  {
    "type": "function",
    "name": "get_summary",
    "full_name": "core.common.performance.get_summary",
    "module": "core.common.performance",
    "description": "Get performance summary for all monitored functions.",
    "url": "functions.html#get_summary"
  },
  {
    "type": "function",
    "name": "clear_history",
    "full_name": "core.common.performance.clear_history",
    "module": "core.common.performance",
    "description": "Clear all performance metrics history.",
    "url": "functions.html#clear_history"
  },
  {
    "type": "function",
    "name": "decorator",
    "full_name": "core.common.performance.decorator",
    "module": "core.common.performance",
    "description": "",
    "url": "functions.html#decorator"
  },
  {
    "type": "function",
    "name": "wrapper",
    "full_name": "core.common.performance.wrapper",
    "module": "core.common.performance",
    "description": "",
    "url": "functions.html#wrapper"
  },
  {
    "type": "function",
    "name": "load_sample_data",
    "full_name": "core.data.load_sample_data",
    "module": "core.data",
    "description": "Load sample molecular datasets for testing and tutorials.\n\nArgs:\n    dataset_name: Name of dataset to load\n\nReturns:\n    DataFrame with molecular data",
    "url": "functions.html#load_sample_data"
  },
  {
    "type": "function",
    "name": "calculate_data_quality_metrics",
    "full_name": "core.data.calculate_data_quality_metrics",
    "module": "core.data",
    "description": "Calculate data quality metrics for a molecular dataset.\n\nArgs:\n    data: Input DataFrame\n    smiles_column: Name of SMILES column\n\nReturns:\n    Dictionary with quality metrics",
    "url": "functions.html#calculate_data_quality_metrics"
  },
  {
    "type": "function",
    "name": "quick_clean",
    "full_name": "core.data.quick_clean",
    "module": "core.data",
    "description": "Quickly clean a molecular dataset using default settings.",
    "url": "functions.html#quick_clean"
  },
  {
    "type": "function",
    "name": "quick_split",
    "full_name": "core.data.quick_split",
    "module": "core.data",
    "description": "Quickly split data using specified method.",
    "url": "functions.html#quick_split"
  },
  {
    "type": "function",
    "name": "legacy_molecular_cleaning",
    "full_name": "core.data.legacy_molecular_cleaning",
    "module": "core.data",
    "description": "Clean molecular dataset using legacy cleaning functions.\n\nWrapper around src.data_processing.molecular_preprocessing for backward compatibility\nand integration with new architecture.",
    "url": "functions.html#legacy_molecular_cleaning"
  },
  {
    "type": "function",
    "name": "enhanced_property_prediction",
    "full_name": "core.data.enhanced_property_prediction",
    "module": "core.data",
    "description": "Access to enhanced property prediction capabilities.\n\nIntegrates legacy drug design functionality with new architecture.",
    "url": "functions.html#enhanced_property_prediction"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.data.__init__",
    "module": "core.data",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "clean_smiles",
    "full_name": "core.data.clean_smiles",
    "module": "core.data",
    "description": "Clean and validate SMILES strings.\n\nArgs:\n    smiles_list: List of SMILES strings\n\nReturns:\n    Tuple of (cleaned_smiles, valid_flags)",
    "url": "functions.html#clean_smiles"
  },
  {
    "type": "function",
    "name": "process_dataset",
    "full_name": "core.data.process_dataset",
    "module": "core.data",
    "description": "Process a molecular dataset.\n\nArgs:\n    data: Input DataFrame\n    smiles_column: Name of SMILES column\n    target_columns: Names of target columns\n    remove_invalid: Whether to remove invalid molecul",
    "url": "functions.html#process_dataset"
  },
  {
    "type": "function",
    "name": "random_split",
    "full_name": "core.data.random_split",
    "module": "core.data",
    "description": "Perform random train/validation/test split.\n\nArgs:\n    data: Input DataFrame\n    test_size: Fraction for test set\n    val_size: Fraction for validation set\n\nReturns:\n    Tuple of (train_df, val_df, te",
    "url": "functions.html#random_split"
  },
  {
    "type": "function",
    "name": "stratified_split",
    "full_name": "core.data.stratified_split",
    "module": "core.data",
    "description": "Perform stratified split based on target distribution.\n\nArgs:\n    data: Input DataFrame\n    target_column: Name of target column for stratification\n    test_size: Fraction for test set\n    val_size: F",
    "url": "functions.html#stratified_split"
  },
  {
    "type": "function",
    "name": "scaffold_split",
    "full_name": "core.data.scaffold_split",
    "module": "core.data",
    "description": "Perform scaffold-based split to avoid data leakage.\n\nGroups molecules by their Bemis-Murcko scaffolds and assigns\nentire scaffold groups to train/val/test sets.\n\nArgs:\n    data: Input DataFrame\n    sm",
    "url": "functions.html#scaffold_split"
  },
  {
    "type": "function",
    "name": "fit_transform",
    "full_name": "core.data.fit_transform",
    "module": "core.data",
    "description": "Fit scaler and transform features.",
    "url": "functions.html#fit_transform"
  },
  {
    "type": "function",
    "name": "transform",
    "full_name": "core.data.transform",
    "module": "core.data",
    "description": "Transform features using fitted scaler.",
    "url": "functions.html#transform"
  },
  {
    "type": "function",
    "name": "inverse_transform",
    "full_name": "core.data.inverse_transform",
    "module": "core.data",
    "description": "Inverse transform scaled features.",
    "url": "functions.html#inverse_transform"
  },
  {
    "type": "function",
    "name": "normalize_features",
    "full_name": "core.data.normalize_features",
    "module": "core.data",
    "description": "Normalize feature data using specified method.",
    "url": "functions.html#normalize_features"
  },
  {
    "type": "function",
    "name": "split_data",
    "full_name": "core.data.split_data",
    "module": "core.data",
    "description": "Split data into train/test sets.",
    "url": "functions.html#split_data"
  },
  {
    "type": "function",
    "name": "wrap_function",
    "full_name": "core.data.wrap_function",
    "module": "core.data",
    "description": "Wrap a legacy function call with error handling.",
    "url": "functions.html#wrap_function"
  },
  {
    "type": "function",
    "name": "create_compatibility_layer",
    "full_name": "core.data.create_compatibility_layer",
    "module": "core.data",
    "description": "Create compatibility wrappers for common legacy modules.",
    "url": "functions.html#create_compatibility_layer"
  },
  {
    "type": "function",
    "name": "calculate_chemical_space_coverage",
    "full_name": "core.evaluation.calculate_chemical_space_coverage",
    "module": "core.evaluation",
    "description": "Calculate how well the training set covers the chemical space of the test set.\n\nArgs:\n    molecules_train: Training set SMILES\n    molecules_test: Test set SMILES\n    fingerprint_type: Type of fingerp",
    "url": "functions.html#calculate_chemical_space_coverage"
  },
  {
    "type": "function",
    "name": "applicability_domain_analysis",
    "full_name": "core.evaluation.applicability_domain_analysis",
    "module": "core.evaluation",
    "description": "Analyze applicability domain using distance-based methods.\n\nArgs:\n    X_train: Training feature matrix\n    X_test: Test feature matrix\n    threshold_percentile: Percentile for defining the domain boun",
    "url": "functions.html#applicability_domain_analysis"
  },
  {
    "type": "function",
    "name": "quick_regression_eval",
    "full_name": "core.evaluation.quick_regression_eval",
    "module": "core.evaluation",
    "description": "Quick regression evaluation with essential metrics.",
    "url": "functions.html#quick_regression_eval"
  },
  {
    "type": "function",
    "name": "quick_classification_eval",
    "full_name": "core.evaluation.quick_classification_eval",
    "module": "core.evaluation",
    "description": "Quick classification evaluation with essential metrics.",
    "url": "functions.html#quick_classification_eval"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.evaluation.__init__",
    "module": "core.evaluation",
    "description": "Initialize model comparator.\n\nArgs:\n    cv_folds: Number of cross-validation folds\n    random_state: Random seed for reproducibility",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "evaluate",
    "full_name": "core.evaluation.evaluate",
    "module": "core.evaluation",
    "description": "Calculate comprehensive classification metrics.\n\nArgs:\n    y_true: True class labels\n    y_pred: Predicted class labels\n    y_prob: Predicted probabilities (for AUC calculation)\n    average: Averaging",
    "url": "functions.html#evaluate"
  },
  {
    "type": "function",
    "name": "plot_predictions",
    "full_name": "core.evaluation.plot_predictions",
    "module": "core.evaluation",
    "description": "Create prediction vs true values plot.\n\nArgs:\n    y_true: True target values\n    y_pred: Predicted target values\n    title: Plot title\n    save_path: Path to save plot\n\nReturns:\n    Matplotlib figure ",
    "url": "functions.html#plot_predictions"
  },
  {
    "type": "function",
    "name": "plot_residuals",
    "full_name": "core.evaluation.plot_residuals",
    "module": "core.evaluation",
    "description": "Create residual plot for error analysis.\n\nArgs:\n    y_true: True target values\n    y_pred: Predicted target values\n    title: Plot title\n    save_path: Path to save plot\n\nReturns:\n    Matplotlib figur",
    "url": "functions.html#plot_residuals"
  },
  {
    "type": "function",
    "name": "plot_confusion_matrix",
    "full_name": "core.evaluation.plot_confusion_matrix",
    "module": "core.evaluation",
    "description": "Create confusion matrix plot.\n\nArgs:\n    y_true: True class labels\n    y_pred: Predicted class labels\n    class_names: Names of classes\n    normalize: Whether to normalize the matrix\n    title: Plot t",
    "url": "functions.html#plot_confusion_matrix"
  },
  {
    "type": "function",
    "name": "compare_models",
    "full_name": "core.evaluation.compare_models",
    "module": "core.evaluation",
    "description": "Compare multiple models using cross-validation.\n\nArgs:\n    models: Dictionary of model_name -> model_instance\n    X: Feature matrix\n    y: Target values\n    scoring: Scoring metric for comparison\n    ",
    "url": "functions.html#compare_models"
  },
  {
    "type": "function",
    "name": "plot_model_comparison",
    "full_name": "core.evaluation.plot_model_comparison",
    "module": "core.evaluation",
    "description": "Create bar plot comparing model performances.\n\nArgs:\n    results_df: Results DataFrame from compare_models\n    metric_name: Name of the metric being compared\n    title: Plot title\n    save_path: Path ",
    "url": "functions.html#plot_model_comparison"
  },
  {
    "type": "function",
    "name": "morgan_fingerprints",
    "full_name": "core.featurizers.morgan_fingerprints",
    "module": "core.featurizers",
    "description": "Calculate Morgan fingerprints for a list of SMILES.\n\nArgs:\n    smiles_list: List of SMILES strings\n    radius: Morgan radius\n    n_bits: Number of bits\n\nReturns:\n    Feature matrix (n_molecules x n_bi",
    "url": "functions.html#morgan_fingerprints"
  },
  {
    "type": "function",
    "name": "molecular_descriptors",
    "full_name": "core.featurizers.molecular_descriptors",
    "module": "core.featurizers",
    "description": "Calculate molecular descriptors for a list of SMILES.\n\nArgs:\n    smiles_list: List of SMILES strings\n    descriptor_list: List of descriptor names\n\nReturns:\n    DataFrame with descriptors as columns",
    "url": "functions.html#molecular_descriptors"
  },
  {
    "type": "function",
    "name": "comprehensive_features",
    "full_name": "core.featurizers.comprehensive_features",
    "module": "core.featurizers",
    "description": "Create a comprehensive feature set for drug discovery.\n\nArgs:\n    smiles_list: List of SMILES strings\n\nReturns:\n    Dictionary with different feature types",
    "url": "functions.html#comprehensive_features"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.featurizers.__init__",
    "module": "core.featurizers",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "featurize",
    "full_name": "core.featurizers.featurize",
    "module": "core.featurizers",
    "description": "Featurize molecules using hybrid RDKit + DeepChem approach.\n\nArgs:\n    molecules: List of SMILES strings or RDKit molecule objects\n\nReturns:\n    Feature matrix combining all selected feature types",
    "url": "functions.html#featurize"
  },
  {
    "type": "function",
    "name": "_smiles_to_mol",
    "full_name": "core.featurizers._smiles_to_mol",
    "module": "core.featurizers",
    "description": "Convert SMILES to RDKit molecule object.",
    "url": "functions.html#_smiles_to_mol"
  },
  {
    "type": "function",
    "name": "get_feature_names",
    "full_name": "core.featurizers.get_feature_names",
    "module": "core.featurizers",
    "description": "Get names of all features in the hybrid featurizer.",
    "url": "functions.html#get_feature_names"
  },
  {
    "type": "function",
    "name": "get_feature_info",
    "full_name": "core.featurizers.get_feature_info",
    "module": "core.featurizers",
    "description": "Get information about the hybrid featurizer configuration.",
    "url": "functions.html#get_feature_info"
  },
  {
    "type": "function",
    "name": "setup_experiment_tracking",
    "full_name": "core.models.setup_experiment_tracking",
    "module": "core.models",
    "description": "Setup experiment tracking with Weights & Biases.",
    "url": "functions.html#setup_experiment_tracking"
  },
  {
    "type": "function",
    "name": "log_metrics",
    "full_name": "core.models.log_metrics",
    "module": "core.models",
    "description": "Log metrics to experiment tracker.",
    "url": "functions.html#log_metrics"
  },
  {
    "type": "function",
    "name": "compare_models",
    "full_name": "core.models.compare_models",
    "module": "core.models",
    "description": "Compare performance of multiple models.\n\nArgs:\n    models: Dictionary of model_name -> model_instance\n    X: Feature matrix\n    y: Target values\n\nReturns:\n    DataFrame with comparison results",
    "url": "functions.html#compare_models"
  },
  {
    "type": "function",
    "name": "create_linear_model",
    "full_name": "core.models.create_linear_model",
    "module": "core.models",
    "description": "Create a linear regression model.",
    "url": "functions.html#create_linear_model"
  },
  {
    "type": "function",
    "name": "create_rf_model",
    "full_name": "core.models.create_rf_model",
    "module": "core.models",
    "description": "Create a Random Forest model.",
    "url": "functions.html#create_rf_model"
  },
  {
    "type": "function",
    "name": "create_svm_model",
    "full_name": "core.models.create_svm_model",
    "module": "core.models",
    "description": "Create an SVM model.",
    "url": "functions.html#create_svm_model"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.models.__init__",
    "module": "core.models",
    "description": "Initialize neural network.\n\nArgs:\n    input_dim: Number of input features\n    hidden_dims: List of hidden layer dimensions\n    output_dim: Number of outputs\n    dropout_rate: Dropout probability",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "fit",
    "full_name": "core.models.fit",
    "module": "core.models",
    "description": "Fit neural network.",
    "url": "functions.html#fit"
  },
  {
    "type": "function",
    "name": "predict",
    "full_name": "core.models.predict",
    "module": "core.models",
    "description": "Make predictions.",
    "url": "functions.html#predict"
  },
  {
    "type": "function",
    "name": "evaluate",
    "full_name": "core.models.evaluate",
    "module": "core.models",
    "description": "Evaluate model performance.",
    "url": "functions.html#evaluate"
  },
  {
    "type": "function",
    "name": "get_feature_importance",
    "full_name": "core.models.get_feature_importance",
    "module": "core.models",
    "description": "Get feature importance scores.",
    "url": "functions.html#get_feature_importance"
  },
  {
    "type": "function",
    "name": "create_neural_network",
    "full_name": "core.models.create_neural_network",
    "module": "core.models",
    "description": "Create a neural network model.",
    "url": "functions.html#create_neural_network"
  },
  {
    "type": "function",
    "name": "forward",
    "full_name": "core.models.forward",
    "module": "core.models",
    "description": "Forward pass.",
    "url": "functions.html#forward"
  },
  {
    "type": "function",
    "name": "create_performance_dashboard",
    "full_name": "core.monitoring.dashboard.create_performance_dashboard",
    "module": "core.monitoring.dashboard",
    "description": "Create and return a performance dashboard instance.",
    "url": "functions.html#create_performance_dashboard"
  },
  {
    "type": "function",
    "name": "show_performance_dashboard",
    "full_name": "core.monitoring.dashboard.show_performance_dashboard",
    "module": "core.monitoring.dashboard",
    "description": "Generate and display performance dashboard.",
    "url": "functions.html#show_performance_dashboard"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.monitoring.dashboard.__init__",
    "module": "core.monitoring.dashboard",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "generate_real_time_report",
    "full_name": "core.monitoring.dashboard.generate_real_time_report",
    "module": "core.monitoring.dashboard",
    "description": "Generate comprehensive real-time performance report.",
    "url": "functions.html#generate_real_time_report"
  },
  {
    "type": "function",
    "name": "_get_system_metrics",
    "full_name": "core.monitoring.dashboard._get_system_metrics",
    "module": "core.monitoring.dashboard",
    "description": "Get current system performance metrics.",
    "url": "functions.html#_get_system_metrics"
  },
  {
    "type": "function",
    "name": "_get_slowest_functions",
    "full_name": "core.monitoring.dashboard._get_slowest_functions",
    "module": "core.monitoring.dashboard",
    "description": "Identify functions with highest execution times.",
    "url": "functions.html#_get_slowest_functions"
  },
  {
    "type": "function",
    "name": "_get_memory_intensive_ops",
    "full_name": "core.monitoring.dashboard._get_memory_intensive_ops",
    "module": "core.monitoring.dashboard",
    "description": "Identify memory-intensive operations.",
    "url": "functions.html#_get_memory_intensive_ops"
  },
  {
    "type": "function",
    "name": "_suggest_optimizations",
    "full_name": "core.monitoring.dashboard._suggest_optimizations",
    "module": "core.monitoring.dashboard",
    "description": "Generate intelligent optimization suggestions.",
    "url": "functions.html#_suggest_optimizations"
  },
  {
    "type": "function",
    "name": "_calculate_efficiency_score",
    "full_name": "core.monitoring.dashboard._calculate_efficiency_score",
    "module": "core.monitoring.dashboard",
    "description": "Calculate efficiency score for a function (0-100).",
    "url": "functions.html#_calculate_efficiency_score"
  },
  {
    "type": "function",
    "name": "_calculate_memory_efficiency",
    "full_name": "core.monitoring.dashboard._calculate_memory_efficiency",
    "module": "core.monitoring.dashboard",
    "description": "Calculate memory efficiency score (0-100).",
    "url": "functions.html#_calculate_memory_efficiency"
  },
  {
    "type": "function",
    "name": "_calculate_health_score",
    "full_name": "core.monitoring.dashboard._calculate_health_score",
    "module": "core.monitoring.dashboard",
    "description": "Calculate overall system health score.",
    "url": "functions.html#_calculate_health_score"
  },
  {
    "type": "function",
    "name": "generate_html_dashboard",
    "full_name": "core.monitoring.dashboard.generate_html_dashboard",
    "module": "core.monitoring.dashboard",
    "description": "Generate an HTML dashboard for performance monitoring.",
    "url": "functions.html#generate_html_dashboard"
  },
  {
    "type": "function",
    "name": "save_report",
    "full_name": "core.monitoring.dashboard.save_report",
    "module": "core.monitoring.dashboard",
    "description": "Save performance report to JSON file.",
    "url": "functions.html#save_report"
  },
  {
    "type": "function",
    "name": "start_monitoring",
    "full_name": "core.monitoring.dashboard.start_monitoring",
    "module": "core.monitoring.dashboard",
    "description": "Start continuous performance monitoring.",
    "url": "functions.html#start_monitoring"
  },
  {
    "type": "function",
    "name": "extract_descriptors",
    "full_name": "core.preprocessing.feature_extraction.extract_descriptors",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract molecular descriptors from SMILES strings.\n\nArgs:\n    molecules: List of SMILES strings\n    descriptor_set: Type of descriptors ('rdkit', 'mordred', 'basic')\n\nReturns:\n    DataFrame with molec",
    "url": "functions.html#extract_descriptors"
  },
  {
    "type": "function",
    "name": "calculate_properties",
    "full_name": "core.preprocessing.feature_extraction.calculate_properties",
    "module": "core.preprocessing.feature_extraction",
    "description": "Calculate basic molecular properties for a list of SMILES.\n\nArgs:\n    smiles_list: List of SMILES strings\n\nReturns:\n    DataFrame with molecular properties",
    "url": "functions.html#calculate_properties"
  },
  {
    "type": "function",
    "name": "extract_features",
    "full_name": "core.preprocessing.feature_extraction.extract_features",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract multiple types of molecular features.\n\nArgs:\n    data: SMILES strings or DataFrame\n    feature_types: List of feature types to extract\n\nReturns:\n    DataFrame with extracted features",
    "url": "functions.html#extract_features"
  },
  {
    "type": "function",
    "name": "_extract_rdkit_descriptors",
    "full_name": "core.preprocessing.feature_extraction._extract_rdkit_descriptors",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract RDKit descriptors.",
    "url": "functions.html#_extract_rdkit_descriptors"
  },
  {
    "type": "function",
    "name": "_extract_mordred_descriptors",
    "full_name": "core.preprocessing.feature_extraction._extract_mordred_descriptors",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract Mordred descriptors.",
    "url": "functions.html#_extract_mordred_descriptors"
  },
  {
    "type": "function",
    "name": "_extract_basic_descriptors",
    "full_name": "core.preprocessing.feature_extraction._extract_basic_descriptors",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract basic descriptors without external dependencies.",
    "url": "functions.html#_extract_basic_descriptors"
  },
  {
    "type": "function",
    "name": "_estimate_property",
    "full_name": "core.preprocessing.feature_extraction._estimate_property",
    "module": "core.preprocessing.feature_extraction",
    "description": "Estimate property values without RDKit.",
    "url": "functions.html#_estimate_property"
  },
  {
    "type": "function",
    "name": "extract_basic_molecular_descriptors",
    "full_name": "core.preprocessing.feature_extraction.extract_basic_molecular_descriptors",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract basic molecular descriptors from the provided molecular data.\n\nParameters:\nmolecular_data (list): A list of molecular structures.\n\nReturns:\nlist: A list of extracted molecular descriptors.",
    "url": "functions.html#extract_basic_molecular_descriptors"
  },
  {
    "type": "function",
    "name": "extract_fingerprints",
    "full_name": "core.preprocessing.feature_extraction.extract_fingerprints",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract molecular fingerprints from SMILES strings.\n\nArgs:\n    molecules: List of SMILES strings\n    fp_type: Type of fingerprint ('morgan', 'maccs', 'topological')\n    n_bits: Number of bits for fing",
    "url": "functions.html#extract_fingerprints"
  },
  {
    "type": "function",
    "name": "_extract_rdkit_fingerprints",
    "full_name": "core.preprocessing.feature_extraction._extract_rdkit_fingerprints",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract fingerprints using RDKit.",
    "url": "functions.html#_extract_rdkit_fingerprints"
  },
  {
    "type": "function",
    "name": "_extract_basic_fingerprints",
    "full_name": "core.preprocessing.feature_extraction._extract_basic_fingerprints",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract basic fingerprints without RDKit.",
    "url": "functions.html#_extract_basic_fingerprints"
  },
  {
    "type": "function",
    "name": "generate_fingerprints",
    "full_name": "core.preprocessing.feature_extraction.generate_fingerprints",
    "module": "core.preprocessing.feature_extraction",
    "description": "Generate molecular fingerprints for given molecules.\n\nArgs:\n    molecules: Single SMILES string/Mol or list of SMILES/Mol objects\n    fp_type: Type of fingerprint ('morgan', 'maccs', 'topological')\n  ",
    "url": "functions.html#generate_fingerprints"
  },
  {
    "type": "function",
    "name": "_calculate_single_fingerprint",
    "full_name": "core.preprocessing.feature_extraction._calculate_single_fingerprint",
    "module": "core.preprocessing.feature_extraction",
    "description": "Calculate fingerprint for a single molecule.",
    "url": "functions.html#_calculate_single_fingerprint"
  },
  {
    "type": "function",
    "name": "extract_structural_features",
    "full_name": "core.preprocessing.feature_extraction.extract_structural_features",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract structural features from molecules.\n\nArgs:\n    molecules: Single SMILES string or list of SMILES\n    feature_types: List of feature types to extract\n\nReturns:\n    DataFrame with structural fea",
    "url": "functions.html#extract_structural_features"
  },
  {
    "type": "function",
    "name": "_extract_single_structural_features",
    "full_name": "core.preprocessing.feature_extraction._extract_single_structural_features",
    "module": "core.preprocessing.feature_extraction",
    "description": "Extract structural features for a single molecule.",
    "url": "functions.html#_extract_single_structural_features"
  },
  {
    "type": "function",
    "name": "extract_molecular_descriptors",
    "full_name": "core.preprocessing.feature_extraction.extract_molecular_descriptors",
    "module": "core.preprocessing.feature_extraction",
    "description": "Legacy function - use extract_descriptors instead.",
    "url": "functions.html#extract_molecular_descriptors"
  },
  {
    "type": "function",
    "name": "calculate_molecular_weight",
    "full_name": "core.preprocessing.feature_extraction.calculate_molecular_weight",
    "module": "core.preprocessing.feature_extraction",
    "description": "Calculate molecular weight for a single molecule.",
    "url": "functions.html#calculate_molecular_weight"
  },
  {
    "type": "function",
    "name": "calculate_logP",
    "full_name": "core.preprocessing.feature_extraction.calculate_logP",
    "module": "core.preprocessing.feature_extraction",
    "description": "Calculate logP for a single molecule.",
    "url": "functions.html#calculate_logP"
  },
  {
    "type": "function",
    "name": "calculate_num_rotatable_bonds",
    "full_name": "core.preprocessing.feature_extraction.calculate_num_rotatable_bonds",
    "module": "core.preprocessing.feature_extraction",
    "description": "Calculate number of rotatable bonds for a single molecule.",
    "url": "functions.html#calculate_num_rotatable_bonds"
  },
  {
    "type": "function",
    "name": "generate_fingerprint",
    "full_name": "core.preprocessing.feature_extraction.generate_fingerprint",
    "module": "core.preprocessing.feature_extraction",
    "description": "Generate fingerprint for a single molecule.",
    "url": "functions.html#generate_fingerprint"
  },
  {
    "type": "function",
    "name": "clean_data",
    "full_name": "core.preprocessing.molecular_preprocessing.clean_data",
    "module": "core.preprocessing.molecular_preprocessing",
    "description": "Clean molecular dataset by removing duplicates, handling missing values, etc.\n\nArgs:\n    data: Input DataFrame\n    remove_duplicates: Whether to remove duplicate rows\n    handle_missing: How to handle",
    "url": "functions.html#clean_data"
  },
  {
    "type": "function",
    "name": "validate_smiles_column",
    "full_name": "core.preprocessing.molecular_preprocessing.validate_smiles_column",
    "module": "core.preprocessing.molecular_preprocessing",
    "description": "Validate SMILES strings and remove invalid ones.\n\nArgs:\n    data: DataFrame with SMILES column\n    smiles_col: Name of SMILES column\n\nReturns:\n    DataFrame with only valid SMILES",
    "url": "functions.html#validate_smiles_column"
  },
  {
    "type": "function",
    "name": "standardize_smiles",
    "full_name": "core.preprocessing.molecular_preprocessing.standardize_smiles",
    "module": "core.preprocessing.molecular_preprocessing",
    "description": "Standardize SMILES strings by removing salts and canonicalizing.\n\nArgs:\n    smiles_list: List of SMILES strings\n\nReturns:\n    List of standardized SMILES",
    "url": "functions.html#standardize_smiles"
  },
  {
    "type": "function",
    "name": "filter_by_molecular_properties",
    "full_name": "core.preprocessing.molecular_preprocessing.filter_by_molecular_properties",
    "module": "core.preprocessing.molecular_preprocessing",
    "description": "Filter molecules based on drug-like properties.\n\nArgs:\n    data: DataFrame with molecular data\n    smiles_col: Name of SMILES column\n    mw_range: Molecular weight range (min, max)\n    logp_range: Log",
    "url": "functions.html#filter_by_molecular_properties"
  },
  {
    "type": "function",
    "name": "clean_molecular_data",
    "full_name": "core.preprocessing.molecular_preprocessing.clean_molecular_data",
    "module": "core.preprocessing.molecular_preprocessing",
    "description": "Clean molecular data by handling missing values and infinities.",
    "url": "functions.html#clean_molecular_data"
  },
  {
    "type": "function",
    "name": "preprocess_molecular_data",
    "full_name": "core.preprocessing.molecular_preprocessing.preprocess_molecular_data",
    "module": "core.preprocessing.molecular_preprocessing",
    "description": "",
    "url": "functions.html#preprocess_molecular_data"
  },
  {
    "type": "function",
    "name": "handle_missing_values",
    "full_name": "core.preprocessing.molecular_preprocessing.handle_missing_values",
    "module": "core.preprocessing.molecular_preprocessing",
    "description": "",
    "url": "functions.html#handle_missing_values"
  },
  {
    "type": "function",
    "name": "normalize_data",
    "full_name": "core.preprocessing.molecular_preprocessing.normalize_data",
    "module": "core.preprocessing.molecular_preprocessing",
    "description": "Normalize numerical features in the dataset.",
    "url": "functions.html#normalize_data"
  },
  {
    "type": "function",
    "name": "standardize_molecules",
    "full_name": "core.preprocessing.molecular_preprocessing.standardize_molecules",
    "module": "core.preprocessing.molecular_preprocessing",
    "description": "Standardize molecules by canonicalizing SMILES and removing salts.\n\nArgs:\n    smiles_list: List of SMILES strings\n\nReturns:\n    List of standardized SMILES strings",
    "url": "functions.html#standardize_molecules"
  },
  {
    "type": "function",
    "name": "remove_invalid_molecules",
    "full_name": "core.preprocessing.molecular_preprocessing.remove_invalid_molecules",
    "module": "core.preprocessing.molecular_preprocessing",
    "description": "Remove invalid SMILES strings from a list.\n\nArgs:\n    smiles_list: List of SMILES strings\n\nReturns:\n    List of valid SMILES strings",
    "url": "functions.html#remove_invalid_molecules"
  },
  {
    "type": "function",
    "name": "download_pdb_file",
    "full_name": "core.preprocessing.protein_preparation.download_pdb_file",
    "module": "core.preprocessing.protein_preparation",
    "description": "Download PDB file using BioPython.\n\nArgs:\n    pdb_id: PDB identifier (e.g., '1a4g')\n    out_dir: Output directory (defaults to self.receptor_dir)\n\nReturns:\n    Path to downloaded PDB file, or None if ",
    "url": "functions.html#download_pdb_file"
  },
  {
    "type": "function",
    "name": "convert_to_pdbqt",
    "full_name": "core.preprocessing.protein_preparation.convert_to_pdbqt",
    "module": "core.preprocessing.protein_preparation",
    "description": "Convert PDB to PDBQT format using OpenBabel or AutoDockTools.\n\nArgs:\n    pdb_file: Input PDB file path\n    pdbqt_file: Output PDBQT file path\n\nReturns:\n    True if conversion successful, False otherwi",
    "url": "functions.html#convert_to_pdbqt"
  },
  {
    "type": "function",
    "name": "fetch_metadata",
    "full_name": "core.preprocessing.protein_preparation.fetch_metadata",
    "module": "core.preprocessing.protein_preparation",
    "description": "Fetch protein metadata from RCSB PDB API.\n\nArgs:\n    pdb_id: PDB identifier\n\nReturns:\n    Dictionary containing metadata (resolution, title, etc.)",
    "url": "functions.html#fetch_metadata"
  },
  {
    "type": "function",
    "name": "prepare_proteins_simple",
    "full_name": "core.preprocessing.protein_preparation.prepare_proteins_simple",
    "module": "core.preprocessing.protein_preparation",
    "description": "Simple interface for preparing multiple proteins.\n\nArgs:\n    pdb_ids: List of PDB identifiers\n    receptor_dir: Directory for output files\n    use_obabel: Whether to use OpenBabel for conversion\n\nRetu",
    "url": "functions.html#prepare_proteins_simple"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.preprocessing.protein_preparation.__init__",
    "module": "core.preprocessing.protein_preparation",
    "description": "Initialize the protein preparation pipeline.\n\nArgs:\n    receptor_dir: Directory to store downloaded and converted structures\n    use_obabel: Whether to use OpenBabel for PDB->PDBQT conversion\n        ",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "prepare_proteins",
    "full_name": "core.preprocessing.protein_preparation.prepare_proteins",
    "module": "core.preprocessing.protein_preparation",
    "description": "Main pipeline: download, convert, and prepare protein structures.\n\nArgs:\n    pdb_ids: List of PDB identifiers to process\n\nReturns:\n    Dictionary mapping PDB IDs to their preparation results",
    "url": "functions.html#prepare_proteins"
  },
  {
    "type": "function",
    "name": "get_summary",
    "full_name": "core.preprocessing.protein_preparation.get_summary",
    "module": "core.preprocessing.protein_preparation",
    "description": "Get a summary of the protein preparation results.\n\nReturns:\n    Dictionary with summary statistics",
    "url": "functions.html#get_summary"
  },
  {
    "type": "function",
    "name": "recommend_model",
    "full_name": "core.recommendations.recommend_model",
    "module": "core.recommendations",
    "description": "Quick model recommendation function.",
    "url": "functions.html#recommend_model"
  },
  {
    "type": "function",
    "name": "compare_models",
    "full_name": "core.recommendations.compare_models",
    "module": "core.recommendations",
    "description": "Compare multiple models for the same dataset.",
    "url": "functions.html#compare_models"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.recommendations.__init__",
    "module": "core.recommendations",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "recommend_best_model",
    "full_name": "core.recommendations.recommend_best_model",
    "module": "core.recommendations",
    "description": "Recommend optimal model based on data characteristics and requirements.\n\nParameters:\n-----------\nmolecular_data : array-like\n    Molecular data (SMILES strings, descriptors, or features)\ntarget_proper",
    "url": "functions.html#recommend_best_model"
  },
  {
    "type": "function",
    "name": "_analyze_data_characteristics",
    "full_name": "core.recommendations._analyze_data_characteristics",
    "module": "core.recommendations",
    "description": "Analyze molecular data to extract characteristics.",
    "url": "functions.html#_analyze_data_characteristics"
  },
  {
    "type": "function",
    "name": "_categorize_property",
    "full_name": "core.recommendations._categorize_property",
    "module": "core.recommendations",
    "description": "Categorize the target property type.",
    "url": "functions.html#_categorize_property"
  },
  {
    "type": "function",
    "name": "_assess_molecular_complexity",
    "full_name": "core.recommendations._assess_molecular_complexity",
    "module": "core.recommendations",
    "description": "Assess average molecular complexity from SMILES.",
    "url": "functions.html#_assess_molecular_complexity"
  },
  {
    "type": "function",
    "name": "_detect_task_type",
    "full_name": "core.recommendations._detect_task_type",
    "module": "core.recommendations",
    "description": "Auto-detect whether task is classification or regression.",
    "url": "functions.html#_detect_task_type"
  },
  {
    "type": "function",
    "name": "_build_model_database",
    "full_name": "core.recommendations._build_model_database",
    "module": "core.recommendations",
    "description": "Build database of available models with their characteristics.",
    "url": "functions.html#_build_model_database"
  },
  {
    "type": "function",
    "name": "_get_model_candidates",
    "full_name": "core.recommendations._get_model_candidates",
    "module": "core.recommendations",
    "description": "Get candidate models based on data characteristics.",
    "url": "functions.html#_get_model_candidates"
  },
  {
    "type": "function",
    "name": "_score_models",
    "full_name": "core.recommendations._score_models",
    "module": "core.recommendations",
    "description": "Score and rank model candidates.",
    "url": "functions.html#_score_models"
  },
  {
    "type": "function",
    "name": "_generate_model_config",
    "full_name": "core.recommendations._generate_model_config",
    "module": "core.recommendations",
    "description": "Generate optimal configuration for the recommended model.",
    "url": "functions.html#_generate_model_config"
  },
  {
    "type": "function",
    "name": "_generate_rationale",
    "full_name": "core.recommendations._generate_rationale",
    "module": "core.recommendations",
    "description": "Generate human-readable rationale for the recommendation.",
    "url": "functions.html#_generate_rationale"
  },
  {
    "type": "function",
    "name": "_estimate_performance",
    "full_name": "core.recommendations._estimate_performance",
    "module": "core.recommendations",
    "description": "Estimate expected model performance.",
    "url": "functions.html#_estimate_performance"
  },
  {
    "type": "function",
    "name": "_estimate_memory_requirements",
    "full_name": "core.recommendations._estimate_memory_requirements",
    "module": "core.recommendations",
    "description": "Estimate memory requirements.",
    "url": "functions.html#_estimate_memory_requirements"
  },
  {
    "type": "function",
    "name": "get_recommendation_history",
    "full_name": "core.recommendations.get_recommendation_history",
    "module": "core.recommendations",
    "description": "Get history of all recommendations made.",
    "url": "functions.html#get_recommendation_history"
  },
  {
    "type": "function",
    "name": "_get_model_pros",
    "full_name": "core.recommendations._get_model_pros",
    "module": "core.recommendations",
    "description": "Get advantages of a model for the given data.",
    "url": "functions.html#_get_model_pros"
  },
  {
    "type": "function",
    "name": "_get_model_cons",
    "full_name": "core.recommendations._get_model_cons",
    "module": "core.recommendations",
    "description": "Get disadvantages of a model for the given data.",
    "url": "functions.html#_get_model_cons"
  },
  {
    "type": "function",
    "name": "load_molecular_data",
    "full_name": "core.utils.io_utils.load_molecular_data",
    "module": "core.utils.io_utils",
    "description": "Load molecular data from various file formats.\n\nArgs:\n    filepath: Path to the molecular data file\n    smiles_column: Name of the SMILES column (default: \"SMILES\")\n    target_column: Name of the targ",
    "url": "functions.html#load_molecular_data"
  },
  {
    "type": "function",
    "name": "save_molecular_data",
    "full_name": "core.utils.io_utils.save_molecular_data",
    "module": "core.utils.io_utils",
    "description": "Save molecular data to various file formats.\n\nArgs:\n    data: DataFrame with molecular data\n    filepath: Path to save the data\n    format: File format (auto-detected from extension if None)",
    "url": "functions.html#save_molecular_data"
  },
  {
    "type": "function",
    "name": "setup_logging",
    "full_name": "core.utils.io_utils.setup_logging",
    "module": "core.utils.io_utils",
    "description": "Setup logging configuration",
    "url": "functions.html#setup_logging"
  },
  {
    "type": "function",
    "name": "validate_data_integrity",
    "full_name": "core.utils.io_utils.validate_data_integrity",
    "module": "core.utils.io_utils",
    "description": "Validate data integrity for ML workflows",
    "url": "functions.html#validate_data_integrity"
  },
  {
    "type": "function",
    "name": "export_results",
    "full_name": "core.utils.io_utils.export_results",
    "module": "core.utils.io_utils",
    "description": "Export results to various formats.\n\nArgs:\n    results: Dictionary of results to export\n    filepath: Output file path\n    format: Export format ('json', 'yaml', 'csv', 'pickle')\n    **kwargs: Addition",
    "url": "functions.html#export_results"
  },
  {
    "type": "function",
    "name": "save_model_results",
    "full_name": "core.utils.io_utils.save_model_results",
    "module": "core.utils.io_utils",
    "description": "Save model training/evaluation results",
    "url": "functions.html#save_model_results"
  },
  {
    "type": "function",
    "name": "load_experiment_results",
    "full_name": "core.utils.io_utils.load_experiment_results",
    "module": "core.utils.io_utils",
    "description": "Load previously saved experiment results.\n\nArgs:\n    experiment_name: Name of the experiment\n    results_dir: Directory containing results\n\nReturns:\n    Dictionary of experiment results",
    "url": "functions.html#load_experiment_results"
  },
  {
    "type": "function",
    "name": "_json_serializer",
    "full_name": "core.utils.io_utils._json_serializer",
    "module": "core.utils.io_utils",
    "description": "Custom JSON serializer for numpy arrays and other objects.",
    "url": "functions.html#_json_serializer"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.utils.io_utils.__init__",
    "module": "core.utils.io_utils",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "load_csv",
    "full_name": "core.utils.io_utils.load_csv",
    "module": "core.utils.io_utils",
    "description": "Load CSV file",
    "url": "functions.html#load_csv"
  },
  {
    "type": "function",
    "name": "load_sdf",
    "full_name": "core.utils.io_utils.load_sdf",
    "module": "core.utils.io_utils",
    "description": "Load SDF (Structure Data File) for molecular data",
    "url": "functions.html#load_sdf"
  },
  {
    "type": "function",
    "name": "load_smiles_file",
    "full_name": "core.utils.io_utils.load_smiles_file",
    "module": "core.utils.io_utils",
    "description": "Load file containing SMILES strings",
    "url": "functions.html#load_smiles_file"
  },
  {
    "type": "function",
    "name": "load_protein_fasta",
    "full_name": "core.utils.io_utils.load_protein_fasta",
    "module": "core.utils.io_utils",
    "description": "Load protein sequences from FASTA file",
    "url": "functions.html#load_protein_fasta"
  },
  {
    "type": "function",
    "name": "load_chembl_data",
    "full_name": "core.utils.io_utils.load_chembl_data",
    "module": "core.utils.io_utils",
    "description": "Load data from ChEMBL database",
    "url": "functions.html#load_chembl_data"
  },
  {
    "type": "function",
    "name": "load_json",
    "full_name": "core.utils.io_utils.load_json",
    "module": "core.utils.io_utils",
    "description": "Load JSON file",
    "url": "functions.html#load_json"
  },
  {
    "type": "function",
    "name": "load_pickle",
    "full_name": "core.utils.io_utils.load_pickle",
    "module": "core.utils.io_utils",
    "description": "Load pickled object",
    "url": "functions.html#load_pickle"
  },
  {
    "type": "function",
    "name": "save_dataframe",
    "full_name": "core.utils.io_utils.save_dataframe",
    "module": "core.utils.io_utils",
    "description": "Save DataFrame in various formats",
    "url": "functions.html#save_dataframe"
  },
  {
    "type": "function",
    "name": "save_plot",
    "full_name": "core.utils.io_utils.save_plot",
    "module": "core.utils.io_utils",
    "description": "Save matplotlib figure",
    "url": "functions.html#save_plot"
  },
  {
    "type": "function",
    "name": "export_smiles_list",
    "full_name": "core.utils.io_utils.export_smiles_list",
    "module": "core.utils.io_utils",
    "description": "Export list of SMILES to file",
    "url": "functions.html#export_smiles_list"
  },
  {
    "type": "function",
    "name": "save_molecular_descriptors",
    "full_name": "core.utils.io_utils.save_molecular_descriptors",
    "module": "core.utils.io_utils",
    "description": "Save molecular descriptors with SMILES",
    "url": "functions.html#save_molecular_descriptors"
  },
  {
    "type": "function",
    "name": "_make_json_serializable",
    "full_name": "core.utils.io_utils._make_json_serializable",
    "module": "core.utils.io_utils",
    "description": "Convert object to JSON-serializable format",
    "url": "functions.html#_make_json_serializable"
  },
  {
    "type": "function",
    "name": "load_config",
    "full_name": "core.utils.io_utils.load_config",
    "module": "core.utils.io_utils",
    "description": "Load configuration from YAML or JSON file",
    "url": "functions.html#load_config"
  },
  {
    "type": "function",
    "name": "save_config",
    "full_name": "core.utils.io_utils.save_config",
    "module": "core.utils.io_utils",
    "description": "Save configuration to file",
    "url": "functions.html#save_config"
  },
  {
    "type": "function",
    "name": "create_experiment_config",
    "full_name": "core.utils.io_utils.create_experiment_config",
    "module": "core.utils.io_utils",
    "description": "Create comprehensive experiment configuration",
    "url": "functions.html#create_experiment_config"
  },
  {
    "type": "function",
    "name": "create_directory_structure",
    "full_name": "core.utils.io_utils.create_directory_structure",
    "module": "core.utils.io_utils",
    "description": "Create directory structure for project",
    "url": "functions.html#create_directory_structure"
  },
  {
    "type": "function",
    "name": "list_files",
    "full_name": "core.utils.io_utils.list_files",
    "module": "core.utils.io_utils",
    "description": "List files matching pattern in directory",
    "url": "functions.html#list_files"
  },
  {
    "type": "function",
    "name": "get_file_info",
    "full_name": "core.utils.io_utils.get_file_info",
    "module": "core.utils.io_utils",
    "description": "Get file information",
    "url": "functions.html#get_file_info"
  },
  {
    "type": "function",
    "name": "backup_file",
    "full_name": "core.utils.io_utils.backup_file",
    "module": "core.utils.io_utils",
    "description": "Create backup of file",
    "url": "functions.html#backup_file"
  },
  {
    "type": "function",
    "name": "accuracy",
    "full_name": "core.utils.metrics.accuracy",
    "module": "core.utils.metrics",
    "description": "Calculate accuracy manually.",
    "url": "functions.html#accuracy"
  },
  {
    "type": "function",
    "name": "precision",
    "full_name": "core.utils.metrics.precision",
    "module": "core.utils.metrics",
    "description": "Calculate precision manually for binary classification.",
    "url": "functions.html#precision"
  },
  {
    "type": "function",
    "name": "recall",
    "full_name": "core.utils.metrics.recall",
    "module": "core.utils.metrics",
    "description": "Calculate recall manually for binary classification.",
    "url": "functions.html#recall"
  },
  {
    "type": "function",
    "name": "f1_score_manual",
    "full_name": "core.utils.metrics.f1_score_manual",
    "module": "core.utils.metrics",
    "description": "Calculate F1 score manually.",
    "url": "functions.html#f1_score_manual"
  },
  {
    "type": "function",
    "name": "mean_squared_error_manual",
    "full_name": "core.utils.metrics.mean_squared_error_manual",
    "module": "core.utils.metrics",
    "description": "Calculate MSE manually.",
    "url": "functions.html#mean_squared_error_manual"
  },
  {
    "type": "function",
    "name": "mean_absolute_error_manual",
    "full_name": "core.utils.metrics.mean_absolute_error_manual",
    "module": "core.utils.metrics",
    "description": "Calculate MAE manually.",
    "url": "functions.html#mean_absolute_error_manual"
  },
  {
    "type": "function",
    "name": "r_squared",
    "full_name": "core.utils.metrics.r_squared",
    "module": "core.utils.metrics",
    "description": "Calculate R\u00b2 manually.",
    "url": "functions.html#r_squared"
  },
  {
    "type": "function",
    "name": "mean_absolute_percentage_error",
    "full_name": "core.utils.metrics.mean_absolute_percentage_error",
    "module": "core.utils.metrics",
    "description": "Calculate Mean Absolute Percentage Error.",
    "url": "functions.html#mean_absolute_percentage_error"
  },
  {
    "type": "function",
    "name": "explained_variance_score",
    "full_name": "core.utils.metrics.explained_variance_score",
    "module": "core.utils.metrics",
    "description": "Calculate explained variance score.",
    "url": "functions.html#explained_variance_score"
  },
  {
    "type": "function",
    "name": "evaluate_model_performance",
    "full_name": "core.utils.metrics.evaluate_model_performance",
    "module": "core.utils.metrics",
    "description": "Comprehensive model evaluation for different task types.\n\nArgs:\n    y_true: True values/labels\n    y_pred: Predicted values/labels\n    task_type: Type of task (\"regression\" or \"classification\")\n    y_",
    "url": "functions.html#evaluate_model_performance"
  },
  {
    "type": "function",
    "name": "calculate_enrichment_factor",
    "full_name": "core.utils.metrics.calculate_enrichment_factor",
    "module": "core.utils.metrics",
    "description": "Calculate enrichment factor for virtual screening evaluation.\n\nArgs:\n    y_true: True binary labels (1 for active, 0 for inactive)\n    y_scores: Predicted scores/probabilities\n    fraction: Fraction o",
    "url": "functions.html#calculate_enrichment_factor"
  },
  {
    "type": "function",
    "name": "calculate_all_metrics",
    "full_name": "core.utils.metrics.calculate_all_metrics",
    "module": "core.utils.metrics",
    "description": "Calculate comprehensive regression metrics.\n\nArgs:\n    y_true: True values\n    y_pred: Predicted values\n\nReturns:\n    Dictionary of calculated metrics",
    "url": "functions.html#calculate_all_metrics"
  },
  {
    "type": "function",
    "name": "confusion_matrix_metrics",
    "full_name": "core.utils.metrics.confusion_matrix_metrics",
    "module": "core.utils.metrics",
    "description": "Calculate confusion matrix and derived metrics.\n\nArgs:\n    y_true: True labels\n    y_pred: Predicted labels\n\nReturns:\n    Dictionary with confusion matrix and metrics",
    "url": "functions.html#confusion_matrix_metrics"
  },
  {
    "type": "function",
    "name": "tanimoto_similarity",
    "full_name": "core.utils.metrics.tanimoto_similarity",
    "module": "core.utils.metrics",
    "description": "Calculate Tanimoto similarity between two molecules.\n\nArgs:\n    smiles1: First molecule SMILES\n    smiles2: Second molecule SMILES\n    fingerprint_type: Type of fingerprint ('morgan', 'maccs')\n\nReturn",
    "url": "functions.html#tanimoto_similarity"
  },
  {
    "type": "function",
    "name": "diversity_metrics",
    "full_name": "core.utils.metrics.diversity_metrics",
    "module": "core.utils.metrics",
    "description": "Calculate diversity metrics for a set of molecules.\n\nArgs:\n    smiles_list: List of SMILES strings\n\nReturns:\n    Dictionary of diversity metrics",
    "url": "functions.html#diversity_metrics"
  },
  {
    "type": "function",
    "name": "calculate_feature_importance",
    "full_name": "core.utils.ml_utils.calculate_feature_importance",
    "module": "core.utils.ml_utils",
    "description": "Extract feature importance from trained model\n\nArgs:\n    model: Trained model with feature_importances_ or coef_ attribute\n    feature_names: Optional list of feature names\n\nReturns:\n    DataFrame wit",
    "url": "functions.html#calculate_feature_importance"
  },
  {
    "type": "function",
    "name": "optimize_hyperparameters",
    "full_name": "core.utils.ml_utils.optimize_hyperparameters",
    "module": "core.utils.ml_utils",
    "description": "Optimize hyperparameters using GridSearchCV\n\nArgs:\n    model: Scikit-learn model\n    param_grid: Parameter grid for search\n    X: Feature matrix\n    y: Target vector\n    cv: Number of CV folds\n    sco",
    "url": "functions.html#optimize_hyperparameters"
  },
  {
    "type": "function",
    "name": "evaluate_model",
    "full_name": "core.utils.ml_utils.evaluate_model",
    "module": "core.utils.ml_utils",
    "description": "Evaluate a trained model on given data.\n\nArgs:\n    model: Trained model with predict method\n    X: Feature matrix\n    y: True labels/values\n    task_type: Type of task (\"classification\" or \"regression",
    "url": "functions.html#evaluate_model"
  },
  {
    "type": "function",
    "name": "split_data",
    "full_name": "core.utils.ml_utils.split_data",
    "module": "core.utils.ml_utils",
    "description": "Split data into train/validation/test sets\n\nArgs:\n    X: Feature matrix\n    y: Target vector\n    stratify: Whether to stratify the split for classification\n\nReturns:\n    Tuple of (X_train, X_val, X_te",
    "url": "functions.html#split_data"
  },
  {
    "type": "function",
    "name": "normalize_features",
    "full_name": "core.utils.ml_utils.normalize_features",
    "module": "core.utils.ml_utils",
    "description": "Normalize features using specified method.\n\nArgs:\n    X: Feature matrix\n    method: Normalization method (\"standard\", \"minmax\", \"robust\")\n    return_scaler: Whether to return the scaler along with nor",
    "url": "functions.html#normalize_features"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.utils.ml_utils.__init__",
    "module": "core.utils.ml_utils",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "temporal_split",
    "full_name": "core.utils.ml_utils.temporal_split",
    "module": "core.utils.ml_utils",
    "description": "Split data temporally for time series or drug discovery pipelines\n\nArgs:\n    df: DataFrame with temporal data\n    date_column: Name of the date/time column\n    train_ratio: Proportion for training\n   ",
    "url": "functions.html#temporal_split"
  },
  {
    "type": "function",
    "name": "fit_transform",
    "full_name": "core.utils.ml_utils.fit_transform",
    "module": "core.utils.ml_utils",
    "description": "Fit scaler and transform data",
    "url": "functions.html#fit_transform"
  },
  {
    "type": "function",
    "name": "transform",
    "full_name": "core.utils.ml_utils.transform",
    "module": "core.utils.ml_utils",
    "description": "Transform data using fitted scaler",
    "url": "functions.html#transform"
  },
  {
    "type": "function",
    "name": "inverse_transform",
    "full_name": "core.utils.ml_utils.inverse_transform",
    "module": "core.utils.ml_utils",
    "description": "Inverse transform scaled data",
    "url": "functions.html#inverse_transform"
  },
  {
    "type": "function",
    "name": "save",
    "full_name": "core.utils.ml_utils.save",
    "module": "core.utils.ml_utils",
    "description": "Save fitted scaler",
    "url": "functions.html#save"
  },
  {
    "type": "function",
    "name": "load",
    "full_name": "core.utils.ml_utils.load",
    "module": "core.utils.ml_utils",
    "description": "Load fitted scaler",
    "url": "functions.html#load"
  },
  {
    "type": "function",
    "name": "evaluate_classification",
    "full_name": "core.utils.ml_utils.evaluate_classification",
    "module": "core.utils.ml_utils",
    "description": "Evaluate classification model",
    "url": "functions.html#evaluate_classification"
  },
  {
    "type": "function",
    "name": "evaluate_regression",
    "full_name": "core.utils.ml_utils.evaluate_regression",
    "module": "core.utils.ml_utils",
    "description": "Evaluate regression model",
    "url": "functions.html#evaluate_regression"
  },
  {
    "type": "function",
    "name": "confusion_matrix_analysis",
    "full_name": "core.utils.ml_utils.confusion_matrix_analysis",
    "module": "core.utils.ml_utils",
    "description": "Detailed confusion matrix analysis",
    "url": "functions.html#confusion_matrix_analysis"
  },
  {
    "type": "function",
    "name": "cross_validate_model",
    "full_name": "core.utils.ml_utils.cross_validate_model",
    "module": "core.utils.ml_utils",
    "description": "Perform cross-validation\n\nArgs:\n    model: Scikit-learn compatible model\n    X: Feature matrix\n    y: Target vector\n    stratified: Use stratified CV for classification\n\nReturns:\n    Dictionary with C",
    "url": "functions.html#cross_validate_model"
  },
  {
    "type": "function",
    "name": "_is_classification_task",
    "full_name": "core.utils.ml_utils._is_classification_task",
    "module": "core.utils.ml_utils",
    "description": "Determine if task is classification based on target values",
    "url": "functions.html#_is_classification_task"
  },
  {
    "type": "function",
    "name": "save_model",
    "full_name": "core.utils.ml_utils.save_model",
    "module": "core.utils.ml_utils",
    "description": "Save model with optional metadata\n\nArgs:\n    model: Trained model object\n    filepath: Path to save model\n    metadata: Optional metadata dictionary",
    "url": "functions.html#save_model"
  },
  {
    "type": "function",
    "name": "load_model",
    "full_name": "core.utils.ml_utils.load_model",
    "module": "core.utils.ml_utils",
    "description": "Load model with metadata\n\nArgs:\n    filepath: Path to saved model\n\nReturns:\n    Tuple of (model, metadata)",
    "url": "functions.html#load_model"
  },
  {
    "type": "function",
    "name": "calculate_drug_likeness_score",
    "full_name": "core.utils.molecular_utils.calculate_drug_likeness_score",
    "module": "core.utils.molecular_utils",
    "description": "Calculate a simple drug-likeness score based on multiple criteria\n\nArgs:\n    mol: RDKit molecule object\n\nReturns:\n    Drug-likeness score (0-1, higher is better)",
    "url": "functions.html#calculate_drug_likeness_score"
  },
  {
    "type": "function",
    "name": "batch_process_molecules",
    "full_name": "core.utils.molecular_utils.batch_process_molecules",
    "module": "core.utils.molecular_utils",
    "description": "Batch process a list of SMILES strings\n\nArgs:\n    smiles_list: List of SMILES strings\n    calculate_descriptors: Whether to calculate molecular descriptors\n    filter_lipinski: Whether to apply Lipins",
    "url": "functions.html#batch_process_molecules"
  },
  {
    "type": "function",
    "name": "smiles_to_mol",
    "full_name": "core.utils.molecular_utils.smiles_to_mol",
    "module": "core.utils.molecular_utils",
    "description": "Convert SMILES to RDKit Mol object",
    "url": "functions.html#smiles_to_mol"
  },
  {
    "type": "function",
    "name": "mol_to_smiles",
    "full_name": "core.utils.molecular_utils.mol_to_smiles",
    "module": "core.utils.molecular_utils",
    "description": "Convert molecule object to SMILES string.\n\nArgs:\n    mol: Molecule object or SMILES string\n\nReturns:\n    SMILES string",
    "url": "functions.html#mol_to_smiles"
  },
  {
    "type": "function",
    "name": "validate_smiles",
    "full_name": "core.utils.molecular_utils.validate_smiles",
    "module": "core.utils.molecular_utils",
    "description": "Validate if a SMILES string is chemically valid.\n\nArgs:\n    smiles: SMILES string to validate\n\nReturns:\n    True if valid, False otherwise",
    "url": "functions.html#validate_smiles"
  },
  {
    "type": "function",
    "name": "calculate_molecular_weight",
    "full_name": "core.utils.molecular_utils.calculate_molecular_weight",
    "module": "core.utils.molecular_utils",
    "description": "Calculate molecular weight from SMILES.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Molecular weight",
    "url": "functions.html#calculate_molecular_weight"
  },
  {
    "type": "function",
    "name": "calculate_logp",
    "full_name": "core.utils.molecular_utils.calculate_logp",
    "module": "core.utils.molecular_utils",
    "description": "Calculate LogP from SMILES.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    LogP value",
    "url": "functions.html#calculate_logp"
  },
  {
    "type": "function",
    "name": "get_molecular_formula",
    "full_name": "core.utils.molecular_utils.get_molecular_formula",
    "module": "core.utils.molecular_utils",
    "description": "Get molecular formula from SMILES.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Molecular formula",
    "url": "functions.html#get_molecular_formula"
  },
  {
    "type": "function",
    "name": "standardize_molecule",
    "full_name": "core.utils.molecular_utils.standardize_molecule",
    "module": "core.utils.molecular_utils",
    "description": "Standardize a molecule by canonicalizing its SMILES.\n\nArgs:\n    smiles: Input SMILES string\n\nReturns:\n    Canonical SMILES",
    "url": "functions.html#standardize_molecule"
  },
  {
    "type": "function",
    "name": "remove_salts",
    "full_name": "core.utils.molecular_utils.remove_salts",
    "module": "core.utils.molecular_utils",
    "description": "Remove salts from a molecule.\n\nArgs:\n    smiles: Input SMILES string\n\nReturns:\n    SMILES without salts",
    "url": "functions.html#remove_salts"
  },
  {
    "type": "function",
    "name": "neutralize_molecule",
    "full_name": "core.utils.molecular_utils.neutralize_molecule",
    "module": "core.utils.molecular_utils",
    "description": "Neutralize charged groups in a molecule.\n\nArgs:\n    smiles: Input SMILES string\n\nReturns:\n    Neutralized SMILES",
    "url": "functions.html#neutralize_molecule"
  },
  {
    "type": "function",
    "name": "calculate_similarity",
    "full_name": "core.utils.molecular_utils.calculate_similarity",
    "module": "core.utils.molecular_utils",
    "description": "Calculate molecular similarity between two molecules.\n\nArgs:\n    mol1: First molecule (SMILES string or RDKit Mol object)\n    mol2: Second molecule (SMILES string or RDKit Mol object)\n    method: Simi",
    "url": "functions.html#calculate_similarity"
  },
  {
    "type": "function",
    "name": "filter_molecules_by_properties",
    "full_name": "core.utils.molecular_utils.filter_molecules_by_properties",
    "module": "core.utils.molecular_utils",
    "description": "Filter molecules based on drug-like properties.\n\nArgs:\n    molecules: List of SMILES strings or RDKit Mol objects\n    mw_range: Molecular weight range (min, max)\n    logp_range: LogP range (min, max)\n",
    "url": "functions.html#filter_molecules_by_properties"
  },
  {
    "type": "function",
    "name": "standardize_smiles",
    "full_name": "core.utils.molecular_utils.standardize_smiles",
    "module": "core.utils.molecular_utils",
    "description": "Standardize a SMILES string using RDKit canonicalization.\n\nArgs:\n    smiles: Input SMILES string\n\nReturns:\n    Canonical SMILES string or None if invalid",
    "url": "functions.html#standardize_smiles"
  },
  {
    "type": "function",
    "name": "calculate_molecular_properties",
    "full_name": "core.utils.molecular_utils.calculate_molecular_properties",
    "module": "core.utils.molecular_utils",
    "description": "Calculate molecular properties for a SMILES string.\n\nArgs:\n    smiles: Input SMILES string\n\nReturns:\n    Dictionary of molecular properties or None if invalid",
    "url": "functions.html#calculate_molecular_properties"
  },
  {
    "type": "function",
    "name": "generate_conformers",
    "full_name": "core.utils.molecular_utils.generate_conformers",
    "module": "core.utils.molecular_utils",
    "description": "Generate 3D conformers for a molecule.\n\nArgs:\n    smiles: Input SMILES string\n    num_conformers: Number of conformers to generate\n\nReturns:\n    RDKit Mol object with conformers or None if failed",
    "url": "functions.html#generate_conformers"
  },
  {
    "type": "function",
    "name": "validate_molecule",
    "full_name": "core.utils.molecular_utils.validate_molecule",
    "module": "core.utils.molecular_utils",
    "description": "Validate if a SMILES string represents a valid molecule.\n\nArgs:\n    smiles: Input SMILES string\n\nReturns:\n    True if valid, False otherwise",
    "url": "functions.html#validate_molecule"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.utils.molecular_utils.__init__",
    "module": "core.utils.molecular_utils",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "calculate_basic_descriptors",
    "full_name": "core.utils.molecular_utils.calculate_basic_descriptors",
    "module": "core.utils.molecular_utils",
    "description": "Calculate basic molecular descriptors",
    "url": "functions.html#calculate_basic_descriptors"
  },
  {
    "type": "function",
    "name": "calculate_lipinski_descriptors",
    "full_name": "core.utils.molecular_utils.calculate_lipinski_descriptors",
    "module": "core.utils.molecular_utils",
    "description": "Calculate Lipinski Rule of Five descriptors",
    "url": "functions.html#calculate_lipinski_descriptors"
  },
  {
    "type": "function",
    "name": "calculate_morgan_fingerprint",
    "full_name": "core.utils.molecular_utils.calculate_morgan_fingerprint",
    "module": "core.utils.molecular_utils",
    "description": "Calculate Morgan fingerprint",
    "url": "functions.html#calculate_morgan_fingerprint"
  },
  {
    "type": "function",
    "name": "passes_lipinski",
    "full_name": "core.utils.molecular_utils.passes_lipinski",
    "module": "core.utils.molecular_utils",
    "description": "Check if molecule passes Lipinski's Rule of Five",
    "url": "functions.html#passes_lipinski"
  },
  {
    "type": "function",
    "name": "filter_molecules",
    "full_name": "core.utils.molecular_utils.filter_molecules",
    "module": "core.utils.molecular_utils",
    "description": "Filter list of SMILES based on Lipinski's Rule of Five",
    "url": "functions.html#filter_molecules"
  },
  {
    "type": "function",
    "name": "canonicalize_smiles",
    "full_name": "core.utils.molecular_utils.canonicalize_smiles",
    "module": "core.utils.molecular_utils",
    "description": "Convert SMILES to canonical form",
    "url": "functions.html#canonicalize_smiles"
  },
  {
    "type": "function",
    "name": "is_valid_smiles",
    "full_name": "core.utils.molecular_utils.is_valid_smiles",
    "module": "core.utils.molecular_utils",
    "description": "Check if SMILES string is valid",
    "url": "functions.html#is_valid_smiles"
  },
  {
    "type": "function",
    "name": "process_smiles_list",
    "full_name": "core.utils.molecular_utils.process_smiles_list",
    "module": "core.utils.molecular_utils",
    "description": "Process list of SMILES and return valid/invalid splits",
    "url": "functions.html#process_smiles_list"
  },
  {
    "type": "function",
    "name": "view_2d",
    "full_name": "core.utils.molecular_utils.view_2d",
    "module": "core.utils.molecular_utils",
    "description": "Display 2D structure of molecule",
    "url": "functions.html#view_2d"
  },
  {
    "type": "function",
    "name": "view_3d",
    "full_name": "core.utils.molecular_utils.view_3d",
    "module": "core.utils.molecular_utils",
    "description": "Display 3D structure using py3Dmol (for Jupyter)",
    "url": "functions.html#view_3d"
  },
  {
    "type": "function",
    "name": "check_pains_alerts",
    "full_name": "core.utils.molecular_utils.check_pains_alerts",
    "module": "core.utils.molecular_utils",
    "description": "Check for PAINS (Pan Assay Interference Compounds) alerts.",
    "url": "functions.html#check_pains_alerts"
  },
  {
    "type": "function",
    "name": "check_brenk_alerts",
    "full_name": "core.utils.molecular_utils.check_brenk_alerts",
    "module": "core.utils.molecular_utils",
    "description": "Check for Brenk alerts (undesirable functional groups).",
    "url": "functions.html#check_brenk_alerts"
  },
  {
    "type": "function",
    "name": "tanimoto_similarity",
    "full_name": "core.utils.molecular_utils.tanimoto_similarity",
    "module": "core.utils.molecular_utils",
    "description": "Calculate Tanimoto similarity between two fingerprints.",
    "url": "functions.html#tanimoto_similarity"
  },
  {
    "type": "function",
    "name": "dice_similarity",
    "full_name": "core.utils.molecular_utils.dice_similarity",
    "module": "core.utils.molecular_utils",
    "description": "Calculate Dice similarity between two fingerprints.",
    "url": "functions.html#dice_similarity"
  },
  {
    "type": "function",
    "name": "draw_molecule_2d",
    "full_name": "core.utils.molecular_utils.draw_molecule_2d",
    "module": "core.utils.molecular_utils",
    "description": "Draw 2D representation of molecule.",
    "url": "functions.html#draw_molecule_2d"
  },
  {
    "type": "function",
    "name": "draw_molecule_3d",
    "full_name": "core.utils.molecular_utils.draw_molecule_3d",
    "module": "core.utils.molecular_utils",
    "description": "Draw 3D representation of molecule using py3Dmol.",
    "url": "functions.html#draw_molecule_3d"
  },
  {
    "type": "function",
    "name": "quantum_distance",
    "full_name": "core.utils.quantum_utils.quantum_distance",
    "module": "core.utils.quantum_utils",
    "description": "Calculate quantum distance between two states using fidelity\n\nArgs:\n    state1, state2: Quantum state vectors\n\nReturns:\n    Quantum distance (0 = identical, 1 = orthogonal)",
    "url": "functions.html#quantum_distance"
  },
  {
    "type": "function",
    "name": "create_quantum_feature_map",
    "full_name": "core.utils.quantum_utils.create_quantum_feature_map",
    "module": "core.utils.quantum_utils",
    "description": "Create quantum feature map from classical features\n\nArgs:\n    features: Classical feature vector\n    num_qubits: Number of qubits (defaults to len(features))\n\nReturns:\n    QuantumCircuit encoding the ",
    "url": "functions.html#create_quantum_feature_map"
  },
  {
    "type": "function",
    "name": "create_quantum_circuit",
    "full_name": "core.utils.quantum_utils.create_quantum_circuit",
    "module": "core.utils.quantum_utils",
    "description": "Create a basic quantum circuit.\n\nArgs:\n    n_qubits: Number of quantum bits\n    n_classical: Number of classical bits (defaults to n_qubits)\n    n_cbits: Alternative name for n_classical (for compatib",
    "url": "functions.html#create_quantum_circuit"
  },
  {
    "type": "function",
    "name": "apply_quantum_gate",
    "full_name": "core.utils.quantum_utils.apply_quantum_gate",
    "module": "core.utils.quantum_utils",
    "description": "Apply a quantum gate to a circuit.\n\nArgs:\n    circuit: Quantum circuit\n    gate_type: Type of gate ('h', 'x', 'y', 'z', 'rx', 'ry', 'rz', 'cnot', 'cx')\n    qubit: Target qubit index or list of qubits ",
    "url": "functions.html#apply_quantum_gate"
  },
  {
    "type": "function",
    "name": "measure_quantum_state",
    "full_name": "core.utils.quantum_utils.measure_quantum_state",
    "module": "core.utils.quantum_utils",
    "description": "Measure quantum state and return results.\n\nArgs:\n    circuit: Quantum circuit\n    qubits: List of qubits to measure (defaults to all)\n\nReturns:\n    Dictionary with measurement results ('counts' or 'st",
    "url": "functions.html#measure_quantum_state"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "core.utils.quantum_utils.__init__",
    "module": "core.utils.quantum_utils",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "create_h2_hamiltonian",
    "full_name": "core.utils.quantum_utils.create_h2_hamiltonian",
    "module": "core.utils.quantum_utils",
    "description": "Create Hamiltonian for H2 molecule",
    "url": "functions.html#create_h2_hamiltonian"
  },
  {
    "type": "function",
    "name": "create_ansatz_circuit",
    "full_name": "core.utils.quantum_utils.create_ansatz_circuit",
    "module": "core.utils.quantum_utils",
    "description": "Create a parameterized ansatz circuit",
    "url": "functions.html#create_ansatz_circuit"
  },
  {
    "type": "function",
    "name": "create_hea_circuit",
    "full_name": "core.utils.quantum_utils.create_hea_circuit",
    "module": "core.utils.quantum_utils",
    "description": "Create Hardware Efficient Ansatz circuit",
    "url": "functions.html#create_hea_circuit"
  },
  {
    "type": "function",
    "name": "optimize_h2",
    "full_name": "core.utils.quantum_utils.optimize_h2",
    "module": "core.utils.quantum_utils",
    "description": "Optimize H2 molecule ground state energy\n\nArgs:\n    bond_distance: H-H bond distance in Angstroms\n\nReturns:\n    Dictionary with optimization results",
    "url": "functions.html#optimize_h2"
  },
  {
    "type": "function",
    "name": "scan_bond_distances",
    "full_name": "core.utils.quantum_utils.scan_bond_distances",
    "module": "core.utils.quantum_utils",
    "description": "Scan multiple H2 bond distances",
    "url": "functions.html#scan_bond_distances"
  },
  {
    "type": "function",
    "name": "h2_hamiltonian_parametric",
    "full_name": "core.utils.quantum_utils.h2_hamiltonian_parametric",
    "module": "core.utils.quantum_utils",
    "description": "Create H2 Hamiltonian as a function of bond distance\n\nArgs:\n    bond_distance: H-H distance in Angstroms\n\nReturns:\n    SparsePauliOp representing the molecular Hamiltonian",
    "url": "functions.html#h2_hamiltonian_parametric"
  },
  {
    "type": "function",
    "name": "create_ising_hamiltonian",
    "full_name": "core.utils.quantum_utils.create_ising_hamiltonian",
    "module": "core.utils.quantum_utils",
    "description": "Create transverse field Ising model Hamiltonian",
    "url": "functions.html#create_ising_hamiltonian"
  },
  {
    "type": "function",
    "name": "create_variational_classifier",
    "full_name": "core.utils.quantum_utils.create_variational_classifier",
    "module": "core.utils.quantum_utils",
    "description": "Create a variational quantum classifier",
    "url": "functions.html#create_variational_classifier"
  },
  {
    "type": "function",
    "name": "create_quantum_embedding",
    "full_name": "core.utils.quantum_utils.create_quantum_embedding",
    "module": "core.utils.quantum_utils",
    "description": "Create quantum feature embedding circuit",
    "url": "functions.html#create_quantum_embedding"
  },
  {
    "type": "function",
    "name": "circuit",
    "full_name": "core.utils.quantum_utils.circuit",
    "module": "core.utils.quantum_utils",
    "description": "",
    "url": "functions.html#circuit"
  },
  {
    "type": "function",
    "name": "embedding",
    "full_name": "core.utils.quantum_utils.embedding",
    "module": "core.utils.quantum_utils",
    "description": "",
    "url": "functions.html#embedding"
  },
  {
    "type": "function",
    "name": "measure",
    "full_name": "core.utils.quantum_utils.measure",
    "module": "core.utils.quantum_utils",
    "description": "Mock measure method",
    "url": "functions.html#measure"
  },
  {
    "type": "function",
    "name": "h",
    "full_name": "core.utils.quantum_utils.h",
    "module": "core.utils.quantum_utils",
    "description": "Mock Hadamard gate",
    "url": "functions.html#h"
  },
  {
    "type": "function",
    "name": "x",
    "full_name": "core.utils.quantum_utils.x",
    "module": "core.utils.quantum_utils",
    "description": "Mock X gate",
    "url": "functions.html#x"
  },
  {
    "type": "function",
    "name": "cx",
    "full_name": "core.utils.quantum_utils.cx",
    "module": "core.utils.quantum_utils",
    "description": "Mock CNOT gate",
    "url": "functions.html#cx"
  },
  {
    "type": "function",
    "name": "plot_molecular_structure",
    "full_name": "core.utils.visualization.plot_molecular_structure",
    "module": "core.utils.visualization",
    "description": "Visualize molecular structure from SMILES string or Mol object.\n\nArgs:\n    mol_input: SMILES string or RDKit Mol object\n    filename: Output filename (optional)\n    size: Image size as (width, height)",
    "url": "functions.html#plot_molecular_structure"
  },
  {
    "type": "function",
    "name": "plot_feature_importance",
    "full_name": "core.utils.visualization.plot_feature_importance",
    "module": "core.utils.visualization",
    "description": "Plot feature importance from a trained model.\n\nArgs:\n    importances: Array of feature importances\n    feature_names: List of feature names\n    title: Plot title\n    top_n: Number of top features to d",
    "url": "functions.html#plot_feature_importance"
  },
  {
    "type": "function",
    "name": "plot_model_performance",
    "full_name": "core.utils.visualization.plot_model_performance",
    "module": "core.utils.visualization",
    "description": "Plot training history and model performance.\n\nArgs:\n    history: Dictionary with metrics history\n    title: Plot title\n    filename: Output filename (optional)",
    "url": "functions.html#plot_model_performance"
  },
  {
    "type": "function",
    "name": "create_dashboard_plots",
    "full_name": "core.utils.visualization.create_dashboard_plots",
    "module": "core.utils.visualization",
    "description": "Create a comprehensive set of visualization plots.\n\nArgs:\n    results_df: DataFrame with results to visualize\n    output_dir: Directory to save plots\n\nReturns:\n    Dictionary mapping plot types to fil",
    "url": "functions.html#create_dashboard_plots"
  },
  {
    "type": "function",
    "name": "plot_multiple_molecules",
    "full_name": "core.utils.visualization.plot_multiple_molecules",
    "module": "core.utils.visualization",
    "description": "Plot multiple molecular structures in a grid.\n\nArgs:\n    smiles_list: List of SMILES strings\n    titles: Optional titles for each molecule\n    filename: Output filename (optional)\n    mols_per_row: Nu",
    "url": "functions.html#plot_multiple_molecules"
  },
  {
    "type": "function",
    "name": "plot_molecular_properties_distribution",
    "full_name": "core.utils.visualization.plot_molecular_properties_distribution",
    "module": "core.utils.visualization",
    "description": "Plot distribution of molecular properties.\n\nArgs:\n    molecules_df: DataFrame with molecular data\n    properties: List of property columns to plot\n    filename: Output filename (optional)",
    "url": "functions.html#plot_molecular_properties_distribution"
  },
  {
    "type": "function",
    "name": "plot_predictions_vs_actual",
    "full_name": "core.utils.visualization.plot_predictions_vs_actual",
    "module": "core.utils.visualization",
    "description": "Plot predicted vs actual values for regression.\n\nArgs:\n    y_true: True values\n    y_pred: Predicted values\n    title: Plot title\n    filename: Output filename (optional)",
    "url": "functions.html#plot_predictions_vs_actual"
  },
  {
    "type": "function",
    "name": "plot_confusion_matrix",
    "full_name": "core.utils.visualization.plot_confusion_matrix",
    "module": "core.utils.visualization",
    "description": "Plot confusion matrix for classification.\n\nArgs:\n    y_true: True labels\n    y_pred: Predicted labels\n    labels: Class labels\n    title: Plot title\n    filename: Output filename (optional)",
    "url": "functions.html#plot_confusion_matrix"
  },
  {
    "type": "function",
    "name": "plot_chemical_space_pca",
    "full_name": "core.utils.visualization.plot_chemical_space_pca",
    "module": "core.utils.visualization",
    "description": "Plot chemical space using PCA of molecular descriptors.\n\nArgs:\n    molecules_df: DataFrame with molecular data\n    smiles_column: Name of SMILES column\n    color_column: Column to color points by (opt",
    "url": "functions.html#plot_chemical_space_pca"
  },
  {
    "type": "function",
    "name": "setup_logging",
    "full_name": "core.utils.setup_logging",
    "module": "core.utils",
    "description": "Setup logging configuration for ChemML.\n\nArgs:\n    level: Logging level ('DEBUG', 'INFO', 'WARNING', 'ERROR')\n    log_file: Path to log file (optional)\n    format_string: Custom format string (optiona",
    "url": "functions.html#setup_logging"
  },
  {
    "type": "function",
    "name": "check_environment",
    "full_name": "core.utils.check_environment",
    "module": "core.utils",
    "description": "Check the current environment and available dependencies.\n\nReturns:\n    Dictionary with environment information",
    "url": "functions.html#check_environment"
  },
  {
    "type": "function",
    "name": "print_environment_report",
    "full_name": "core.utils.print_environment_report",
    "module": "core.utils",
    "description": "Print a formatted environment report.\n\nArgs:\n    env_info: Environment info from check_environment() (optional)",
    "url": "functions.html#print_environment_report"
  },
  {
    "type": "function",
    "name": "get_sample_data",
    "full_name": "core.utils.get_sample_data",
    "module": "core.utils",
    "description": "Generate sample data for testing and tutorials.\n\nArgs:\n    dataset: Type of dataset ('molecules', 'properties', 'toxicity')\n    size: Number of samples to generate\n\nReturns:\n    Sample DataFrame",
    "url": "functions.html#get_sample_data"
  },
  {
    "type": "function",
    "name": "validate_smiles",
    "full_name": "core.utils.validate_smiles",
    "module": "core.utils",
    "description": "Validate SMILES strings using RDKit (if available).\n\nArgs:\n    smiles_list: List of SMILES strings to validate\n\nReturns:\n    Tuple of (validity_flags, error_messages)",
    "url": "functions.html#validate_smiles"
  },
  {
    "type": "function",
    "name": "download_sample_datasets",
    "full_name": "core.utils.download_sample_datasets",
    "module": "core.utils",
    "description": "Download common chemistry datasets for tutorials and testing.\n\nArgs:\n    data_dir: Directory to save datasets\n\nReturns:\n    Dictionary mapping dataset names to file paths",
    "url": "functions.html#download_sample_datasets"
  },
  {
    "type": "function",
    "name": "memory_usage_mb",
    "full_name": "core.utils.memory_usage_mb",
    "module": "core.utils",
    "description": "Get current memory usage in MB.\n\nReturns:\n    Memory usage in megabytes",
    "url": "functions.html#memory_usage_mb"
  },
  {
    "type": "function",
    "name": "configure_warnings",
    "full_name": "core.utils.configure_warnings",
    "module": "core.utils",
    "description": "Configure warning filters for cleaner output.\n\nArgs:\n    action: Warning action ('ignore', 'default', 'error', 'once')\n    categories: List of warning categories to filter",
    "url": "functions.html#configure_warnings"
  },
  {
    "type": "function",
    "name": "ensure_reproducibility",
    "full_name": "core.utils.ensure_reproducibility",
    "module": "core.utils",
    "description": "Set random seeds for reproducible results.\n\nArgs:\n    seed: Random seed to use",
    "url": "functions.html#ensure_reproducibility"
  },
  {
    "type": "function",
    "name": "create_directory_structure",
    "full_name": "core.utils.create_directory_structure",
    "module": "core.utils",
    "description": "Create standard ChemML project directory structure.\n\nArgs:\n    base_path: Base directory path",
    "url": "functions.html#create_directory_structure"
  },
  {
    "type": "function",
    "name": "format_large_number",
    "full_name": "core.utils.format_large_number",
    "module": "core.utils",
    "description": "Format large numbers with appropriate units.\n\nArgs:\n    number: Number to format\n\nReturns:\n    Formatted string",
    "url": "functions.html#format_large_number"
  },
  {
    "type": "function",
    "name": "time_function",
    "full_name": "core.utils.time_function",
    "module": "core.utils",
    "description": "Decorator to time function execution.\n\nArgs:\n    func: Function to time\n\nReturns:\n    Wrapped function",
    "url": "functions.html#time_function"
  },
  {
    "type": "function",
    "name": "wrapper",
    "full_name": "core.utils.wrapper",
    "module": "core.utils",
    "description": "",
    "url": "functions.html#wrapper"
  },
  {
    "type": "function",
    "name": "create_deepchem_dataset",
    "full_name": "integrations.deepchem_integration.create_deepchem_dataset",
    "module": "integrations.deepchem_integration",
    "description": "Create DeepChem dataset from SMILES and labels.\n\nArgs:\n    smiles_list: List of SMILES strings\n    labels: Optional labels\n    featurizer: Type of featurizer to use\n\nReturns:\n    DeepChem dataset obje",
    "url": "functions.html#create_deepchem_dataset"
  },
  {
    "type": "function",
    "name": "deepchem_to_chemml_format",
    "full_name": "integrations.deepchem_integration.deepchem_to_chemml_format",
    "module": "integrations.deepchem_integration",
    "description": "Convert DeepChem dataset to ChemML format.\n\nArgs:\n    dataset: DeepChem dataset\n\nReturns:\n    Tuple of (features, labels)",
    "url": "functions.html#deepchem_to_chemml_format"
  },
  {
    "type": "function",
    "name": "create_deepchem_model_ensemble",
    "full_name": "integrations.deepchem_integration.create_deepchem_model_ensemble",
    "module": "integrations.deepchem_integration",
    "description": "Create ensemble of DeepChem models.\n\nArgs:\n    model_configs: List of model configuration dictionaries\n\nReturns:\n    List of model wrappers",
    "url": "functions.html#create_deepchem_model_ensemble"
  },
  {
    "type": "function",
    "name": "benchmark_deepchem_featurizers",
    "full_name": "integrations.deepchem_integration.benchmark_deepchem_featurizers",
    "module": "integrations.deepchem_integration",
    "description": "Benchmark different DeepChem featurizers.\n\nArgs:\n    smiles_list: List of SMILES for benchmarking\n\nReturns:\n    Dictionary with benchmark results",
    "url": "functions.html#benchmark_deepchem_featurizers"
  },
  {
    "type": "function",
    "name": "quick_deepchem_model",
    "full_name": "integrations.deepchem_integration.quick_deepchem_model",
    "module": "integrations.deepchem_integration",
    "description": "Quickly create and train a DeepChem model.",
    "url": "functions.html#quick_deepchem_model"
  },
  {
    "type": "function",
    "name": "deepchem_molecular_transformer",
    "full_name": "integrations.deepchem_integration.deepchem_molecular_transformer",
    "module": "integrations.deepchem_integration",
    "description": "Create DeepChem molecular transformer model.",
    "url": "functions.html#deepchem_molecular_transformer"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "integrations.deepchem_integration.__init__",
    "module": "integrations.deepchem_integration",
    "description": "Initialize hybrid featurizer.\n\nArgs:\n    chemml_featurizers: List of ChemML featurizer instances\n    deepchem_featurizers: List of DeepChem featurizer instances",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "fit",
    "full_name": "integrations.deepchem_integration.fit",
    "module": "integrations.deepchem_integration",
    "description": "Fit DeepChem model to data.\n\nArgs:\n    X: Feature matrix\n    y: Target values\n    **fit_kwargs: Additional fitting parameters\n\nReturns:\n    Dictionary with training metrics",
    "url": "functions.html#fit"
  },
  {
    "type": "function",
    "name": "predict",
    "full_name": "integrations.deepchem_integration.predict",
    "module": "integrations.deepchem_integration",
    "description": "Make predictions using fitted model.",
    "url": "functions.html#predict"
  },
  {
    "type": "function",
    "name": "evaluate",
    "full_name": "integrations.deepchem_integration.evaluate",
    "module": "integrations.deepchem_integration",
    "description": "Evaluate model performance.",
    "url": "functions.html#evaluate"
  },
  {
    "type": "function",
    "name": "featurize",
    "full_name": "integrations.deepchem_integration.featurize",
    "module": "integrations.deepchem_integration",
    "description": "Generate combined features using both ChemML and DeepChem featurizers.\n\nArgs:\n    smiles_list: List of SMILES strings\n\nReturns:\n    Combined feature matrix",
    "url": "functions.html#featurize"
  },
  {
    "type": "function",
    "name": "setup_wandb_tracking",
    "full_name": "integrations.experiment_tracking.setup_wandb_tracking",
    "module": "integrations.experiment_tracking",
    "description": "Setup wandb experiment tracking.",
    "url": "functions.html#setup_wandb_tracking"
  },
  {
    "type": "function",
    "name": "log_metrics",
    "full_name": "integrations.experiment_tracking.log_metrics",
    "module": "integrations.experiment_tracking",
    "description": "Log metrics to wandb.",
    "url": "functions.html#log_metrics"
  },
  {
    "type": "function",
    "name": "finish_run",
    "full_name": "integrations.experiment_tracking.finish_run",
    "module": "integrations.experiment_tracking",
    "description": "Finish wandb run.",
    "url": "functions.html#finish_run"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "integrations.pipeline.__init__",
    "module": "integrations.pipeline",
    "description": "Initialize complete drug discovery pipeline.\n\nArgs:\n    include_admet: Include ADMET prediction\n    include_docking: Include molecular docking\n    include_generation: Include molecular generation\n    ",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "configure",
    "full_name": "integrations.pipeline.configure",
    "module": "integrations.pipeline",
    "description": "Configure pipeline parameters.",
    "url": "functions.html#configure"
  },
  {
    "type": "function",
    "name": "virtual_screening",
    "full_name": "integrations.pipeline.virtual_screening",
    "module": "integrations.pipeline",
    "description": "Perform virtual screening of compound library.",
    "url": "functions.html#virtual_screening"
  },
  {
    "type": "function",
    "name": "molecular_docking",
    "full_name": "integrations.pipeline.molecular_docking",
    "module": "integrations.pipeline",
    "description": "Perform molecular docking on compound set.",
    "url": "functions.html#molecular_docking"
  },
  {
    "type": "function",
    "name": "admet_prediction",
    "full_name": "integrations.pipeline.admet_prediction",
    "module": "integrations.pipeline",
    "description": "Predict ADMET properties for compounds.",
    "url": "functions.html#admet_prediction"
  },
  {
    "type": "function",
    "name": "lead_optimization",
    "full_name": "integrations.pipeline.lead_optimization",
    "module": "integrations.pipeline",
    "description": "Optimize lead compounds.",
    "url": "functions.html#lead_optimization"
  },
  {
    "type": "function",
    "name": "generate_final_report",
    "full_name": "integrations.pipeline.generate_final_report",
    "module": "integrations.pipeline",
    "description": "Generate comprehensive pipeline results.",
    "url": "functions.html#generate_final_report"
  },
  {
    "type": "function",
    "name": "smiles_to_graph",
    "full_name": "research.advanced_models.smiles_to_graph",
    "module": "research.advanced_models",
    "description": "Convert SMILES string to graph representation.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Dictionary with node features, edge indices, and edge features",
    "url": "functions.html#smiles_to_graph"
  },
  {
    "type": "function",
    "name": "create_molecular_graph_dataset",
    "full_name": "research.advanced_models.create_molecular_graph_dataset",
    "module": "research.advanced_models",
    "description": "Create dataset of molecular graphs from SMILES.\n\nArgs:\n    smiles_list: List of SMILES strings\n    labels: Optional labels for supervised learning\n\nReturns:\n    List of graph data dictionaries",
    "url": "functions.html#create_molecular_graph_dataset"
  },
  {
    "type": "function",
    "name": "analyze_attention_weights",
    "full_name": "research.advanced_models.analyze_attention_weights",
    "module": "research.advanced_models",
    "description": "Analyze attention weights for model interpretability.\n\nArgs:\n    model: Trained attention model\n    features: Input features\n    feature_names: Names of features\n\nReturns:\n    Dictionary with attentio",
    "url": "functions.html#analyze_attention_weights"
  },
  {
    "type": "function",
    "name": "ensemble_predictions",
    "full_name": "research.advanced_models.ensemble_predictions",
    "module": "research.advanced_models",
    "description": "Combine predictions from multiple models.\n\nArgs:\n    models: List of trained models\n    features: Input features\n    method: Ensemble method ('mean', 'median', 'weighted')\n\nReturns:\n    Ensemble predi",
    "url": "functions.html#ensemble_predictions"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.advanced_models.__init__",
    "module": "research.advanced_models",
    "description": "Initialize attention-based model.\n\nArgs:\n    input_dim: Input feature dimension\n    hidden_dim: Hidden dimension\n    num_heads: Number of attention heads\n    output_dim: Output dimension",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "forward",
    "full_name": "research.advanced_models.forward",
    "module": "research.advanced_models",
    "description": "Forward pass with optional attention weights.",
    "url": "functions.html#forward"
  },
  {
    "type": "function",
    "name": "adapt",
    "full_name": "research.advanced_models.adapt",
    "module": "research.advanced_models",
    "description": "Adapt model to new task using support set.\n\nArgs:\n    support_x: Support set features\n    support_y: Support set targets\n    learning_rate: Learning rate for adaptation\n    num_steps: Number of adapta",
    "url": "functions.html#adapt"
  },
  {
    "type": "function",
    "name": "stratify_trial_patients",
    "full_name": "research.clinical_research.stratify_trial_patients",
    "module": "research.clinical_research",
    "description": "Convenience function for patient stratification.\n\nArgs:\n    patient_data: DataFrame with patient data\n    features: Features to use for stratification\n    n_strata: Number of strata to create\n    \nRet",
    "url": "functions.html#stratify_trial_patients"
  },
  {
    "type": "function",
    "name": "optimize_clinical_trial",
    "full_name": "research.clinical_research.optimize_clinical_trial",
    "module": "research.clinical_research",
    "description": "Convenience function for trial optimization.\n\nArgs:\n    endpoint: Primary endpoint\n    population: Patient population characteristics\n    effect_size: Expected effect size\n    power: Desired power\n   ",
    "url": "functions.html#optimize_clinical_trial"
  },
  {
    "type": "function",
    "name": "validate_clinical_ai_model",
    "full_name": "research.clinical_research.validate_clinical_ai_model",
    "module": "research.clinical_research",
    "description": "Convenience function for AI model validation.\n\nArgs:\n    model: AI model to validate\n    validation_data: Validation dataset\n    purpose: Clinical purpose of the model\n    risk: Risk level\n    \nReturn",
    "url": "functions.html#validate_clinical_ai_model"
  },
  {
    "type": "function",
    "name": "quick_clinical_analysis",
    "full_name": "research.clinical_research.quick_clinical_analysis",
    "module": "research.clinical_research",
    "description": "Perform a quick comprehensive clinical trial analysis demonstration.\n\nArgs:\n    trial_type: Type of clinical trial\n    \nReturns:\n    Dictionary containing analysis results",
    "url": "functions.html#quick_clinical_analysis"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.clinical_research.__init__",
    "module": "research.clinical_research",
    "description": "Initialize regulatory compliance framework.\n\nArgs:\n    regulatory_region: Regulatory region ('fda', 'ema', 'ich')",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "stratify_patients",
    "full_name": "research.clinical_research.stratify_patients",
    "module": "research.clinical_research",
    "description": "Stratify patients into subgroups for clinical trials.\n\nArgs:\n    patient_data: DataFrame with patient characteristics\n    stratification_features: List of features to use for stratification\n    target",
    "url": "functions.html#stratify_patients"
  },
  {
    "type": "function",
    "name": "_supervised_stratification",
    "full_name": "research.clinical_research._supervised_stratification",
    "module": "research.clinical_research",
    "description": "Supervised patient stratification based on outcome.",
    "url": "functions.html#_supervised_stratification"
  },
  {
    "type": "function",
    "name": "_unsupervised_stratification",
    "full_name": "research.clinical_research._unsupervised_stratification",
    "module": "research.clinical_research",
    "description": "Unsupervised patient stratification based on features.",
    "url": "functions.html#_unsupervised_stratification"
  },
  {
    "type": "function",
    "name": "_assign_patients_to_strata",
    "full_name": "research.clinical_research._assign_patients_to_strata",
    "module": "research.clinical_research",
    "description": "Assign patients to strata based on trained models.",
    "url": "functions.html#_assign_patients_to_strata"
  },
  {
    "type": "function",
    "name": "_characterize_strata",
    "full_name": "research.clinical_research._characterize_strata",
    "module": "research.clinical_research",
    "description": "Characterize each patient stratum.",
    "url": "functions.html#_characterize_strata"
  },
  {
    "type": "function",
    "name": "_get_demographic_profile",
    "full_name": "research.clinical_research._get_demographic_profile",
    "module": "research.clinical_research",
    "description": "Get demographic profile of a patient stratum.",
    "url": "functions.html#_get_demographic_profile"
  },
  {
    "type": "function",
    "name": "_simple_stratification",
    "full_name": "research.clinical_research._simple_stratification",
    "module": "research.clinical_research",
    "description": "Simple stratification fallback when sklearn is not available.",
    "url": "functions.html#_simple_stratification"
  },
  {
    "type": "function",
    "name": "optimize_trial_design",
    "full_name": "research.clinical_research.optimize_trial_design",
    "module": "research.clinical_research",
    "description": "Optimize clinical trial design parameters.\n\nArgs:\n    primary_endpoint: Primary efficacy endpoint\n    patient_population: Expected patient population characteristics\n    effect_size: Expected treatmen",
    "url": "functions.html#optimize_trial_design"
  },
  {
    "type": "function",
    "name": "_calculate_sample_size",
    "full_name": "research.clinical_research._calculate_sample_size",
    "module": "research.clinical_research",
    "description": "Calculate required sample size for trial.",
    "url": "functions.html#_calculate_sample_size"
  },
  {
    "type": "function",
    "name": "_recommend_adaptive_features",
    "full_name": "research.clinical_research._recommend_adaptive_features",
    "module": "research.clinical_research",
    "description": "Recommend adaptive trial features.",
    "url": "functions.html#_recommend_adaptive_features"
  },
  {
    "type": "function",
    "name": "_optimize_endpoints",
    "full_name": "research.clinical_research._optimize_endpoints",
    "module": "research.clinical_research",
    "description": "Optimize trial endpoints.",
    "url": "functions.html#_optimize_endpoints"
  },
  {
    "type": "function",
    "name": "_calculate_design_quality",
    "full_name": "research.clinical_research._calculate_design_quality",
    "module": "research.clinical_research",
    "description": "Calculate overall design quality score.",
    "url": "functions.html#_calculate_design_quality"
  },
  {
    "type": "function",
    "name": "validate_ai_model",
    "full_name": "research.clinical_research.validate_ai_model",
    "module": "research.clinical_research",
    "description": "Validate AI model for regulatory compliance.\n\nArgs:\n    model: Trained AI model\n    validation_data: Independent validation dataset\n    model_purpose: Purpose of the model in clinical context\n    risk",
    "url": "functions.html#validate_ai_model"
  },
  {
    "type": "function",
    "name": "_perform_compliance_checks",
    "full_name": "research.clinical_research._perform_compliance_checks",
    "module": "research.clinical_research",
    "description": "Perform regulatory compliance checks.",
    "url": "functions.html#_perform_compliance_checks"
  },
  {
    "type": "function",
    "name": "_check_model_performance",
    "full_name": "research.clinical_research._check_model_performance",
    "module": "research.clinical_research",
    "description": "Check model performance for regulatory standards.",
    "url": "functions.html#_check_model_performance"
  },
  {
    "type": "function",
    "name": "_check_bias_fairness",
    "full_name": "research.clinical_research._check_bias_fairness",
    "module": "research.clinical_research",
    "description": "Check for bias and fairness in model predictions.",
    "url": "functions.html#_check_bias_fairness"
  },
  {
    "type": "function",
    "name": "_check_interpretability",
    "full_name": "research.clinical_research._check_interpretability",
    "module": "research.clinical_research",
    "description": "Check model interpretability requirements.",
    "url": "functions.html#_check_interpretability"
  },
  {
    "type": "function",
    "name": "_check_data_quality",
    "full_name": "research.clinical_research._check_data_quality",
    "module": "research.clinical_research",
    "description": "Check data quality and integrity.",
    "url": "functions.html#_check_data_quality"
  },
  {
    "type": "function",
    "name": "_check_robustness",
    "full_name": "research.clinical_research._check_robustness",
    "module": "research.clinical_research",
    "description": "Check model robustness and stability.",
    "url": "functions.html#_check_robustness"
  },
  {
    "type": "function",
    "name": "_generate_compliance_recommendations",
    "full_name": "research.clinical_research._generate_compliance_recommendations",
    "module": "research.clinical_research",
    "description": "Generate regulatory compliance recommendations.",
    "url": "functions.html#_generate_compliance_recommendations"
  },
  {
    "type": "function",
    "name": "_calculate_compliance_score",
    "full_name": "research.clinical_research._calculate_compliance_score",
    "module": "research.clinical_research",
    "description": "Calculate overall compliance score.",
    "url": "functions.html#_calculate_compliance_score"
  },
  {
    "type": "function",
    "name": "predict_admet_profile",
    "full_name": "research.drug_discovery.admet.predict_admet_profile",
    "module": "research.drug_discovery.admet",
    "description": "Convenience function to predict ADMET profile for molecules.\n\nArgs:\n    molecules: Single SMILES string or list of SMILES\n\nReturns:\n    DataFrame with ADMET predictions",
    "url": "functions.html#predict_admet_profile"
  },
  {
    "type": "function",
    "name": "evaluate_admet_predictions",
    "full_name": "research.drug_discovery.admet.evaluate_admet_predictions",
    "module": "research.drug_discovery.admet",
    "description": "Evaluate ADMET prediction performance.\n\nArgs:\n    y_true: True values\n    y_pred: Predicted values\n    prediction_type: 'classification' or 'regression'\n\nReturns:\n    Dictionary of evaluation metrics",
    "url": "functions.html#evaluate_admet_predictions"
  },
  {
    "type": "function",
    "name": "apply_admet_filters",
    "full_name": "research.drug_discovery.admet.apply_admet_filters",
    "module": "research.drug_discovery.admet",
    "description": "Apply ADMET-based filters to remove problematic molecules.\n\nArgs:\n    molecules_df: DataFrame with SMILES column\n    strict: Whether to apply strict filtering criteria\n\nReturns:\n    Filtered DataFrame",
    "url": "functions.html#apply_admet_filters"
  },
  {
    "type": "function",
    "name": "predict_admet_properties",
    "full_name": "research.drug_discovery.admet.predict_admet_properties",
    "module": "research.drug_discovery.admet",
    "description": "Predict ADMET properties for a list of SMILES.\n\nArgs:\n    smiles_list: List of SMILES strings\n\nReturns:\n    DataFrame with ADMET predictions",
    "url": "functions.html#predict_admet_properties"
  },
  {
    "type": "function",
    "name": "assess_drug_likeness",
    "full_name": "research.drug_discovery.admet.assess_drug_likeness",
    "module": "research.drug_discovery.admet",
    "description": "Assess drug-likeness using multiple filters.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Dictionary with filter results and overall score",
    "url": "functions.html#assess_drug_likeness"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.drug_discovery.admet.__init__",
    "module": "research.drug_discovery.admet",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "predict_absorption",
    "full_name": "research.drug_discovery.admet.predict_absorption",
    "module": "research.drug_discovery.admet",
    "description": "Predict absorption based on molecular properties.",
    "url": "functions.html#predict_absorption"
  },
  {
    "type": "function",
    "name": "predict_bioavailability",
    "full_name": "research.drug_discovery.admet.predict_bioavailability",
    "module": "research.drug_discovery.admet",
    "description": "Predict oral bioavailability.",
    "url": "functions.html#predict_bioavailability"
  },
  {
    "type": "function",
    "name": "predict_bbb_permeability",
    "full_name": "research.drug_discovery.admet.predict_bbb_permeability",
    "module": "research.drug_discovery.admet",
    "description": "Predict blood-brain barrier permeability.",
    "url": "functions.html#predict_bbb_permeability"
  },
  {
    "type": "function",
    "name": "predict_cyp_inhibition",
    "full_name": "research.drug_discovery.admet.predict_cyp_inhibition",
    "module": "research.drug_discovery.admet",
    "description": "Predict CYP enzyme inhibition.",
    "url": "functions.html#predict_cyp_inhibition"
  },
  {
    "type": "function",
    "name": "predict_hepatotoxicity",
    "full_name": "research.drug_discovery.admet.predict_hepatotoxicity",
    "module": "research.drug_discovery.admet",
    "description": "Predict hepatotoxicity risk.",
    "url": "functions.html#predict_hepatotoxicity"
  },
  {
    "type": "function",
    "name": "predict_mutagenicity",
    "full_name": "research.drug_discovery.admet.predict_mutagenicity",
    "module": "research.drug_discovery.admet",
    "description": "Predict mutagenicity using Ames test surrogates.",
    "url": "functions.html#predict_mutagenicity"
  },
  {
    "type": "function",
    "name": "calculate_drug_likeness_score",
    "full_name": "research.drug_discovery.admet.calculate_drug_likeness_score",
    "module": "research.drug_discovery.admet",
    "description": "Calculate overall drug-likeness score.",
    "url": "functions.html#calculate_drug_likeness_score"
  },
  {
    "type": "function",
    "name": "_assess_lipinski_filter",
    "full_name": "research.drug_discovery.admet._assess_lipinski_filter",
    "module": "research.drug_discovery.admet",
    "description": "Assess Lipinski's Rule of Five violations.",
    "url": "functions.html#_assess_lipinski_filter"
  },
  {
    "type": "function",
    "name": "_assess_ghose_filter",
    "full_name": "research.drug_discovery.admet._assess_ghose_filter",
    "module": "research.drug_discovery.admet",
    "description": "Assess Ghose filter violations.",
    "url": "functions.html#_assess_ghose_filter"
  },
  {
    "type": "function",
    "name": "_assess_veber_filter",
    "full_name": "research.drug_discovery.admet._assess_veber_filter",
    "module": "research.drug_discovery.admet",
    "description": "Assess Veber filter violations.",
    "url": "functions.html#_assess_veber_filter"
  },
  {
    "type": "function",
    "name": "_assess_egan_filter",
    "full_name": "research.drug_discovery.admet._assess_egan_filter",
    "module": "research.drug_discovery.admet",
    "description": "Assess Egan filter violations.",
    "url": "functions.html#_assess_egan_filter"
  },
  {
    "type": "function",
    "name": "_assess_muegge_filter",
    "full_name": "research.drug_discovery.admet._assess_muegge_filter",
    "module": "research.drug_discovery.admet",
    "description": "Assess Muegge filter violations.",
    "url": "functions.html#_assess_muegge_filter"
  },
  {
    "type": "function",
    "name": "_get_default_drug_likeness_result",
    "full_name": "research.drug_discovery.admet._get_default_drug_likeness_result",
    "module": "research.drug_discovery.admet",
    "description": "Get default drug-likeness result for error cases.",
    "url": "functions.html#_get_default_drug_likeness_result"
  },
  {
    "type": "function",
    "name": "predict_toxicity",
    "full_name": "research.drug_discovery.admet.predict_toxicity",
    "module": "research.drug_discovery.admet",
    "description": "Predict multiple toxicity endpoints.\n\nArgs:\n    smiles: SMILES string or list of SMILES strings\n\nReturns:\n    Dictionary with toxicity predictions or list of dictionaries",
    "url": "functions.html#predict_toxicity"
  },
  {
    "type": "function",
    "name": "_predict_single_toxicity",
    "full_name": "research.drug_discovery.admet._predict_single_toxicity",
    "module": "research.drug_discovery.admet",
    "description": "Predict toxicity for a single SMILES string.",
    "url": "functions.html#_predict_single_toxicity"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.drug_discovery.docking.__init__",
    "module": "research.drug_discovery.docking",
    "description": "Initialize SBDD optimizer.",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "analyze_structure",
    "full_name": "research.drug_discovery.docking.analyze_structure",
    "module": "research.drug_discovery.docking",
    "description": "Analyze protein structure for drug design potential.\n\nArgs:\n    pdb_id: Protein Data Bank identifier\n    include_druggability: Whether to assess druggability\n    include_binding_sites: Whether to iden",
    "url": "functions.html#analyze_structure"
  },
  {
    "type": "function",
    "name": "top_hits",
    "full_name": "research.drug_discovery.docking.top_hits",
    "module": "research.drug_discovery.docking",
    "description": "Get top n binding hits by affinity.",
    "url": "functions.html#top_hits"
  },
  {
    "type": "function",
    "name": "filter_by_affinity",
    "full_name": "research.drug_discovery.docking.filter_by_affinity",
    "module": "research.drug_discovery.docking",
    "description": "Filter results by binding affinity threshold.",
    "url": "functions.html#filter_by_affinity"
  },
  {
    "type": "function",
    "name": "average_affinity",
    "full_name": "research.drug_discovery.docking.average_affinity",
    "module": "research.drug_discovery.docking",
    "description": "Calculate average binding affinity.",
    "url": "functions.html#average_affinity"
  },
  {
    "type": "function",
    "name": "strong_binders",
    "full_name": "research.drug_discovery.docking.strong_binders",
    "module": "research.drug_discovery.docking",
    "description": "Get strong binding compounds (< -8.0 kcal/mol).",
    "url": "functions.html#strong_binders"
  },
  {
    "type": "function",
    "name": "dock_ligands",
    "full_name": "research.drug_discovery.docking.dock_ligands",
    "module": "research.drug_discovery.docking",
    "description": "Perform molecular docking simulation.\n\nArgs:\n    target: Target protein analysis\n    ligands: List of ligand SMILES\n    binding_site: Binding site specification\n    \nReturns:\n    Docking results for a",
    "url": "functions.html#dock_ligands"
  },
  {
    "type": "function",
    "name": "predict_sites",
    "full_name": "research.drug_discovery.docking.predict_sites",
    "module": "research.drug_discovery.docking",
    "description": "Predict binding sites in protein structure.\n\nArgs:\n    protein_structure: Protein structure data\n    \nReturns:\n    List of predicted binding sites",
    "url": "functions.html#predict_sites"
  },
  {
    "type": "function",
    "name": "best_improvement",
    "full_name": "research.drug_discovery.docking.best_improvement",
    "module": "research.drug_discovery.docking",
    "description": "Get best affinity improvement achieved.",
    "url": "functions.html#best_improvement"
  },
  {
    "type": "function",
    "name": "optimize_lead",
    "full_name": "research.drug_discovery.docking.optimize_lead",
    "module": "research.drug_discovery.docking",
    "description": "Optimize lead compound using structure-based methods.\n\nArgs:\n    lead_compound: SMILES of lead compound\n    target_structure: Target protein structure\n    optimization_strategy: Optimization approach\n",
    "url": "functions.html#optimize_lead"
  },
  {
    "type": "function",
    "name": "generate_molecular_structures",
    "full_name": "research.drug_discovery.generation.generate_molecular_structures",
    "module": "research.drug_discovery.generation",
    "description": "Generate new molecular structures using various approaches.\n\nArgs:\n    model: Generator model to use (creates default if None)\n    num_samples: Number of molecular structures to generate\n    generatio",
    "url": "functions.html#generate_molecular_structures"
  },
  {
    "type": "function",
    "name": "optimize_structure",
    "full_name": "research.drug_discovery.generation.optimize_structure",
    "module": "research.drug_discovery.generation",
    "description": "Optimize a molecular structure for specific properties.\n\nArgs:\n    structure: SMILES string of the structure to optimize\n    optimization_target: Target property for optimization\n\nReturns:\n    Optimiz",
    "url": "functions.html#optimize_structure"
  },
  {
    "type": "function",
    "name": "save_generated_structures",
    "full_name": "research.drug_discovery.generation.save_generated_structures",
    "module": "research.drug_discovery.generation",
    "description": "Save generated molecular structures to a file.\n\nArgs:\n    generated_structures: List of SMILES strings\n    file_path: Path to save the structures\n    format: File format (\"smi\", \"csv\", \"txt\")",
    "url": "functions.html#save_generated_structures"
  },
  {
    "type": "function",
    "name": "generate_diverse_library",
    "full_name": "research.drug_discovery.generation.generate_diverse_library",
    "module": "research.drug_discovery.generation",
    "description": "Generate a diverse molecular library based on seed molecules.\n\nArgs:\n    seed_molecules: List of seed SMILES\n    library_size: Target size of the library\n    diversity_threshold: Minimum diversity thr",
    "url": "functions.html#generate_diverse_library"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.drug_discovery.generation.__init__",
    "module": "research.drug_discovery.generation",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "generate_random_smiles",
    "full_name": "research.drug_discovery.generation.generate_random_smiles",
    "module": "research.drug_discovery.generation",
    "description": "Generate random valid SMILES strings.\n\nArgs:\n    num_molecules: Number of molecules to generate\n    max_atoms: Maximum number of atoms per molecule\n\nReturns:\n    List of generated SMILES strings",
    "url": "functions.html#generate_random_smiles"
  },
  {
    "type": "function",
    "name": "_modify_molecule",
    "full_name": "research.drug_discovery.generation._modify_molecule",
    "module": "research.drug_discovery.generation",
    "description": "Simple molecule modification by SMILES manipulation.",
    "url": "functions.html#_modify_molecule"
  },
  {
    "type": "function",
    "name": "_is_valid_drug_like",
    "full_name": "research.drug_discovery.generation._is_valid_drug_like",
    "module": "research.drug_discovery.generation",
    "description": "Check if molecule satisfies basic drug-likeness criteria.",
    "url": "functions.html#_is_valid_drug_like"
  },
  {
    "type": "function",
    "name": "generate_similar_molecules",
    "full_name": "research.drug_discovery.generation.generate_similar_molecules",
    "module": "research.drug_discovery.generation",
    "description": "Generate molecules similar to a reference structure.\n\nArgs:\n    reference_smiles: Reference SMILES string\n    num_molecules: Number of similar molecules to generate\n    similarity_threshold: Minimum s",
    "url": "functions.html#generate_similar_molecules"
  },
  {
    "type": "function",
    "name": "_generate_variation",
    "full_name": "research.drug_discovery.generation._generate_variation",
    "module": "research.drug_discovery.generation",
    "description": "Generate a variation of the input SMILES.",
    "url": "functions.html#_generate_variation"
  },
  {
    "type": "function",
    "name": "_add_methyl_group",
    "full_name": "research.drug_discovery.generation._add_methyl_group",
    "module": "research.drug_discovery.generation",
    "description": "Add a methyl group to a random carbon.",
    "url": "functions.html#_add_methyl_group"
  },
  {
    "type": "function",
    "name": "_add_fluorine",
    "full_name": "research.drug_discovery.generation._add_fluorine",
    "module": "research.drug_discovery.generation",
    "description": "Add fluorine substitution.",
    "url": "functions.html#_add_fluorine"
  },
  {
    "type": "function",
    "name": "_change_ring_size",
    "full_name": "research.drug_discovery.generation._change_ring_size",
    "module": "research.drug_discovery.generation",
    "description": "Attempt to change ring size.",
    "url": "functions.html#_change_ring_size"
  },
  {
    "type": "function",
    "name": "_add_hydroxyl_group",
    "full_name": "research.drug_discovery.generation._add_hydroxyl_group",
    "module": "research.drug_discovery.generation",
    "description": "Add hydroxyl group.",
    "url": "functions.html#_add_hydroxyl_group"
  },
  {
    "type": "function",
    "name": "_calculate_tanimoto_similarity",
    "full_name": "research.drug_discovery.generation._calculate_tanimoto_similarity",
    "module": "research.drug_discovery.generation",
    "description": "Calculate Tanimoto similarity between fingerprints.",
    "url": "functions.html#_calculate_tanimoto_similarity"
  },
  {
    "type": "function",
    "name": "_get_default_fragments",
    "full_name": "research.drug_discovery.generation._get_default_fragments",
    "module": "research.drug_discovery.generation",
    "description": "Get default drug-like fragments.",
    "url": "functions.html#_get_default_fragments"
  },
  {
    "type": "function",
    "name": "generate_from_fragments",
    "full_name": "research.drug_discovery.generation.generate_from_fragments",
    "module": "research.drug_discovery.generation",
    "description": "Generate molecules by combining fragments.\n\nArgs:\n    num_molecules: Number of molecules to generate\n\nReturns:\n    List of generated SMILES strings",
    "url": "functions.html#generate_from_fragments"
  },
  {
    "type": "function",
    "name": "optimize_molecule",
    "full_name": "research.drug_discovery.molecular_optimization.optimize_molecule",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Optimize a single molecule using specified method.\n\nArgs:\n    smiles: Input SMILES string\n    optimization_method: Method to use (\"bayesian\", \"genetic\", \"random\")\n    objective_function: Custom object",
    "url": "functions.html#optimize_molecule"
  },
  {
    "type": "function",
    "name": "_random_optimize_single",
    "full_name": "research.drug_discovery.molecular_optimization._random_optimize_single",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Simple random optimization for a single molecule.\n\nArgs:\n    smiles: Input SMILES string\n    objective_function: Custom objective function\n    num_iterations: Number of random iterations\n\nReturns:\n   ",
    "url": "functions.html#_random_optimize_single"
  },
  {
    "type": "function",
    "name": "batch_optimize",
    "full_name": "research.drug_discovery.molecular_optimization.batch_optimize",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Optimize a batch of molecules.\n\nArgs:\n    molecules: List of SMILES strings to optimize\n    optimization_method: Optimization method to use\n    objective_function: Custom objective function\n    num_it",
    "url": "functions.html#batch_optimize"
  },
  {
    "type": "function",
    "name": "_generate_similar_molecule",
    "full_name": "research.drug_discovery.molecular_optimization._generate_similar_molecule",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Generate a molecule similar to the input.",
    "url": "functions.html#_generate_similar_molecule"
  },
  {
    "type": "function",
    "name": "create_optimization_report",
    "full_name": "research.drug_discovery.molecular_optimization.create_optimization_report",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Create a comprehensive optimization report.\n\nArgs:\n    optimization_results: Results from optimization\n    output_file: Optional file to save report\n\nReturns:\n    Report dictionary",
    "url": "functions.html#create_optimization_report"
  },
  {
    "type": "function",
    "name": "calculate_optimization_metrics",
    "full_name": "research.drug_discovery.molecular_optimization.calculate_optimization_metrics",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Calculate comprehensive metrics for optimization performance.\n\nArgs:\n    optimization_results: Results from any optimization method\n\nReturns:\n    Dictionary of performance metrics",
    "url": "functions.html#calculate_optimization_metrics"
  },
  {
    "type": "function",
    "name": "compare_optimization_methods",
    "full_name": "research.drug_discovery.molecular_optimization.compare_optimization_methods",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Compare different optimization methods on the same molecular set.\n\nArgs:\n    molecules: List of molecules to optimize\n    methods: List of optimization methods to compare\n    num_iterations: Number of",
    "url": "functions.html#compare_optimization_methods"
  },
  {
    "type": "function",
    "name": "validate_optimization_results",
    "full_name": "research.drug_discovery.molecular_optimization.validate_optimization_results",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Validate the completeness and correctness of optimization results.\n\nArgs:\n    optimization_results: Results dictionary from optimization\n\nReturns:\n    Dictionary of validation checks",
    "url": "functions.html#validate_optimization_results"
  },
  {
    "type": "function",
    "name": "extract_optimization_insights",
    "full_name": "research.drug_discovery.molecular_optimization.extract_optimization_insights",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Extract insights and patterns from optimization results.\n\nArgs:\n    optimization_results: Results from optimization\n\nReturns:\n    Dictionary of insights and analysis",
    "url": "functions.html#extract_optimization_insights"
  },
  {
    "type": "function",
    "name": "save_optimization_checkpoint",
    "full_name": "research.drug_discovery.molecular_optimization.save_optimization_checkpoint",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Save optimization state for resuming later.\n\nArgs:\n    optimizer: MolecularOptimizer instance\n    filepath: Path to save checkpoint\n\nReturns:\n    True if successful, False otherwise",
    "url": "functions.html#save_optimization_checkpoint"
  },
  {
    "type": "function",
    "name": "load_optimization_checkpoint",
    "full_name": "research.drug_discovery.molecular_optimization.load_optimization_checkpoint",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Load optimization state from checkpoint.\n\nArgs:\n    filepath: Path to checkpoint file\n\nReturns:\n    Checkpoint data dictionary or None if failed",
    "url": "functions.html#load_optimization_checkpoint"
  },
  {
    "type": "function",
    "name": "generate_optimization_summary",
    "full_name": "research.drug_discovery.molecular_optimization.generate_optimization_summary",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Generate a human-readable summary of optimization results.\n\nArgs:\n    results: Single optimization result or list of results\n\nReturns:\n    Formatted summary string",
    "url": "functions.html#generate_optimization_summary"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.drug_discovery.molecular_optimization.__init__",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Initialize genetic algorithm optimizer.\n\nArgs:\n    objective_function: Objective function to optimize\n    population_size: Size of population\n    mutation_rate: Probability of mutation\n    crossover_r",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "_default_objective",
    "full_name": "research.drug_discovery.molecular_optimization._default_objective",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Default objective function - optimize for drug-likeness.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Drug-likeness score (0-1)",
    "url": "functions.html#_default_objective"
  },
  {
    "type": "function",
    "name": "optimize",
    "full_name": "research.drug_discovery.molecular_optimization.optimize",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Perform genetic algorithm optimization.\n\nArgs:\n    initial_molecules: Initial population\n    num_iterations: Number of generations\n\nReturns:\n    Optimization results",
    "url": "functions.html#optimize"
  },
  {
    "type": "function",
    "name": "_molecular_to_features",
    "full_name": "research.drug_discovery.molecular_optimization._molecular_to_features",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Convert SMILES to feature vector for Gaussian Process.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Feature vector",
    "url": "functions.html#_molecular_to_features"
  },
  {
    "type": "function",
    "name": "_acquisition_function",
    "full_name": "research.drug_discovery.molecular_optimization._acquisition_function",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Upper confidence bound acquisition function.\n\nArgs:\n    features: Molecular features\n\nReturns:\n    Acquisition score",
    "url": "functions.html#_acquisition_function"
  },
  {
    "type": "function",
    "name": "_random_optimization",
    "full_name": "research.drug_discovery.molecular_optimization._random_optimization",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Fallback random optimization when sklearn is not available.",
    "url": "functions.html#_random_optimization"
  },
  {
    "type": "function",
    "name": "_generate_candidates",
    "full_name": "research.drug_discovery.molecular_optimization._generate_candidates",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Generate candidate molecules for optimization.",
    "url": "functions.html#_generate_candidates"
  },
  {
    "type": "function",
    "name": "_simple_mutation",
    "full_name": "research.drug_discovery.molecular_optimization._simple_mutation",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Apply simple mutation to a SMILES string.",
    "url": "functions.html#_simple_mutation"
  },
  {
    "type": "function",
    "name": "_tournament_selection",
    "full_name": "research.drug_discovery.molecular_optimization._tournament_selection",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Tournament selection for genetic algorithm.",
    "url": "functions.html#_tournament_selection"
  },
  {
    "type": "function",
    "name": "_crossover",
    "full_name": "research.drug_discovery.molecular_optimization._crossover",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Simple crossover operation for SMILES strings.",
    "url": "functions.html#_crossover"
  },
  {
    "type": "function",
    "name": "_mutate",
    "full_name": "research.drug_discovery.molecular_optimization._mutate",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Simple mutation operation for SMILES strings.",
    "url": "functions.html#_mutate"
  },
  {
    "type": "function",
    "name": "optimize_molecule",
    "full_name": "research.drug_discovery.optimization.optimize_molecule",
    "module": "research.drug_discovery.optimization",
    "description": "Optimize a single molecule using specified method.\n\nArgs:\n    smiles: Input SMILES string\n    optimization_method: Method to use (\"bayesian\", \"genetic\", \"random\")\n    objective_function: Custom object",
    "url": "functions.html#optimize_molecule"
  },
  {
    "type": "function",
    "name": "_random_optimize_single",
    "full_name": "research.drug_discovery.optimization._random_optimize_single",
    "module": "research.drug_discovery.optimization",
    "description": "Random optimization for a single molecule.",
    "url": "functions.html#_random_optimize_single"
  },
  {
    "type": "function",
    "name": "_generate_similar_molecule",
    "full_name": "research.drug_discovery.optimization._generate_similar_molecule",
    "module": "research.drug_discovery.optimization",
    "description": "Generate a molecule similar to the input SMILES.\n\nArgs:\n    smiles: Input SMILES string\n\nReturns:\n    Similar SMILES string or None if generation fails",
    "url": "functions.html#_generate_similar_molecule"
  },
  {
    "type": "function",
    "name": "batch_optimize",
    "full_name": "research.drug_discovery.optimization.batch_optimize",
    "module": "research.drug_discovery.optimization",
    "description": "Optimize a batch of molecules.\n\nArgs:\n    molecules: List of SMILES strings\n    optimization_method: Optimization method to use\n    objective_function: Custom objective function\n    num_iterations: Nu",
    "url": "functions.html#batch_optimize"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.drug_discovery.optimization.__init__",
    "module": "research.drug_discovery.optimization",
    "description": "Initialize genetic algorithm optimizer.\n\nArgs:\n    objective_function: Objective function to optimize\n    population_size: Size of population\n    mutation_rate: Probability of mutation\n    crossover_r",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "_default_objective",
    "full_name": "research.drug_discovery.optimization._default_objective",
    "module": "research.drug_discovery.optimization",
    "description": "Default objective function - optimize for drug-likeness.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Drug-likeness score (0-1)",
    "url": "functions.html#_default_objective"
  },
  {
    "type": "function",
    "name": "optimize",
    "full_name": "research.drug_discovery.optimization.optimize",
    "module": "research.drug_discovery.optimization",
    "description": "Perform genetic algorithm optimization.\n\nArgs:\n    initial_molecules: Initial population\n    num_iterations: Number of generations\n\nReturns:\n    Optimization results",
    "url": "functions.html#optimize"
  },
  {
    "type": "function",
    "name": "_molecular_to_features",
    "full_name": "research.drug_discovery.optimization._molecular_to_features",
    "module": "research.drug_discovery.optimization",
    "description": "Convert SMILES to feature vector for Gaussian Process.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Feature vector",
    "url": "functions.html#_molecular_to_features"
  },
  {
    "type": "function",
    "name": "_acquisition_function",
    "full_name": "research.drug_discovery.optimization._acquisition_function",
    "module": "research.drug_discovery.optimization",
    "description": "Upper confidence bound acquisition function.\n\nArgs:\n    features: Molecular features\n\nReturns:\n    Acquisition score",
    "url": "functions.html#_acquisition_function"
  },
  {
    "type": "function",
    "name": "_random_optimization",
    "full_name": "research.drug_discovery.optimization._random_optimization",
    "module": "research.drug_discovery.optimization",
    "description": "Fallback random optimization when sklearn is not available.",
    "url": "functions.html#_random_optimization"
  },
  {
    "type": "function",
    "name": "_generate_candidates",
    "full_name": "research.drug_discovery.optimization._generate_candidates",
    "module": "research.drug_discovery.optimization",
    "description": "Generate candidate molecules for optimization.",
    "url": "functions.html#_generate_candidates"
  },
  {
    "type": "function",
    "name": "_simple_mutation",
    "full_name": "research.drug_discovery.optimization._simple_mutation",
    "module": "research.drug_discovery.optimization",
    "description": "Apply simple mutation to a SMILES string.",
    "url": "functions.html#_simple_mutation"
  },
  {
    "type": "function",
    "name": "_tournament_selection",
    "full_name": "research.drug_discovery.optimization._tournament_selection",
    "module": "research.drug_discovery.optimization",
    "description": "Tournament selection for genetic algorithm.",
    "url": "functions.html#_tournament_selection"
  },
  {
    "type": "function",
    "name": "_crossover",
    "full_name": "research.drug_discovery.optimization._crossover",
    "module": "research.drug_discovery.optimization",
    "description": "Simple crossover operation for SMILES strings.",
    "url": "functions.html#_crossover"
  },
  {
    "type": "function",
    "name": "_mutate",
    "full_name": "research.drug_discovery.optimization._mutate",
    "module": "research.drug_discovery.optimization",
    "description": "Simple mutation operation for SMILES strings.",
    "url": "functions.html#_mutate"
  },
  {
    "type": "function",
    "name": "predict_properties",
    "full_name": "research.drug_discovery.properties.predict_properties",
    "module": "research.drug_discovery.properties",
    "description": "Predict molecular properties for a dataset.\n\nArgs:\n    molecular_data: DataFrame containing SMILES or list of SMILES strings\n    model: Trained property predictor (optional, creates new if None)\n    s",
    "url": "functions.html#predict_properties"
  },
  {
    "type": "function",
    "name": "preprocess_data",
    "full_name": "research.drug_discovery.properties.preprocess_data",
    "module": "research.drug_discovery.properties",
    "description": "Preprocess molecular data for property prediction.\n\nArgs:\n    molecular_data: DataFrame with molecular data\n\nReturns:\n    Preprocessed DataFrame",
    "url": "functions.html#preprocess_data"
  },
  {
    "type": "function",
    "name": "handle_missing_values",
    "full_name": "research.drug_discovery.properties.handle_missing_values",
    "module": "research.drug_discovery.properties",
    "description": "Handle missing values in molecular data.\n\nArgs:\n    data: DataFrame with potential missing values\n\nReturns:\n    DataFrame with missing values handled",
    "url": "functions.html#handle_missing_values"
  },
  {
    "type": "function",
    "name": "normalize_data",
    "full_name": "research.drug_discovery.properties.normalize_data",
    "module": "research.drug_discovery.properties",
    "description": "Normalize numeric data for better model performance.\n\nArgs:\n    data: DataFrame to normalize\n\nReturns:\n    Normalized DataFrame",
    "url": "functions.html#normalize_data"
  },
  {
    "type": "function",
    "name": "evaluate_model",
    "full_name": "research.drug_discovery.properties.evaluate_model",
    "module": "research.drug_discovery.properties",
    "description": "Evaluate model performance with multiple metrics.\n\nArgs:\n    predictions: Predicted values\n    true_values: True values\n\nReturns:\n    Dictionary of evaluation metrics",
    "url": "functions.html#evaluate_model"
  },
  {
    "type": "function",
    "name": "calculate_metrics",
    "full_name": "research.drug_discovery.properties.calculate_metrics",
    "module": "research.drug_discovery.properties",
    "description": "Calculate basic evaluation metrics.\n\nArgs:\n    predictions: Predicted values\n    true_values: True values\n\nReturns:\n    Dictionary with MAE and RMSE",
    "url": "functions.html#calculate_metrics"
  },
  {
    "type": "function",
    "name": "train_property_model",
    "full_name": "research.drug_discovery.properties.train_property_model",
    "module": "research.drug_discovery.properties",
    "description": "Train a model for predicting a specific molecular property.\n\nArgs:\n    training_data: DataFrame with SMILES and target values\n    property_name: Name of the property to predict\n    smiles_column: Name",
    "url": "functions.html#train_property_model"
  },
  {
    "type": "function",
    "name": "evaluate_property_predictions",
    "full_name": "research.drug_discovery.properties.evaluate_property_predictions",
    "module": "research.drug_discovery.properties",
    "description": "Evaluate property prediction performance.\n\nArgs:\n    y_true: True values\n    y_pred: Predicted values\n    task_type: Type of task ('regression' or 'classification')\n\nReturns:\n    Dictionary of evaluat",
    "url": "functions.html#evaluate_property_predictions"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.drug_discovery.properties.__init__",
    "module": "research.drug_discovery.properties",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "calculate_molecular_descriptors",
    "full_name": "research.drug_discovery.properties.calculate_molecular_descriptors",
    "module": "research.drug_discovery.properties",
    "description": "Calculate molecular descriptors for property prediction.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Dictionary of calculated descriptors",
    "url": "functions.html#calculate_molecular_descriptors"
  },
  {
    "type": "function",
    "name": "predict_physicochemical_properties",
    "full_name": "research.drug_discovery.properties.predict_physicochemical_properties",
    "module": "research.drug_discovery.properties",
    "description": "Predict basic physicochemical properties.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Dictionary with predicted properties",
    "url": "functions.html#predict_physicochemical_properties"
  },
  {
    "type": "function",
    "name": "predict_property",
    "full_name": "research.drug_discovery.properties.predict_property",
    "module": "research.drug_discovery.properties",
    "description": "Predict a specific property for given SMILES.\n\nArgs:\n    smiles: Single SMILES string or list of SMILES\n    property_name: Name of the property to predict\n\nReturns:\n    Predicted value(s)",
    "url": "functions.html#predict_property"
  },
  {
    "type": "function",
    "name": "predict_multiple_properties",
    "full_name": "research.drug_discovery.properties.predict_multiple_properties",
    "module": "research.drug_discovery.properties",
    "description": "Predict multiple properties for a list of SMILES.\n\nArgs:\n    smiles_list: List of SMILES strings\n\nReturns:\n    DataFrame with predictions for all trained properties",
    "url": "functions.html#predict_multiple_properties"
  },
  {
    "type": "function",
    "name": "predict",
    "full_name": "research.drug_discovery.properties.predict",
    "module": "research.drug_discovery.properties",
    "description": "Make predictions using the trained model.",
    "url": "functions.html#predict"
  },
  {
    "type": "function",
    "name": "get_metrics",
    "full_name": "research.drug_discovery.properties.get_metrics",
    "module": "research.drug_discovery.properties",
    "description": "Get training metrics.",
    "url": "functions.html#get_metrics"
  },
  {
    "type": "function",
    "name": "build_qsar_dataset",
    "full_name": "research.drug_discovery.qsar.build_qsar_dataset",
    "module": "research.drug_discovery.qsar",
    "description": "Build QSAR dataset from SMILES and activity data\n\nArgs:\n    smiles_data: DataFrame containing SMILES and activity data\n    smiles_column: Name of SMILES column\n    activity_column: Name of activity co",
    "url": "functions.html#build_qsar_dataset"
  },
  {
    "type": "function",
    "name": "evaluate_qsar_model",
    "full_name": "research.drug_discovery.qsar.evaluate_qsar_model",
    "module": "research.drug_discovery.qsar",
    "description": "Comprehensive evaluation of QSAR model\n\nArgs:\n    model: Trained QSAR model\n    X_test: Test features\n    y_test: Test labels\n\nReturns:\n    Dictionary of evaluation metrics",
    "url": "functions.html#evaluate_qsar_model"
  },
  {
    "type": "function",
    "name": "build_qsar_model",
    "full_name": "research.drug_discovery.qsar.build_qsar_model",
    "module": "research.drug_discovery.qsar",
    "description": "Build a QSAR model from feature matrix and target values.\n\nArgs:\n    X: Feature matrix\n    y: Target values\n    model_type: Type of model ('random_forest', 'linear', 'svm', 'neural_network')\n    task_",
    "url": "functions.html#build_qsar_model"
  },
  {
    "type": "function",
    "name": "predict_activity",
    "full_name": "research.drug_discovery.qsar.predict_activity",
    "module": "research.drug_discovery.qsar",
    "description": "Predict activity for list of SMILES",
    "url": "functions.html#predict_activity"
  },
  {
    "type": "function",
    "name": "validate_qsar_model",
    "full_name": "research.drug_discovery.qsar.validate_qsar_model",
    "module": "research.drug_discovery.qsar",
    "description": "Validate a QSAR model on validation data.\n\nArgs:\n    model: TrainedQSARModel object or model dictionary\n    X_val: Validation feature matrix\n    y_val: Validation target values\n    cv_folds: Number of",
    "url": "functions.html#validate_qsar_model"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.drug_discovery.qsar.__init__",
    "module": "research.drug_discovery.qsar",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "calculate_rdkit_descriptors",
    "full_name": "research.drug_discovery.qsar.calculate_rdkit_descriptors",
    "module": "research.drug_discovery.qsar",
    "description": "Calculate RDKit molecular descriptors",
    "url": "functions.html#calculate_rdkit_descriptors"
  },
  {
    "type": "function",
    "name": "calculate_mordred_descriptors",
    "full_name": "research.drug_discovery.qsar.calculate_mordred_descriptors",
    "module": "research.drug_discovery.qsar",
    "description": "Calculate Mordred molecular descriptors",
    "url": "functions.html#calculate_mordred_descriptors"
  },
  {
    "type": "function",
    "name": "calculate_fingerprint_descriptors",
    "full_name": "research.drug_discovery.qsar.calculate_fingerprint_descriptors",
    "module": "research.drug_discovery.qsar",
    "description": "Calculate molecular fingerprints as descriptors",
    "url": "functions.html#calculate_fingerprint_descriptors"
  },
  {
    "type": "function",
    "name": "calculate_descriptors_from_smiles",
    "full_name": "research.drug_discovery.qsar.calculate_descriptors_from_smiles",
    "module": "research.drug_discovery.qsar",
    "description": "Calculate descriptors for list of SMILES",
    "url": "functions.html#calculate_descriptors_from_smiles"
  },
  {
    "type": "function",
    "name": "_initialize_model",
    "full_name": "research.drug_discovery.qsar._initialize_model",
    "module": "research.drug_discovery.qsar",
    "description": "Initialize the appropriate model",
    "url": "functions.html#_initialize_model"
  },
  {
    "type": "function",
    "name": "prepare_data",
    "full_name": "research.drug_discovery.qsar.prepare_data",
    "module": "research.drug_discovery.qsar",
    "description": "Prepare data for modeling",
    "url": "functions.html#prepare_data"
  },
  {
    "type": "function",
    "name": "train",
    "full_name": "research.drug_discovery.qsar.train",
    "module": "research.drug_discovery.qsar",
    "description": "Train QSAR model",
    "url": "functions.html#train"
  },
  {
    "type": "function",
    "name": "predict",
    "full_name": "research.drug_discovery.qsar.predict",
    "module": "research.drug_discovery.qsar",
    "description": "Make predictions using the trained model.",
    "url": "functions.html#predict"
  },
  {
    "type": "function",
    "name": "get_feature_importance",
    "full_name": "research.drug_discovery.qsar.get_feature_importance",
    "module": "research.drug_discovery.qsar",
    "description": "Get feature importance if available",
    "url": "functions.html#get_feature_importance"
  },
  {
    "type": "function",
    "name": "save_model",
    "full_name": "research.drug_discovery.qsar.save_model",
    "module": "research.drug_discovery.qsar",
    "description": "Save trained model",
    "url": "functions.html#save_model"
  },
  {
    "type": "function",
    "name": "load_model",
    "full_name": "research.drug_discovery.qsar.load_model",
    "module": "research.drug_discovery.qsar",
    "description": "Load trained model",
    "url": "functions.html#load_model"
  },
  {
    "type": "function",
    "name": "add_model",
    "full_name": "research.drug_discovery.qsar.add_model",
    "module": "research.drug_discovery.qsar",
    "description": "Add a trained QSAR model for specific activity",
    "url": "functions.html#add_model"
  },
  {
    "type": "function",
    "name": "predict_multiple_activities",
    "full_name": "research.drug_discovery.qsar.predict_multiple_activities",
    "module": "research.drug_discovery.qsar",
    "description": "Predict multiple activities for SMILES list",
    "url": "functions.html#predict_multiple_activities"
  },
  {
    "type": "function",
    "name": "get_metrics",
    "full_name": "research.drug_discovery.qsar.get_metrics",
    "module": "research.drug_discovery.qsar",
    "description": "Get training metrics.",
    "url": "functions.html#get_metrics"
  },
  {
    "type": "function",
    "name": "perform_virtual_screening",
    "full_name": "research.drug_discovery.screening.perform_virtual_screening",
    "module": "research.drug_discovery.screening",
    "description": "Convenience function to perform virtual screening.\n\nArgs:\n    reference_smiles: Reference compound SMILES\n    library_smiles: Library compound SMILES to screen\n    method: Screening method ('similarit",
    "url": "functions.html#perform_virtual_screening"
  },
  {
    "type": "function",
    "name": "calculate_screening_metrics",
    "full_name": "research.drug_discovery.screening.calculate_screening_metrics",
    "module": "research.drug_discovery.screening",
    "description": "Calculate screening performance metrics.\n\nArgs:\n    results: Screening results DataFrame\n    known_actives: List of known active compound SMILES\n\nReturns:\n    Dictionary with performance metrics",
    "url": "functions.html#calculate_screening_metrics"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.drug_discovery.screening.__init__",
    "module": "research.drug_discovery.screening",
    "description": "Initialize pharmacophore screener.\n\nArgs:\n    pharmacophore_features: List of pharmacophore features to match",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "set_reference_compounds",
    "full_name": "research.drug_discovery.screening.set_reference_compounds",
    "module": "research.drug_discovery.screening",
    "description": "Set reference compounds for pharmacophore generation.",
    "url": "functions.html#set_reference_compounds"
  },
  {
    "type": "function",
    "name": "screen_library",
    "full_name": "research.drug_discovery.screening.screen_library",
    "module": "research.drug_discovery.screening",
    "description": "Screen library using pharmacophore-based filtering.",
    "url": "functions.html#screen_library"
  },
  {
    "type": "function",
    "name": "get_top_hits",
    "full_name": "research.drug_discovery.screening.get_top_hits",
    "module": "research.drug_discovery.screening",
    "description": "Get top N hits from screening results.\n\nArgs:\n    n: Number of top hits to return\n\nReturns:\n    DataFrame with top hits",
    "url": "functions.html#get_top_hits"
  },
  {
    "type": "function",
    "name": "calculate_enrichment_factor",
    "full_name": "research.drug_discovery.screening.calculate_enrichment_factor",
    "module": "research.drug_discovery.screening",
    "description": "Calculate enrichment factor for screening validation.\n\nArgs:\n    known_actives: List of known active compound SMILES\n    fraction: Fraction of top compounds to consider\n\nReturns:\n    Enrichment factor",
    "url": "functions.html#calculate_enrichment_factor"
  },
  {
    "type": "function",
    "name": "_calculate_fingerprint",
    "full_name": "research.drug_discovery.screening._calculate_fingerprint",
    "module": "research.drug_discovery.screening",
    "description": "Calculate molecular fingerprint.",
    "url": "functions.html#_calculate_fingerprint"
  },
  {
    "type": "function",
    "name": "_calculate_similarity",
    "full_name": "research.drug_discovery.screening._calculate_similarity",
    "module": "research.drug_discovery.screening",
    "description": "Calculate similarity between two fingerprints.",
    "url": "functions.html#_calculate_similarity"
  },
  {
    "type": "function",
    "name": "_calculate_pharmacophore_score",
    "full_name": "research.drug_discovery.screening._calculate_pharmacophore_score",
    "module": "research.drug_discovery.screening",
    "description": "Calculate pharmacophore matching score.\n\nThis is a simplified implementation that counts basic molecular features.\nA full implementation would use sophisticated pharmacophore matching algorithms.",
    "url": "functions.html#_calculate_pharmacophore_score"
  },
  {
    "type": "function",
    "name": "_show_deprecation_warning",
    "full_name": "research.drug_discovery_legacy._show_deprecation_warning",
    "module": "research.drug_discovery_legacy",
    "description": "Show deprecation warning for direct import of this module.",
    "url": "functions.html#_show_deprecation_warning"
  },
  {
    "type": "function",
    "name": "quick_environmental_analysis",
    "full_name": "research.environmental_chemistry.quick_environmental_analysis",
    "module": "research.environmental_chemistry",
    "description": "Perform a quick environmental analysis demonstration.\n\nArgs:\n    monitoring_type: Type of environmental monitoring\n    \nReturns:\n    Dictionary containing analysis results",
    "url": "functions.html#quick_environmental_analysis"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.environmental_chemistry.__init__",
    "module": "research.environmental_chemistry",
    "description": "Initialize the atmospheric chemistry analyzer.",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "_get_default_parameters",
    "full_name": "research.environmental_chemistry._get_default_parameters",
    "module": "research.environmental_chemistry",
    "description": "Get default environmental parameters for different monitoring types.",
    "url": "functions.html#_get_default_parameters"
  },
  {
    "type": "function",
    "name": "generate_sample_data",
    "full_name": "research.environmental_chemistry.generate_sample_data",
    "module": "research.environmental_chemistry",
    "description": "Generate synthetic environmental data for demonstration.",
    "url": "functions.html#generate_sample_data"
  },
  {
    "type": "function",
    "name": "train_pollution_predictor",
    "full_name": "research.environmental_chemistry.train_pollution_predictor",
    "module": "research.environmental_chemistry",
    "description": "Train AI model to predict pollution levels.",
    "url": "functions.html#train_pollution_predictor"
  },
  {
    "type": "function",
    "name": "predict_pollution",
    "full_name": "research.environmental_chemistry.predict_pollution",
    "module": "research.environmental_chemistry",
    "description": "Predict pollution levels for new environmental data.",
    "url": "functions.html#predict_pollution"
  },
  {
    "type": "function",
    "name": "get_feature_importance",
    "full_name": "research.environmental_chemistry.get_feature_importance",
    "module": "research.environmental_chemistry",
    "description": "Get feature importance for pollution prediction.",
    "url": "functions.html#get_feature_importance"
  },
  {
    "type": "function",
    "name": "generate_reaction_data",
    "full_name": "research.environmental_chemistry.generate_reaction_data",
    "module": "research.environmental_chemistry",
    "description": "Generate synthetic reaction data for optimization.",
    "url": "functions.html#generate_reaction_data"
  },
  {
    "type": "function",
    "name": "optimize_reaction_conditions",
    "full_name": "research.environmental_chemistry.optimize_reaction_conditions",
    "module": "research.environmental_chemistry",
    "description": "Optimize reaction conditions for maximum green score.",
    "url": "functions.html#optimize_reaction_conditions"
  },
  {
    "type": "function",
    "name": "predict_green_metrics",
    "full_name": "research.environmental_chemistry.predict_green_metrics",
    "module": "research.environmental_chemistry",
    "description": "Predict green chemistry metrics for given reaction conditions.",
    "url": "functions.html#predict_green_metrics"
  },
  {
    "type": "function",
    "name": "generate_atmospheric_data",
    "full_name": "research.environmental_chemistry.generate_atmospheric_data",
    "module": "research.environmental_chemistry",
    "description": "Generate synthetic atmospheric chemistry time series data.",
    "url": "functions.html#generate_atmospheric_data"
  },
  {
    "type": "function",
    "name": "analyze_atmospheric_trends",
    "full_name": "research.environmental_chemistry.analyze_atmospheric_trends",
    "module": "research.environmental_chemistry",
    "description": "Analyze long-term trends in atmospheric chemistry data.",
    "url": "functions.html#analyze_atmospheric_trends"
  },
  {
    "type": "function",
    "name": "forecast_air_quality",
    "full_name": "research.environmental_chemistry.forecast_air_quality",
    "module": "research.environmental_chemistry",
    "description": "Forecast air quality using machine learning.",
    "url": "functions.html#forecast_air_quality"
  },
  {
    "type": "function",
    "name": "calculate_molecular_properties",
    "full_name": "research.generative.calculate_molecular_properties",
    "module": "research.generative",
    "description": "Calculate molecular properties for a SMILES string.\n\nArgs:\n    smiles: SMILES string\n\nReturns:\n    Dictionary of properties",
    "url": "functions.html#calculate_molecular_properties"
  },
  {
    "type": "function",
    "name": "validate_generated_molecules",
    "full_name": "research.generative.validate_generated_molecules",
    "module": "research.generative",
    "description": "Validate generated molecules and calculate statistics.\n\nArgs:\n    smiles_list: List of generated SMILES\n\nReturns:\n    Dictionary with validation statistics",
    "url": "functions.html#validate_generated_molecules"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.generative.__init__",
    "module": "research.generative",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "optimize",
    "full_name": "research.generative.optimize",
    "module": "research.generative",
    "description": "Optimize molecules for target properties.\n\nArgs:\n    target_properties: Dictionary of property_name -> target_value\n    num_iterations: Number of optimization iterations\n    batch_size: Batch size for",
    "url": "functions.html#optimize"
  },
  {
    "type": "function",
    "name": "_decode_molecules",
    "full_name": "research.generative._decode_molecules",
    "module": "research.generative",
    "description": "Decode token tensors to SMILES strings.",
    "url": "functions.html#_decode_molecules"
  },
  {
    "type": "function",
    "name": "_evaluate_molecules",
    "full_name": "research.generative._evaluate_molecules",
    "module": "research.generative",
    "description": "Evaluate molecules against target properties.",
    "url": "functions.html#_evaluate_molecules"
  },
  {
    "type": "function",
    "name": "_build_vocabulary",
    "full_name": "research.generative._build_vocabulary",
    "module": "research.generative",
    "description": "Build character-level vocabulary from SMILES.",
    "url": "functions.html#_build_vocabulary"
  },
  {
    "type": "function",
    "name": "encode_smiles",
    "full_name": "research.generative.encode_smiles",
    "module": "research.generative",
    "description": "Encode SMILES string to token indices.",
    "url": "functions.html#encode_smiles"
  },
  {
    "type": "function",
    "name": "decode_tokens",
    "full_name": "research.generative.decode_tokens",
    "module": "research.generative",
    "description": "Decode token indices back to SMILES.",
    "url": "functions.html#decode_tokens"
  },
  {
    "type": "function",
    "name": "__len__",
    "full_name": "research.generative.__len__",
    "module": "research.generative",
    "description": "",
    "url": "functions.html#__len__"
  },
  {
    "type": "function",
    "name": "__getitem__",
    "full_name": "research.generative.__getitem__",
    "module": "research.generative",
    "description": "",
    "url": "functions.html#__getitem__"
  },
  {
    "type": "function",
    "name": "encode",
    "full_name": "research.generative.encode",
    "module": "research.generative",
    "description": "Encode SMILES and properties to latent space.",
    "url": "functions.html#encode"
  },
  {
    "type": "function",
    "name": "reparameterize",
    "full_name": "research.generative.reparameterize",
    "module": "research.generative",
    "description": "Reparameterization trick for VAE.",
    "url": "functions.html#reparameterize"
  },
  {
    "type": "function",
    "name": "decode",
    "full_name": "research.generative.decode",
    "module": "research.generative",
    "description": "Decode latent vector and properties to SMILES.",
    "url": "functions.html#decode"
  },
  {
    "type": "function",
    "name": "forward",
    "full_name": "research.generative.forward",
    "module": "research.generative",
    "description": "",
    "url": "functions.html#forward"
  },
  {
    "type": "function",
    "name": "generate",
    "full_name": "research.generative.generate",
    "module": "research.generative",
    "description": "Generate molecules using trained generator.",
    "url": "functions.html#generate"
  },
  {
    "type": "function",
    "name": "generate_with_properties",
    "full_name": "research.generative.generate_with_properties",
    "module": "research.generative",
    "description": "Generate molecules with target properties.",
    "url": "functions.html#generate_with_properties"
  },
  {
    "type": "function",
    "name": "_build_generator",
    "full_name": "research.generative._build_generator",
    "module": "research.generative",
    "description": "Build generator network.",
    "url": "functions.html#_build_generator"
  },
  {
    "type": "function",
    "name": "_build_discriminator",
    "full_name": "research.generative._build_discriminator",
    "module": "research.generative",
    "description": "Build discriminator network.",
    "url": "functions.html#_build_discriminator"
  },
  {
    "type": "function",
    "name": "comprehensive_materials_discovery",
    "full_name": "research.materials_discovery.comprehensive_materials_discovery",
    "module": "research.materials_discovery",
    "description": "Perform comprehensive materials discovery analysis.\n\nArgs:\n    target_properties: Target properties for inverse design\n    \nReturns:\n    Dictionary containing all analysis results",
    "url": "functions.html#comprehensive_materials_discovery"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.materials_discovery.__init__",
    "module": "research.materials_discovery",
    "description": "Initialize materials cluster analyzer.\n\nArgs:\n    n_clusters: Number of materials clusters to identify",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "_get_feature_names",
    "full_name": "research.materials_discovery._get_feature_names",
    "module": "research.materials_discovery",
    "description": "Get feature names for materials descriptors.",
    "url": "functions.html#_get_feature_names"
  },
  {
    "type": "function",
    "name": "_get_target_properties",
    "full_name": "research.materials_discovery._get_target_properties",
    "module": "research.materials_discovery",
    "description": "Get target properties based on property type.",
    "url": "functions.html#_get_target_properties"
  },
  {
    "type": "function",
    "name": "generate_materials_data",
    "full_name": "research.materials_discovery.generate_materials_data",
    "module": "research.materials_discovery",
    "description": "Generate synthetic materials data for demonstration.",
    "url": "functions.html#generate_materials_data"
  },
  {
    "type": "function",
    "name": "train_property_models",
    "full_name": "research.materials_discovery.train_property_models",
    "module": "research.materials_discovery",
    "description": "Train ML models to predict materials properties.",
    "url": "functions.html#train_property_models"
  },
  {
    "type": "function",
    "name": "predict_properties",
    "full_name": "research.materials_discovery.predict_properties",
    "module": "research.materials_discovery",
    "description": "Predict properties for new materials.",
    "url": "functions.html#predict_properties"
  },
  {
    "type": "function",
    "name": "get_feature_importance",
    "full_name": "research.materials_discovery.get_feature_importance",
    "module": "research.materials_discovery",
    "description": "Get feature importance for a specific property.",
    "url": "functions.html#get_feature_importance"
  },
  {
    "type": "function",
    "name": "_define_design_space",
    "full_name": "research.materials_discovery._define_design_space",
    "module": "research.materials_discovery",
    "description": "Define the materials design space with parameter bounds.",
    "url": "functions.html#_define_design_space"
  },
  {
    "type": "function",
    "name": "generate_candidate_materials",
    "full_name": "research.materials_discovery.generate_candidate_materials",
    "module": "research.materials_discovery",
    "description": "Generate candidate materials within the design space.",
    "url": "functions.html#generate_candidate_materials"
  },
  {
    "type": "function",
    "name": "evaluate_candidates",
    "full_name": "research.materials_discovery.evaluate_candidates",
    "module": "research.materials_discovery",
    "description": "Evaluate candidate materials using property predictor.",
    "url": "functions.html#evaluate_candidates"
  },
  {
    "type": "function",
    "name": "optimize_design",
    "full_name": "research.materials_discovery.optimize_design",
    "module": "research.materials_discovery",
    "description": "Optimize materials design using genetic algorithm approach.",
    "url": "functions.html#optimize_design"
  },
  {
    "type": "function",
    "name": "encode",
    "full_name": "research.materials_discovery.encode",
    "module": "research.materials_discovery",
    "description": "Encode input to latent space.",
    "url": "functions.html#encode"
  },
  {
    "type": "function",
    "name": "reparameterize",
    "full_name": "research.materials_discovery.reparameterize",
    "module": "research.materials_discovery",
    "description": "Reparameterization trick for VAE.",
    "url": "functions.html#reparameterize"
  },
  {
    "type": "function",
    "name": "decode",
    "full_name": "research.materials_discovery.decode",
    "module": "research.materials_discovery",
    "description": "Decode from latent space to materials features.",
    "url": "functions.html#decode"
  },
  {
    "type": "function",
    "name": "forward",
    "full_name": "research.materials_discovery.forward",
    "module": "research.materials_discovery",
    "description": "Forward pass through the VAE.",
    "url": "functions.html#forward"
  },
  {
    "type": "function",
    "name": "generate_materials",
    "full_name": "research.materials_discovery.generate_materials",
    "module": "research.materials_discovery",
    "description": "Generate new materials by sampling from latent space.",
    "url": "functions.html#generate_materials"
  },
  {
    "type": "function",
    "name": "analyze_materials_clusters",
    "full_name": "research.materials_discovery.analyze_materials_clusters",
    "module": "research.materials_discovery",
    "description": "Analyze materials clusters based on properties.",
    "url": "functions.html#analyze_materials_clusters"
  },
  {
    "type": "function",
    "name": "_calculate_silhouette_score",
    "full_name": "research.materials_discovery._calculate_silhouette_score",
    "module": "research.materials_discovery",
    "description": "Calculate silhouette score for clustering quality.",
    "url": "functions.html#_calculate_silhouette_score"
  },
  {
    "type": "function",
    "name": "predict_cluster",
    "full_name": "research.materials_discovery.predict_cluster",
    "module": "research.materials_discovery",
    "description": "Predict cluster membership for new materials.",
    "url": "functions.html#predict_cluster"
  },
  {
    "type": "function",
    "name": "test_modern_quantum_suite",
    "full_name": "research.modern_quantum.test_modern_quantum_suite",
    "module": "research.modern_quantum",
    "description": "Test the modern quantum suite functionality.",
    "url": "functions.html#test_modern_quantum_suite"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.modern_quantum.__init__",
    "module": "research.modern_quantum",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "run",
    "full_name": "research.modern_quantum.run",
    "module": "research.modern_quantum",
    "description": "Run QAOA optimization.",
    "url": "functions.html#run"
  },
  {
    "type": "function",
    "name": "cost_function",
    "full_name": "research.modern_quantum.cost_function",
    "module": "research.modern_quantum",
    "description": "Calculate expectation value of Hamiltonian for given parameters.\n\nArgs:\n    parameters: Variational parameters for ansatz\n\nReturns:\n    Expectation value (energy)",
    "url": "functions.html#cost_function"
  },
  {
    "type": "function",
    "name": "plot_convergence",
    "full_name": "research.modern_quantum.plot_convergence",
    "module": "research.modern_quantum",
    "description": "Plot VQE energy convergence.",
    "url": "functions.html#plot_convergence"
  },
  {
    "type": "function",
    "name": "create_qaoa_circuit",
    "full_name": "research.modern_quantum.create_qaoa_circuit",
    "module": "research.modern_quantum",
    "description": "Create QAOA circuit with given parameters.",
    "url": "functions.html#create_qaoa_circuit"
  },
  {
    "type": "function",
    "name": "create_feature_map",
    "full_name": "research.modern_quantum.create_feature_map",
    "module": "research.modern_quantum",
    "description": "Create quantum feature map circuit for given data.",
    "url": "functions.html#create_feature_map"
  },
  {
    "type": "function",
    "name": "transform",
    "full_name": "research.modern_quantum.transform",
    "module": "research.modern_quantum",
    "description": "Transform classical data to quantum features.",
    "url": "functions.html#transform"
  },
  {
    "type": "function",
    "name": "_extract_quantum_features",
    "full_name": "research.modern_quantum._extract_quantum_features",
    "module": "research.modern_quantum",
    "description": "Extract quantum features using Pauli measurements.",
    "url": "functions.html#_extract_quantum_features"
  },
  {
    "type": "function",
    "name": "h2_hamiltonian",
    "full_name": "research.modern_quantum.h2_hamiltonian",
    "module": "research.modern_quantum",
    "description": "Create H2 molecule Hamiltonian for given bond length.\n\nArgs:\n    bond_length: H-H bond length in Angstroms\n\nReturns:\n    Molecular Hamiltonian as SparsePauliOp",
    "url": "functions.html#h2_hamiltonian"
  },
  {
    "type": "function",
    "name": "lih_hamiltonian",
    "full_name": "research.modern_quantum.lih_hamiltonian",
    "module": "research.modern_quantum",
    "description": "Create LiH molecule Hamiltonian.",
    "url": "functions.html#lih_hamiltonian"
  },
  {
    "type": "function",
    "name": "two_qubit_ansatz",
    "full_name": "research.modern_quantum.two_qubit_ansatz",
    "module": "research.modern_quantum",
    "description": "Simple two-qubit hardware-efficient ansatz.\n\nArgs:\n    parameters: [theta1, theta2] rotation angles\n\nReturns:\n    Parameterized quantum circuit",
    "url": "functions.html#two_qubit_ansatz"
  },
  {
    "type": "function",
    "name": "four_qubit_ansatz",
    "full_name": "research.modern_quantum.four_qubit_ansatz",
    "module": "research.modern_quantum",
    "description": "Four-qubit hardware-efficient ansatz for larger molecules.\n\nArgs:\n    parameters: [theta1, theta2, theta3, theta4, phi1, phi2] angles\n\nReturns:\n    Parameterized quantum circuit",
    "url": "functions.html#four_qubit_ansatz"
  },
  {
    "type": "function",
    "name": "run_h2_analysis",
    "full_name": "research.modern_quantum.run_h2_analysis",
    "module": "research.modern_quantum",
    "description": "Run complete H2 analysis with VQE.\n\nArgs:\n    bond_lengths: List of H-H bond lengths to analyze\n\nReturns:\n    Analysis results",
    "url": "functions.html#run_h2_analysis"
  },
  {
    "type": "function",
    "name": "plot_potential_energy_surface",
    "full_name": "research.modern_quantum.plot_potential_energy_surface",
    "module": "research.modern_quantum",
    "description": "Plot H2 potential energy surface.",
    "url": "functions.html#plot_potential_energy_surface"
  },
  {
    "type": "function",
    "name": "estimate_quantum_advantage",
    "full_name": "research.quantum.estimate_quantum_advantage",
    "module": "research.quantum",
    "description": "Estimate potential quantum advantage for a given problem.\n\nArgs:\n    problem_size: Size of the molecular system\n    algorithm: Quantum algorithm to analyze\n\nReturns:\n    Dictionary with advantage anal",
    "url": "functions.html#estimate_quantum_advantage"
  },
  {
    "type": "function",
    "name": "check_quantum_dependencies",
    "full_name": "research.quantum.check_quantum_dependencies",
    "module": "research.quantum",
    "description": "Check availability of quantum computing dependencies.",
    "url": "functions.html#check_quantum_dependencies"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "research.quantum.__init__",
    "module": "research.quantum",
    "description": "Initialize hybrid model.\n\nArgs:\n    n_qubits: Number of qubits for quantum layer\n    classical_input_dim: Input dimension for classical layers\n    output_dim: Output dimension",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "encode_features",
    "full_name": "research.quantum.encode_features",
    "module": "research.quantum",
    "description": "Encode molecular features into quantum circuits.\n\nArgs:\n    features: Feature matrix (n_molecules x n_features)\n\nReturns:\n    List of quantum circuits",
    "url": "functions.html#encode_features"
  },
  {
    "type": "function",
    "name": "_normalize_for_amplitude_encoding",
    "full_name": "research.quantum._normalize_for_amplitude_encoding",
    "module": "research.quantum",
    "description": "Normalize features for amplitude encoding.",
    "url": "functions.html#_normalize_for_amplitude_encoding"
  },
  {
    "type": "function",
    "name": "_amplitude_encode",
    "full_name": "research.quantum._amplitude_encode",
    "module": "research.quantum",
    "description": "Encode features using amplitude encoding.",
    "url": "functions.html#_amplitude_encode"
  },
  {
    "type": "function",
    "name": "_angle_encode",
    "full_name": "research.quantum._angle_encode",
    "module": "research.quantum",
    "description": "Encode features using angle encoding.",
    "url": "functions.html#_angle_encode"
  },
  {
    "type": "function",
    "name": "_basis_encode",
    "full_name": "research.quantum._basis_encode",
    "module": "research.quantum",
    "description": "Encode features using basis encoding.",
    "url": "functions.html#_basis_encode"
  },
  {
    "type": "function",
    "name": "_mock_encode_features",
    "full_name": "research.quantum._mock_encode_features",
    "module": "research.quantum",
    "description": "Mock implementation for testing without Qiskit.",
    "url": "functions.html#_mock_encode_features"
  },
  {
    "type": "function",
    "name": "create_variational_circuit",
    "full_name": "research.quantum.create_variational_circuit",
    "module": "research.quantum",
    "description": "Create parameterized variational quantum circuit.\n\nReturns:\n    Tuple of (circuit, parameters)",
    "url": "functions.html#create_variational_circuit"
  },
  {
    "type": "function",
    "name": "_mock_create_circuit",
    "full_name": "research.quantum._mock_create_circuit",
    "module": "research.quantum",
    "description": "Mock implementation for testing.",
    "url": "functions.html#_mock_create_circuit"
  },
  {
    "type": "function",
    "name": "forward",
    "full_name": "research.quantum.forward",
    "module": "research.quantum",
    "description": "Forward pass through hybrid network.",
    "url": "functions.html#forward"
  },
  {
    "type": "function",
    "name": "_mock_forward",
    "full_name": "research.quantum._mock_forward",
    "module": "research.quantum",
    "description": "Mock forward pass for testing.",
    "url": "functions.html#_mock_forward"
  },
  {
    "type": "function",
    "name": "_calculate_expectation",
    "full_name": "research.quantum._calculate_expectation",
    "module": "research.quantum",
    "description": "Calculate expectation value from measurement counts.",
    "url": "functions.html#_calculate_expectation"
  },
  {
    "type": "function",
    "name": "simulate_molecule",
    "full_name": "research.quantum.simulate_molecule",
    "module": "research.quantum",
    "description": "Simulate molecular properties using quantum algorithms.\n\nArgs:\n    molecule_data: Dictionary with molecular information\n    method: Quantum algorithm to use ('vqe', 'qaoa')\n\nReturns:\n    Dictionary wi",
    "url": "functions.html#simulate_molecule"
  },
  {
    "type": "function",
    "name": "_variational_quantum_eigensolver",
    "full_name": "research.quantum._variational_quantum_eigensolver",
    "module": "research.quantum",
    "description": "Run VQE simulation.",
    "url": "functions.html#_variational_quantum_eigensolver"
  },
  {
    "type": "function",
    "name": "_quantum_approximate_optimization",
    "full_name": "research.quantum._quantum_approximate_optimization",
    "module": "research.quantum",
    "description": "Run QAOA simulation.",
    "url": "functions.html#_quantum_approximate_optimization"
  },
  {
    "type": "function",
    "name": "_classical_approximation",
    "full_name": "research.quantum._classical_approximation",
    "module": "research.quantum",
    "description": "Classical approximation when quantum libraries unavailable.",
    "url": "functions.html#_classical_approximation"
  },
  {
    "type": "function",
    "name": "duration",
    "full_name": "tutorials.assessment.duration",
    "module": "tutorials.assessment",
    "description": "Get the duration of the activity.",
    "url": "functions.html#duration"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "tutorials.assessment.__init__",
    "module": "tutorials.assessment",
    "description": "Initialize progress tracker.\n\nArgs:\n    assessment: Optional LearningAssessment instance to integrate with",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "start_section",
    "full_name": "tutorials.assessment.start_section",
    "module": "tutorials.assessment",
    "description": "Start a new learning section.",
    "url": "functions.html#start_section"
  },
  {
    "type": "function",
    "name": "end_section",
    "full_name": "tutorials.assessment.end_section",
    "module": "tutorials.assessment",
    "description": "End the current learning section.",
    "url": "functions.html#end_section"
  },
  {
    "type": "function",
    "name": "record_activity",
    "full_name": "tutorials.assessment.record_activity",
    "module": "tutorials.assessment",
    "description": "Record a learning activity.\n\nArgs:\n    activity: Name of the activity\n    result: Result of the activity (success, partial, failure)\n    metadata: Additional metadata about the activity\n    understand",
    "url": "functions.html#record_activity"
  },
  {
    "type": "function",
    "name": "add_concept_checkpoint",
    "full_name": "tutorials.assessment.add_concept_checkpoint",
    "module": "tutorials.assessment",
    "description": "Add a concept understanding checkpoint.\n\nArgs:\n    concept: Name of the concept\n    understanding: Understanding level (0.0 to 1.0)\n    confidence: Confidence level (0.0 to 1.0)\n    notes: Additional ",
    "url": "functions.html#add_concept_checkpoint"
  },
  {
    "type": "function",
    "name": "end_current_activity",
    "full_name": "tutorials.assessment.end_current_activity",
    "module": "tutorials.assessment",
    "description": "End the current activity if one is in progress.",
    "url": "functions.html#end_current_activity"
  },
  {
    "type": "function",
    "name": "get_progress_summary",
    "full_name": "tutorials.assessment.get_progress_summary",
    "module": "tutorials.assessment",
    "description": "Get a summary of learning progress.",
    "url": "functions.html#get_progress_summary"
  },
  {
    "type": "function",
    "name": "save_progress",
    "full_name": "tutorials.assessment.save_progress",
    "module": "tutorials.assessment",
    "description": "Save progress data to file.",
    "url": "functions.html#save_progress"
  },
  {
    "type": "function",
    "name": "log_progress",
    "full_name": "tutorials.assessment.log_progress",
    "module": "tutorials.assessment",
    "description": "Log a progress step.\n\nArgs:\n    step: Description of the step\n    status: Status of the step (completed, failed, in_progress)\n    details: Additional details about the step",
    "url": "functions.html#log_progress"
  },
  {
    "type": "function",
    "name": "get_session_summary",
    "full_name": "tutorials.assessment.get_session_summary",
    "module": "tutorials.assessment",
    "description": "Get a summary of the current session.",
    "url": "functions.html#get_session_summary"
  },
  {
    "type": "function",
    "name": "print_summary",
    "full_name": "tutorials.assessment.print_summary",
    "module": "tutorials.assessment",
    "description": "Print a session summary.",
    "url": "functions.html#print_summary"
  },
  {
    "type": "function",
    "name": "setup_learning_environment",
    "full_name": "tutorials.core.setup_learning_environment",
    "module": "tutorials.core",
    "description": "Setup the learning environment for ChemML tutorials.\n\nThis function configures logging, plotting style, random seeds,\nand checks available dependencies for a consistent tutorial experience.\n\nArgs:\n   ",
    "url": "functions.html#setup_learning_environment"
  },
  {
    "type": "function",
    "name": "load_tutorial_data",
    "full_name": "tutorials.core.load_tutorial_data",
    "module": "tutorials.core",
    "description": "Load educational datasets for ChemML tutorials.\n\nArgs:\n    dataset_name: Name of the dataset to load\n    cache_dir: Directory to cache downloaded data\n    force_download: Whether to force re-download ",
    "url": "functions.html#load_tutorial_data"
  },
  {
    "type": "function",
    "name": "create_interactive_demo",
    "full_name": "tutorials.core.create_interactive_demo",
    "module": "tutorials.core",
    "description": "Create an interactive demonstration widget.\n\nArgs:\n    demo_type: Type of demo to create\n    **kwargs: Additional parameters for the demo\n\nReturns:\n    Interactive demo widget",
    "url": "functions.html#create_interactive_demo"
  },
  {
    "type": "function",
    "name": "_check_tutorial_environment",
    "full_name": "tutorials.core._check_tutorial_environment",
    "module": "tutorials.core",
    "description": "Check the status of dependencies needed for tutorials.",
    "url": "functions.html#_check_tutorial_environment"
  },
  {
    "type": "function",
    "name": "_check_jupyter_environment",
    "full_name": "tutorials.core._check_jupyter_environment",
    "module": "tutorials.core",
    "description": "Check if running in Jupyter environment.",
    "url": "functions.html#_check_jupyter_environment"
  },
  {
    "type": "function",
    "name": "_check_interactive_support",
    "full_name": "tutorials.core._check_interactive_support",
    "module": "tutorials.core",
    "description": "Check if interactive widgets are supported.",
    "url": "functions.html#_check_interactive_support"
  },
  {
    "type": "function",
    "name": "_setup_tutorial_directories",
    "full_name": "tutorials.core._setup_tutorial_directories",
    "module": "tutorials.core",
    "description": "Create necessary directories for tutorial data and outputs.",
    "url": "functions.html#_setup_tutorial_directories"
  },
  {
    "type": "function",
    "name": "_get_tutorial_directories",
    "full_name": "tutorials.core._get_tutorial_directories",
    "module": "tutorials.core",
    "description": "Get standard tutorial directory paths.",
    "url": "functions.html#_get_tutorial_directories"
  },
  {
    "type": "function",
    "name": "initialize_tutorial_environment",
    "full_name": "tutorials.core.initialize_tutorial_environment",
    "module": "tutorials.core",
    "description": "Alias for setup_learning_environment for backwards compatibility.",
    "url": "functions.html#initialize_tutorial_environment"
  },
  {
    "type": "function",
    "name": "get_sample_datasets",
    "full_name": "tutorials.data.get_sample_datasets",
    "module": "tutorials.data",
    "description": "Get all available sample datasets for tutorials.\n\nReturns:\n    Dict[str, pd.DataFrame]: Dictionary of dataset names to DataFrames",
    "url": "functions.html#get_sample_datasets"
  },
  {
    "type": "function",
    "name": "load_educational_molecules",
    "full_name": "tutorials.data.load_educational_molecules",
    "module": "tutorials.data",
    "description": "Load educational molecules by category.\n\nArgs:\n    category (str): Category of molecules ('drugs', 'simple_organics',\n                   'functional_groups', or 'all')\n\nReturns:\n    Dict[str, str]: Di",
    "url": "functions.html#load_educational_molecules"
  },
  {
    "type": "function",
    "name": "create_synthetic_examples",
    "full_name": "tutorials.data.create_synthetic_examples",
    "module": "tutorials.data",
    "description": "Generate synthetic molecular examples for demonstrations.\n\nArgs:\n    num_molecules (int): Number of molecules to generate\n    complexity (str): Complexity level ('simple', 'medium', 'complex')\n\nReturn",
    "url": "functions.html#create_synthetic_examples"
  },
  {
    "type": "function",
    "name": "load_tutorial_molecules",
    "full_name": "tutorials.data.load_tutorial_molecules",
    "module": "tutorials.data",
    "description": "Load all tutorial molecules (backward compatibility).",
    "url": "functions.html#load_tutorial_molecules"
  },
  {
    "type": "function",
    "name": "get_molecule_properties",
    "full_name": "tutorials.data.get_molecule_properties",
    "module": "tutorials.data",
    "description": "Calculate properties for a list of SMILES strings.\n\nArgs:\n    smiles_list (List[str]): List of SMILES strings\n\nReturns:\n    pd.DataFrame: DataFrame with molecules and their properties",
    "url": "functions.html#get_molecule_properties"
  },
  {
    "type": "function",
    "name": "load_quantum_molecules",
    "full_name": "tutorials.data.load_quantum_molecules",
    "module": "tutorials.data",
    "description": "Load quantum molecular systems for tutorials.\n\nArgs:\n    molecules: List of molecule names\n    basis_set: Quantum chemistry basis set\n    include_hamiltonians: Whether to include molecular Hamiltonian",
    "url": "functions.html#load_quantum_molecules"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "tutorials.data.__init__",
    "module": "tutorials.data",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "load_drug_molecules",
    "full_name": "tutorials.data.load_drug_molecules",
    "module": "tutorials.data",
    "description": "Load a curated collection of common drug molecules.\n\nReturns:\n    Dict[str, str]: Dictionary mapping drug names to SMILES strings",
    "url": "functions.html#load_drug_molecules"
  },
  {
    "type": "function",
    "name": "load_simple_organics",
    "full_name": "tutorials.data.load_simple_organics",
    "module": "tutorials.data",
    "description": "Load simple organic molecules for basic tutorials.\n\nReturns:\n    Dict[str, str]: Dictionary mapping molecule names to SMILES strings",
    "url": "functions.html#load_simple_organics"
  },
  {
    "type": "function",
    "name": "load_functional_groups",
    "full_name": "tutorials.data.load_functional_groups",
    "module": "tutorials.data",
    "description": "Load molecules representing different functional groups.\n\nReturns:\n    Dict[str, str]: Dictionary mapping functional group names to SMILES strings",
    "url": "functions.html#load_functional_groups"
  },
  {
    "type": "function",
    "name": "get_molecule_dataset",
    "full_name": "tutorials.data.get_molecule_dataset",
    "module": "tutorials.data",
    "description": "Get a complete molecular dataset with computed properties.\n\nArgs:\n    dataset_name (str): Name of the dataset ('drugs', 'simple_organics', 'functional_groups')\n\nReturns:\n    pd.DataFrame: DataFrame wi",
    "url": "functions.html#get_molecule_dataset"
  },
  {
    "type": "function",
    "name": "get_property_ranges",
    "full_name": "tutorials.data.get_property_ranges",
    "module": "tutorials.data",
    "description": "Get the range of molecular properties for a dataset.\n\nArgs:\n    dataset_name (str): Name of the dataset\n\nReturns:\n    Dict[str, Tuple[float, float]]: Property ranges (min, max)",
    "url": "functions.html#get_property_ranges"
  },
  {
    "type": "function",
    "name": "_calculate_properties",
    "full_name": "tutorials.data._calculate_properties",
    "module": "tutorials.data",
    "description": "Calculate molecular properties for educational purposes.",
    "url": "functions.html#_calculate_properties"
  },
  {
    "type": "function",
    "name": "_generate_simple_molecules",
    "full_name": "tutorials.data._generate_simple_molecules",
    "module": "tutorials.data",
    "description": "Generate simple linear alkanes and alcohols.",
    "url": "functions.html#_generate_simple_molecules"
  },
  {
    "type": "function",
    "name": "_generate_medium_molecules",
    "full_name": "tutorials.data._generate_medium_molecules",
    "module": "tutorials.data",
    "description": "Generate molecules with functional groups and rings.",
    "url": "functions.html#_generate_medium_molecules"
  },
  {
    "type": "function",
    "name": "_generate_complex_molecules",
    "full_name": "tutorials.data._generate_complex_molecules",
    "module": "tutorials.data",
    "description": "Generate complex drug-like molecules.",
    "url": "functions.html#_generate_complex_molecules"
  },
  {
    "type": "function",
    "name": "check_dependencies",
    "full_name": "tutorials.environment.check_dependencies",
    "module": "tutorials.environment",
    "description": "Check if specific dependencies are available.\n\nArgs:\n    dependencies (List[str], optional): List of dependencies to check\n    verbose (bool): Whether to print status information\n\nReturns:\n    Dict[st",
    "url": "functions.html#check_dependencies"
  },
  {
    "type": "function",
    "name": "setup_fallbacks",
    "full_name": "tutorials.environment.setup_fallbacks",
    "module": "tutorials.environment",
    "description": "Setup fallback mechanisms for missing dependencies.\n\nReturns:\n    Dict[str, Any]: Configured fallbacks",
    "url": "functions.html#setup_fallbacks"
  },
  {
    "type": "function",
    "name": "validate_environment",
    "full_name": "tutorials.environment.validate_environment",
    "module": "tutorials.environment",
    "description": "Validate that the environment meets specific requirements.\n\nArgs:\n    requirements (List[str]): List of required capabilities or dependencies\n\nReturns:\n    bool: True if all requirements are met",
    "url": "functions.html#validate_environment"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "tutorials.environment.__init__",
    "module": "tutorials.environment",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "check_environment",
    "full_name": "tutorials.environment.check_environment",
    "module": "tutorials.environment",
    "description": "Comprehensive environment check for tutorial requirements.\n\nArgs:\n    verbose (bool): Whether to print detailed status information\n\nReturns:\n    Dict[str, Any]: Environment status report",
    "url": "functions.html#check_environment"
  },
  {
    "type": "function",
    "name": "setup_tutorial_environment",
    "full_name": "tutorials.environment.setup_tutorial_environment",
    "module": "tutorials.environment",
    "description": "Setup environment for specific tutorial type.\n\nArgs:\n    tutorial_type (str): Type of tutorial ('basic', 'advanced', 'quantum', 'ml')\n    auto_install (bool): Whether to automatically install missing ",
    "url": "functions.html#setup_tutorial_environment"
  },
  {
    "type": "function",
    "name": "validate_tutorial_requirements",
    "full_name": "tutorials.environment.validate_tutorial_requirements",
    "module": "tutorials.environment",
    "description": "Validate that specific tutorial requirements are met.\n\nArgs:\n    requirements (List[str]): List of required capabilities/dependencies\n\nReturns:\n    Tuple[bool, List[str]]: (all_met, missing_requiremen",
    "url": "functions.html#validate_tutorial_requirements"
  },
  {
    "type": "function",
    "name": "_check_dependency",
    "full_name": "tutorials.environment._check_dependency",
    "module": "tutorials.environment",
    "description": "Check if a dependency is available and meets version requirements.",
    "url": "functions.html#_check_dependency"
  },
  {
    "type": "function",
    "name": "_version_check",
    "full_name": "tutorials.environment._version_check",
    "module": "tutorials.environment",
    "description": "Check if current version meets minimum requirement.",
    "url": "functions.html#_version_check"
  },
  {
    "type": "function",
    "name": "_get_tutorial_dependencies",
    "full_name": "tutorials.environment._get_tutorial_dependencies",
    "module": "tutorials.environment",
    "description": "Get dependencies required for specific tutorial type.",
    "url": "functions.html#_get_tutorial_dependencies"
  },
  {
    "type": "function",
    "name": "_install_dependencies",
    "full_name": "tutorials.environment._install_dependencies",
    "module": "tutorials.environment",
    "description": "Attempt to install missing dependencies.",
    "url": "functions.html#_install_dependencies"
  },
  {
    "type": "function",
    "name": "_create_fallback",
    "full_name": "tutorials.environment._create_fallback",
    "module": "tutorials.environment",
    "description": "Create fallback implementation for missing dependency.",
    "url": "functions.html#_create_fallback"
  },
  {
    "type": "function",
    "name": "_create_rdkit_fallback",
    "full_name": "tutorials.environment._create_rdkit_fallback",
    "module": "tutorials.environment",
    "description": "Create fallback for RDKit functionality.",
    "url": "functions.html#_create_rdkit_fallback"
  },
  {
    "type": "function",
    "name": "_create_deepchem_fallback",
    "full_name": "tutorials.environment._create_deepchem_fallback",
    "module": "tutorials.environment",
    "description": "Create fallback for DeepChem functionality.",
    "url": "functions.html#_create_deepchem_fallback"
  },
  {
    "type": "function",
    "name": "_create_torch_fallback",
    "full_name": "tutorials.environment._create_torch_fallback",
    "module": "tutorials.environment",
    "description": "Create fallback for PyTorch functionality.",
    "url": "functions.html#_create_torch_fallback"
  },
  {
    "type": "function",
    "name": "_create_quantum_fallback",
    "full_name": "tutorials.environment._create_quantum_fallback",
    "module": "tutorials.environment",
    "description": "Create fallback for quantum computing libraries.",
    "url": "functions.html#_create_quantum_fallback"
  },
  {
    "type": "function",
    "name": "_create_visualization_fallback",
    "full_name": "tutorials.environment._create_visualization_fallback",
    "module": "tutorials.environment",
    "description": "Create fallback for advanced visualization.",
    "url": "functions.html#_create_visualization_fallback"
  },
  {
    "type": "function",
    "name": "_check_capability",
    "full_name": "tutorials.environment._check_capability",
    "module": "tutorials.environment",
    "description": "Check if a specific capability is available.",
    "url": "functions.html#_check_capability"
  },
  {
    "type": "function",
    "name": "_check_gpu_availability",
    "full_name": "tutorials.environment._check_gpu_availability",
    "module": "tutorials.environment",
    "description": "Check if GPU is available for computation.",
    "url": "functions.html#_check_gpu_availability"
  },
  {
    "type": "function",
    "name": "_check_jupyter_availability",
    "full_name": "tutorials.environment._check_jupyter_availability",
    "module": "tutorials.environment",
    "description": "Check if running in Jupyter environment.",
    "url": "functions.html#_check_jupyter_availability"
  },
  {
    "type": "function",
    "name": "_check_visualization_capability",
    "full_name": "tutorials.environment._check_visualization_capability",
    "module": "tutorials.environment",
    "description": "Check advanced visualization capabilities.",
    "url": "functions.html#_check_visualization_capability"
  },
  {
    "type": "function",
    "name": "_check_quantum_capability",
    "full_name": "tutorials.environment._check_quantum_capability",
    "module": "tutorials.environment",
    "description": "Check quantum computing capabilities.",
    "url": "functions.html#_check_quantum_capability"
  },
  {
    "type": "function",
    "name": "_check_md_capability",
    "full_name": "tutorials.environment._check_md_capability",
    "module": "tutorials.environment",
    "description": "Check molecular dynamics capabilities.",
    "url": "functions.html#_check_md_capability"
  },
  {
    "type": "function",
    "name": "_suggest_installation",
    "full_name": "tutorials.environment._suggest_installation",
    "module": "tutorials.environment",
    "description": "Suggest installation commands for missing dependencies.",
    "url": "functions.html#_suggest_installation"
  },
  {
    "type": "function",
    "name": "_generate_recommendations",
    "full_name": "tutorials.environment._generate_recommendations",
    "module": "tutorials.environment",
    "description": "Generate setup recommendations based on environment status.",
    "url": "functions.html#_generate_recommendations"
  },
  {
    "type": "function",
    "name": "_print_status_report",
    "full_name": "tutorials.environment._print_status_report",
    "module": "tutorials.environment",
    "description": "Print formatted environment status report.",
    "url": "functions.html#_print_status_report"
  },
  {
    "type": "function",
    "name": "fallback_function",
    "full_name": "tutorials.environment.fallback_function",
    "module": "tutorials.environment",
    "description": "",
    "url": "functions.html#fallback_function"
  },
  {
    "type": "function",
    "name": "MolFromSmiles",
    "full_name": "tutorials.environment.MolFromSmiles",
    "module": "tutorials.environment",
    "description": "",
    "url": "functions.html#MolFromSmiles"
  },
  {
    "type": "function",
    "name": "MolToSmiles",
    "full_name": "tutorials.environment.MolToSmiles",
    "module": "tutorials.environment",
    "description": "",
    "url": "functions.html#MolToSmiles"
  },
  {
    "type": "function",
    "name": "create_h2_vqe_tutorial",
    "full_name": "tutorials.quantum.create_h2_vqe_tutorial",
    "module": "tutorials.quantum",
    "description": "Create H2 VQE tutorial.\n\nArgs:\n    bond_distance (float): H-H bond distance in Angstroms\n\nReturns:\n    Dict[str, Any]: Complete H2 VQE tutorial",
    "url": "functions.html#create_h2_vqe_tutorial"
  },
  {
    "type": "function",
    "name": "create_quantum_ml_demo",
    "full_name": "tutorials.quantum.create_quantum_ml_demo",
    "module": "tutorials.quantum",
    "description": "Create quantum machine learning demonstration.\n\nArgs:\n    data (np.ndarray): Training data\n    labels (np.ndarray): Training labels\n\nReturns:\n    Dict[str, Any]: Quantum ML demo components",
    "url": "functions.html#create_quantum_ml_demo"
  },
  {
    "type": "function",
    "name": "check_quantum_requirements",
    "full_name": "tutorials.quantum.check_quantum_requirements",
    "module": "tutorials.quantum",
    "description": "Check quantum computing tutorial requirements.\n\nReturns:\n    Dict[str, bool]: Status of quantum dependencies",
    "url": "functions.html#check_quantum_requirements"
  },
  {
    "type": "function",
    "name": "get_quantum_tutorial_overview",
    "full_name": "tutorials.quantum.get_quantum_tutorial_overview",
    "module": "tutorials.quantum",
    "description": "Get overview of available quantum tutorials.\n\nReturns:\n    str: Overview of quantum tutorial capabilities",
    "url": "functions.html#get_quantum_tutorial_overview"
  },
  {
    "type": "function",
    "name": "create_quantum_circuit_widget",
    "full_name": "tutorials.quantum.create_quantum_circuit_widget",
    "module": "tutorials.quantum",
    "description": "Create interactive quantum circuit widget.\n\nArgs:\n    max_qubits: Maximum number of qubits\n    available_gates: List of available quantum gates\n    show_statevector: Whether to show state vector\n    e",
    "url": "functions.html#create_quantum_circuit_widget"
  },
  {
    "type": "function",
    "name": "vqe_optimization_tracker",
    "full_name": "tutorials.quantum.vqe_optimization_tracker",
    "module": "tutorials.quantum",
    "description": "Create VQE optimization tracker.\n\nArgs:\n    molecule: Target molecule\n    ansatz_type: Type of quantum ansatz\n    optimizer: Classical optimizer\n    max_iterations: Maximum optimization iterations\n   ",
    "url": "functions.html#vqe_optimization_tracker"
  },
  {
    "type": "function",
    "name": "molecular_hamiltonian_visualizer",
    "full_name": "tutorials.quantum.molecular_hamiltonian_visualizer",
    "module": "tutorials.quantum",
    "description": "Create molecular Hamiltonian visualizer.\n\nArgs:\n    molecules: List of molecule objects\n    show_pauli_decomposition: Whether to show Pauli decomposition\n    enable_term_filtering: Whether to enable t",
    "url": "functions.html#molecular_hamiltonian_visualizer"
  },
  {
    "type": "function",
    "name": "quantum_state_analyzer",
    "full_name": "tutorials.quantum.quantum_state_analyzer",
    "module": "tutorials.quantum",
    "description": "Create quantum state analyzer.\n\nArgs:\n    optimization_results: Results from VQE optimization\n    show_amplitudes: Whether to show state amplitudes\n    show_probabilities: Whether to show probabilitie",
    "url": "functions.html#quantum_state_analyzer"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "tutorials.quantum.__init__",
    "module": "tutorials.quantum",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "create_h2_tutorial",
    "full_name": "tutorials.quantum.create_h2_tutorial",
    "module": "tutorials.quantum",
    "description": "Create H2 molecule tutorial with VQE demonstration.\n\nArgs:\n    bond_distance (float): H-H bond distance in Angstroms\n\nReturns:\n    Dict[str, Any]: Tutorial components and results",
    "url": "functions.html#create_h2_tutorial"
  },
  {
    "type": "function",
    "name": "create_quantum_feature_mapping",
    "full_name": "tutorials.quantum.create_quantum_feature_mapping",
    "module": "tutorials.quantum",
    "description": "Demonstrate quantum feature mapping for machine learning.\n\nArgs:\n    classical_data (np.ndarray): Classical data to map to quantum features\n\nReturns:\n    Dict[str, Any]: Quantum feature mapping demons",
    "url": "functions.html#create_quantum_feature_mapping"
  },
  {
    "type": "function",
    "name": "create_quantum_molecular_simulation",
    "full_name": "tutorials.quantum.create_quantum_molecular_simulation",
    "module": "tutorials.quantum",
    "description": "Create quantum molecular simulation tutorial.\n\nArgs:\n    molecule_smiles (str): SMILES string of the molecule\n\nReturns:\n    Dict[str, Any]: Molecular simulation components",
    "url": "functions.html#create_quantum_molecular_simulation"
  },
  {
    "type": "function",
    "name": "create_interactive_vqe_demo",
    "full_name": "tutorials.quantum.create_interactive_vqe_demo",
    "module": "tutorials.quantum",
    "description": "Create interactive VQE demonstration widget.\n\nReturns:\n    Interactive VQE demo widget or fallback interface",
    "url": "functions.html#create_interactive_vqe_demo"
  },
  {
    "type": "function",
    "name": "_create_h2_hamiltonian",
    "full_name": "tutorials.quantum._create_h2_hamiltonian",
    "module": "tutorials.quantum",
    "description": "Create educational H2 Hamiltonian.",
    "url": "functions.html#_create_h2_hamiltonian"
  },
  {
    "type": "function",
    "name": "_create_vqe_ansatz",
    "full_name": "tutorials.quantum._create_vqe_ansatz",
    "module": "tutorials.quantum",
    "description": "Create VQE ansatz circuit.",
    "url": "functions.html#_create_vqe_ansatz"
  },
  {
    "type": "function",
    "name": "_create_feature_map",
    "full_name": "tutorials.quantum._create_feature_map",
    "module": "tutorials.quantum",
    "description": "Create quantum feature mapping circuit.",
    "url": "functions.html#_create_feature_map"
  },
  {
    "type": "function",
    "name": "_encode_classical_data",
    "full_name": "tutorials.quantum._encode_classical_data",
    "module": "tutorials.quantum",
    "description": "Encode classical data into quantum circuit.",
    "url": "functions.html#_encode_classical_data"
  },
  {
    "type": "function",
    "name": "_create_molecular_simulation_circuit",
    "full_name": "tutorials.quantum._create_molecular_simulation_circuit",
    "module": "tutorials.quantum",
    "description": "Create molecular simulation circuit.",
    "url": "functions.html#_create_molecular_simulation_circuit"
  },
  {
    "type": "function",
    "name": "_create_educational_hamiltonian",
    "full_name": "tutorials.quantum._create_educational_hamiltonian",
    "module": "tutorials.quantum",
    "description": "Create educational Hamiltonian for molecular simulation.",
    "url": "functions.html#_create_educational_hamiltonian"
  },
  {
    "type": "function",
    "name": "_visualize_circuit",
    "full_name": "tutorials.quantum._visualize_circuit",
    "module": "tutorials.quantum",
    "description": "Visualize quantum circuit.",
    "url": "functions.html#_visualize_circuit"
  },
  {
    "type": "function",
    "name": "_visualize_feature_mapping",
    "full_name": "tutorials.quantum._visualize_feature_mapping",
    "module": "tutorials.quantum",
    "description": "Visualize quantum feature mapping.",
    "url": "functions.html#_visualize_feature_mapping"
  },
  {
    "type": "function",
    "name": "_extract_molecule_info",
    "full_name": "tutorials.quantum._extract_molecule_info",
    "module": "tutorials.quantum",
    "description": "Extract molecular information for tutorial.",
    "url": "functions.html#_extract_molecule_info"
  },
  {
    "type": "function",
    "name": "_create_parametric_vqe_circuit",
    "full_name": "tutorials.quantum._create_parametric_vqe_circuit",
    "module": "tutorials.quantum",
    "description": "Create VQE circuit with specific parameter values.",
    "url": "functions.html#_create_parametric_vqe_circuit"
  },
  {
    "type": "function",
    "name": "_calculate_mock_energy",
    "full_name": "tutorials.quantum._calculate_mock_energy",
    "module": "tutorials.quantum",
    "description": "Calculate mock energy for VQE demonstration.",
    "url": "functions.html#_calculate_mock_energy"
  },
  {
    "type": "function",
    "name": "_create_h2_explanation",
    "full_name": "tutorials.quantum._create_h2_explanation",
    "module": "tutorials.quantum",
    "description": "Create educational explanation for H2 tutorial.",
    "url": "functions.html#_create_h2_explanation"
  },
  {
    "type": "function",
    "name": "_create_fallback_vqe_demo",
    "full_name": "tutorials.quantum._create_fallback_vqe_demo",
    "module": "tutorials.quantum",
    "description": "Create fallback VQE demo when widgets are not available.",
    "url": "functions.html#_create_fallback_vqe_demo"
  },
  {
    "type": "function",
    "name": "create_qsvm_tutorial",
    "full_name": "tutorials.quantum.create_qsvm_tutorial",
    "module": "tutorials.quantum",
    "description": "Create Quantum Support Vector Machine tutorial.\n\nArgs:\n    classical_data (np.ndarray): Training data\n    labels (np.ndarray): Training labels\n\nReturns:\n    Dict[str, Any]: QSVM tutorial components",
    "url": "functions.html#create_qsvm_tutorial"
  },
  {
    "type": "function",
    "name": "create_vqc_tutorial",
    "full_name": "tutorials.quantum.create_vqc_tutorial",
    "module": "tutorials.quantum",
    "description": "Create Variational Quantum Classifier tutorial.\n\nArgs:\n    num_qubits (int): Number of qubits for the classifier\n\nReturns:\n    Dict[str, Any]: VQC tutorial components",
    "url": "functions.html#create_vqc_tutorial"
  },
  {
    "type": "function",
    "name": "_create_qml_feature_map",
    "full_name": "tutorials.quantum._create_qml_feature_map",
    "module": "tutorials.quantum",
    "description": "Create quantum ML feature map.",
    "url": "functions.html#_create_qml_feature_map"
  },
  {
    "type": "function",
    "name": "_mock_qsvm_training",
    "full_name": "tutorials.quantum._mock_qsvm_training",
    "module": "tutorials.quantum",
    "description": "Mock QSVM training for educational purposes.",
    "url": "functions.html#_mock_qsvm_training"
  },
  {
    "type": "function",
    "name": "_create_vqc_ansatz",
    "full_name": "tutorials.quantum._create_vqc_ansatz",
    "module": "tutorials.quantum",
    "description": "Create VQC ansatz circuit.",
    "url": "functions.html#_create_vqc_ansatz"
  },
  {
    "type": "function",
    "name": "_create_measurement_circuit",
    "full_name": "tutorials.quantum._create_measurement_circuit",
    "module": "tutorials.quantum",
    "description": "Create measurement circuit for classification.",
    "url": "functions.html#_create_measurement_circuit"
  },
  {
    "type": "function",
    "name": "check_quantum_environment",
    "full_name": "tutorials.quantum.check_quantum_environment",
    "module": "tutorials.quantum",
    "description": "Check the availability of quantum computing dependencies.\n\nReturns:\n    Dictionary with status of each quantum library",
    "url": "functions.html#check_quantum_environment"
  },
  {
    "type": "function",
    "name": "create_bell_state_tutorial",
    "full_name": "tutorials.quantum.create_bell_state_tutorial",
    "module": "tutorials.quantum",
    "description": "Create an interactive Bell state tutorial.",
    "url": "functions.html#create_bell_state_tutorial"
  },
  {
    "type": "function",
    "name": "create_multi_molecule_vqe",
    "full_name": "tutorials.quantum.create_multi_molecule_vqe",
    "module": "tutorials.quantum",
    "description": "Create multi-molecule VQE comparison tool.",
    "url": "functions.html#create_multi_molecule_vqe"
  },
  {
    "type": "function",
    "name": "create_qml_demo",
    "full_name": "tutorials.quantum.create_qml_demo",
    "module": "tutorials.quantum",
    "description": "Create quantum machine learning demonstration.",
    "url": "functions.html#create_qml_demo"
  },
  {
    "type": "function",
    "name": "create_comprehensive_assessment",
    "full_name": "tutorials.quantum.create_comprehensive_assessment",
    "module": "tutorials.quantum",
    "description": "Create comprehensive quantum computing assessment.",
    "url": "functions.html#create_comprehensive_assessment"
  },
  {
    "type": "function",
    "name": "generate_learning_recommendations",
    "full_name": "tutorials.quantum.generate_learning_recommendations",
    "module": "tutorials.quantum",
    "description": "Generate personalized learning recommendations.",
    "url": "functions.html#generate_learning_recommendations"
  },
  {
    "type": "function",
    "name": "create_ansatz_designer",
    "full_name": "tutorials.quantum.create_ansatz_designer",
    "module": "tutorials.quantum",
    "description": "Create interactive ansatz designer widget.",
    "url": "functions.html#create_ansatz_designer"
  },
  {
    "type": "function",
    "name": "create_error_analysis_tool",
    "full_name": "tutorials.quantum.create_error_analysis_tool",
    "module": "tutorials.quantum",
    "description": "Create quantum error analysis tool.",
    "url": "functions.html#create_error_analysis_tool"
  },
  {
    "type": "function",
    "name": "create_advantage_explorer",
    "full_name": "tutorials.quantum.create_advantage_explorer",
    "module": "tutorials.quantum",
    "description": "Create quantum advantage exploration tool.",
    "url": "functions.html#create_advantage_explorer"
  },
  {
    "type": "function",
    "name": "create_qml_workshop",
    "full_name": "tutorials.quantum.create_qml_workshop",
    "module": "tutorials.quantum",
    "description": "Create quantum machine learning workshop.",
    "url": "functions.html#create_qml_workshop"
  },
  {
    "type": "function",
    "name": "create_exercise_launcher",
    "full_name": "tutorials.quantum.create_exercise_launcher",
    "module": "tutorials.quantum",
    "description": "Create exercise launcher interface.",
    "url": "functions.html#create_exercise_launcher"
  },
  {
    "type": "function",
    "name": "display_interactive",
    "full_name": "tutorials.quantum.display_interactive",
    "module": "tutorials.quantum",
    "description": "Display the interactive Bell state tutorial.",
    "url": "functions.html#display_interactive"
  },
  {
    "type": "function",
    "name": "run_comparison",
    "full_name": "tutorials.quantum.run_comparison",
    "module": "tutorials.quantum",
    "description": "Run VQE comparison across molecules.",
    "url": "functions.html#run_comparison"
  },
  {
    "type": "function",
    "name": "run_demonstration",
    "full_name": "tutorials.quantum.run_demonstration",
    "module": "tutorials.quantum",
    "description": "Run quantum ML demonstration.",
    "url": "functions.html#run_demonstration"
  },
  {
    "type": "function",
    "name": "run",
    "full_name": "tutorials.quantum.run",
    "module": "tutorials.quantum",
    "description": "Run comprehensive assessment.",
    "url": "functions.html#run"
  },
  {
    "type": "function",
    "name": "display",
    "full_name": "tutorials.quantum.display",
    "module": "tutorials.quantum",
    "description": "Display the exercise launcher.",
    "url": "functions.html#display"
  },
  {
    "type": "function",
    "name": "evaluate_energy",
    "full_name": "tutorials.quantum.evaluate_energy",
    "module": "tutorials.quantum",
    "description": "Evaluate energy for given parameters.",
    "url": "functions.html#evaluate_energy"
  },
  {
    "type": "function",
    "name": "run_optimization",
    "full_name": "tutorials.quantum.run_optimization",
    "module": "tutorials.quantum",
    "description": "Run VQE optimization.",
    "url": "functions.html#run_optimization"
  },
  {
    "type": "function",
    "name": "analyze_molecule",
    "full_name": "tutorials.quantum.analyze_molecule",
    "module": "tutorials.quantum",
    "description": "Analyze a specific molecule.",
    "url": "functions.html#analyze_molecule"
  },
  {
    "type": "function",
    "name": "display_dashboard",
    "full_name": "tutorials.quantum.display_dashboard",
    "module": "tutorials.quantum",
    "description": "Display the interactive dashboard.",
    "url": "functions.html#display_dashboard"
  },
  {
    "type": "function",
    "name": "analyze_final_state",
    "full_name": "tutorials.quantum.analyze_final_state",
    "module": "tutorials.quantum",
    "description": "Analyze the final optimized quantum state.",
    "url": "functions.html#analyze_final_state"
  },
  {
    "type": "function",
    "name": "display_interactive_visualization",
    "full_name": "tutorials.quantum.display_interactive_visualization",
    "module": "tutorials.quantum",
    "description": "Display interactive state visualization.",
    "url": "functions.html#display_interactive_visualization"
  },
  {
    "type": "function",
    "name": "update_vqe_demo",
    "full_name": "tutorials.quantum.update_vqe_demo",
    "module": "tutorials.quantum",
    "description": "Update VQE demonstration when parameters change.",
    "url": "functions.html#update_vqe_demo"
  },
  {
    "type": "function",
    "name": "visualize_molecules",
    "full_name": "tutorials.utils.visualize_molecules",
    "module": "tutorials.utils",
    "description": "Visualize multiple molecules in a grid layout.\n\nArgs:\n    molecules (Dict[str, str]): Dictionary mapping molecule names to SMILES\n    grid_size (Tuple[int, int]): Grid dimensions (rows, cols)\n    img_",
    "url": "functions.html#visualize_molecules"
  },
  {
    "type": "function",
    "name": "interactive_parameter_tuning",
    "full_name": "tutorials.utils.interactive_parameter_tuning",
    "module": "tutorials.utils",
    "description": "Create interactive parameter tuning interface.\n\nArgs:\n    parameter_ranges (Dict[str, Tuple[float, float]]): Parameter names to (min, max) ranges\n    callback_function (Callable): Function to call whe",
    "url": "functions.html#interactive_parameter_tuning"
  },
  {
    "type": "function",
    "name": "create_progress_dashboard",
    "full_name": "tutorials.utils.create_progress_dashboard",
    "module": "tutorials.utils",
    "description": "Create a comprehensive progress dashboard.\n\nArgs:\n    session_data (List[Dict]): List of session data dictionaries\n    student_id (str): Student identifier\n\nReturns:\n    Progress dashboard visualizati",
    "url": "functions.html#create_progress_dashboard"
  },
  {
    "type": "function",
    "name": "setup_logging",
    "full_name": "tutorials.utils.setup_logging",
    "module": "tutorials.utils",
    "description": "Setup logging for tutorial sessions.\n\nArgs:\n    log_level (str): Logging level (DEBUG, INFO, WARNING, ERROR)\n    log_file (str, optional): Path to log file\n    tutorial_name (str): Name of the tutoria",
    "url": "functions.html#setup_logging"
  },
  {
    "type": "function",
    "name": "create_molecular_property_plot",
    "full_name": "tutorials.utils.create_molecular_property_plot",
    "module": "tutorials.utils",
    "description": "Create molecular property visualization plots.\n\nArgs:\n    molecules (Dict[str, str]): Dictionary of molecule names to SMILES\n    properties (List[str], optional): Properties to calculate and plot\n    ",
    "url": "functions.html#create_molecular_property_plot"
  },
  {
    "type": "function",
    "name": "create_learning_assessment_summary",
    "full_name": "tutorials.utils.create_learning_assessment_summary",
    "module": "tutorials.utils",
    "description": "Create a summary visualization of learning assessment results.\n\nArgs:\n    assessment_results (List[Dict]): List of assessment result dictionaries\n\nReturns:\n    Assessment summary visualization",
    "url": "functions.html#create_learning_assessment_summary"
  },
  {
    "type": "function",
    "name": "create_concept_mastery_heatmap",
    "full_name": "tutorials.utils.create_concept_mastery_heatmap",
    "module": "tutorials.utils",
    "description": "Create a heatmap showing concept mastery over time.\n\nArgs:\n    concept_data (Dict[str, List[float]]): Concept names to lists of scores over time\n\nReturns:\n    Concept mastery heatmap",
    "url": "functions.html#create_concept_mastery_heatmap"
  },
  {
    "type": "function",
    "name": "export_session_data",
    "full_name": "tutorials.utils.export_session_data",
    "module": "tutorials.utils",
    "description": "Export session data to JSON file.\n\nArgs:\n    session_data (List[Dict]): Session data to export\n    filename (str, optional): Output filename\n\nReturns:\n    str: Path to exported file",
    "url": "functions.html#export_session_data"
  },
  {
    "type": "function",
    "name": "load_session_data",
    "full_name": "tutorials.utils.load_session_data",
    "module": "tutorials.utils",
    "description": "Load session data from JSON file.\n\nArgs:\n    filename (str): Path to JSON file\n\nReturns:\n    List[Dict]: Loaded session data",
    "url": "functions.html#load_session_data"
  },
  {
    "type": "function",
    "name": "lipinski_analysis",
    "full_name": "tutorials.utils.lipinski_analysis",
    "module": "tutorials.utils",
    "description": "Perform enhanced Lipinski's Rule of Five analysis.\n\nArgs:\n    descriptor_data: DataFrame with molecular descriptors\n    molecule_data: DataFrame with molecule information\n    include_explanations: Whe",
    "url": "functions.html#lipinski_analysis"
  },
  {
    "type": "function",
    "name": "create_rule_dashboard",
    "full_name": "tutorials.utils.create_rule_dashboard",
    "module": "tutorials.utils",
    "description": "Create an interactive dashboard for drug-likeness rules.\n\nArgs:\n    lipinski_results: Results from lipinski_analysis\n\nReturns:\n    Interactive dashboard widget",
    "url": "functions.html#create_rule_dashboard"
  },
  {
    "type": "function",
    "name": "similarity_explorer",
    "full_name": "tutorials.utils.similarity_explorer",
    "module": "tutorials.utils",
    "description": "Create an interactive molecular similarity explorer.\n\nArgs:\n    molecules: List of molecule objects\n    reference_molecule: Reference molecule name or SMILES\n    similarity_threshold: Minimum similari",
    "url": "functions.html#similarity_explorer"
  },
  {
    "type": "function",
    "name": "demonstrate_integration",
    "full_name": "tutorials.utils.demonstrate_integration",
    "module": "tutorials.utils",
    "description": "Demonstrate integration between tutorial framework and main ChemML modules.\n\nArgs:\n    tutorial_data: Tutorial dataset object\n    show_core_integration: Whether to show core module integration\n    sho",
    "url": "functions.html#demonstrate_integration"
  },
  {
    "type": "function",
    "name": "update_visualization",
    "full_name": "tutorials.utils.update_visualization",
    "module": "tutorials.utils",
    "description": "Update visualization when parameters change.",
    "url": "functions.html#update_visualization"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "tutorials.utils.__init__",
    "module": "tutorials.utils",
    "description": "",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "display",
    "full_name": "tutorials.utils.display",
    "module": "tutorials.utils",
    "description": "Display the similarity explorer.",
    "url": "functions.html#display"
  },
  {
    "type": "function",
    "name": "create_assessment",
    "full_name": "tutorials.widgets.create_assessment",
    "module": "tutorials.widgets",
    "description": "Create an interactive assessment widget.\n\nArgs:\n    section (str): Tutorial section name\n    concepts (List[str]): List of concepts being assessed\n    questions (List[Dict]): List of question configur",
    "url": "functions.html#create_assessment"
  },
  {
    "type": "function",
    "name": "create_progress_dashboard",
    "full_name": "tutorials.widgets.create_progress_dashboard",
    "module": "tutorials.widgets",
    "description": "Create a progress tracking dashboard.\n\nArgs:\n    student_id (str): Student identifier\n\nReturns:\n    ProgressDashboard: Progress dashboard widget",
    "url": "functions.html#create_progress_dashboard"
  },
  {
    "type": "function",
    "name": "create_molecule_viewer",
    "full_name": "tutorials.widgets.create_molecule_viewer",
    "module": "tutorials.widgets",
    "description": "Create a molecular visualization widget.\n\nArgs:\n    molecules (Dict[str, str]): Dictionary of molecule names to SMILES\n\nReturns:\n    MolecularVisualizationWidget: Molecular visualization widget",
    "url": "functions.html#create_molecule_viewer"
  },
  {
    "type": "function",
    "name": "check_widget_requirements",
    "full_name": "tutorials.widgets.check_widget_requirements",
    "module": "tutorials.widgets",
    "description": "Check if widget requirements are met.\n\nReturns:\n    Dict[str, bool]: Status of widget dependencies",
    "url": "functions.html#check_widget_requirements"
  },
  {
    "type": "function",
    "name": "__init__",
    "full_name": "tutorials.widgets.__init__",
    "module": "tutorials.widgets",
    "description": "Initialize molecular visualization widget.",
    "url": "functions.html#__init__"
  },
  {
    "type": "function",
    "name": "display",
    "full_name": "tutorials.widgets.display",
    "module": "tutorials.widgets",
    "description": "Display the interactive assessment widget.",
    "url": "functions.html#display"
  },
  {
    "type": "function",
    "name": "collect_feedback",
    "full_name": "tutorials.widgets.collect_feedback",
    "module": "tutorials.widgets",
    "description": "Collect user feedback and assessment results.\n\nReturns:\n    Dict[str, Any]: Assessment results and feedback",
    "url": "functions.html#collect_feedback"
  },
  {
    "type": "function",
    "name": "_create_activity_widget",
    "full_name": "tutorials.widgets._create_activity_widget",
    "module": "tutorials.widgets",
    "description": "Create widget for a specific assessment activity.",
    "url": "functions.html#_create_activity_widget"
  },
  {
    "type": "function",
    "name": "_create_multiple_choice",
    "full_name": "tutorials.widgets._create_multiple_choice",
    "module": "tutorials.widgets",
    "description": "Create multiple choice question widget.",
    "url": "functions.html#_create_multiple_choice"
  },
  {
    "type": "function",
    "name": "_create_true_false",
    "full_name": "tutorials.widgets._create_true_false",
    "module": "tutorials.widgets",
    "description": "Create true/false question widget.",
    "url": "functions.html#_create_true_false"
  },
  {
    "type": "function",
    "name": "_create_text_input",
    "full_name": "tutorials.widgets._create_text_input",
    "module": "tutorials.widgets",
    "description": "Create text input question widget.",
    "url": "functions.html#_create_text_input"
  },
  {
    "type": "function",
    "name": "_create_slider",
    "full_name": "tutorials.widgets._create_slider",
    "module": "tutorials.widgets",
    "description": "Create slider question widget.",
    "url": "functions.html#_create_slider"
  },
  {
    "type": "function",
    "name": "_update_progress",
    "full_name": "tutorials.widgets._update_progress",
    "module": "tutorials.widgets",
    "description": "Update progress bar based on completed responses.",
    "url": "functions.html#_update_progress"
  },
  {
    "type": "function",
    "name": "_on_submit",
    "full_name": "tutorials.widgets._on_submit",
    "module": "tutorials.widgets",
    "description": "Handle assessment submission.",
    "url": "functions.html#_on_submit"
  },
  {
    "type": "function",
    "name": "_display_fallback",
    "full_name": "tutorials.widgets._display_fallback",
    "module": "tutorials.widgets",
    "description": "Display fallback assessment when widgets are not available.",
    "url": "functions.html#_display_fallback"
  },
  {
    "type": "function",
    "name": "add_session_data",
    "full_name": "tutorials.widgets.add_session_data",
    "module": "tutorials.widgets",
    "description": "Add data from a completed tutorial session.",
    "url": "functions.html#add_session_data"
  },
  {
    "type": "function",
    "name": "create_time_tracking_plot",
    "full_name": "tutorials.widgets.create_time_tracking_plot",
    "module": "tutorials.widgets",
    "description": "Create time tracking visualization.",
    "url": "functions.html#create_time_tracking_plot"
  },
  {
    "type": "function",
    "name": "create_concept_mastery_radar",
    "full_name": "tutorials.widgets.create_concept_mastery_radar",
    "module": "tutorials.widgets",
    "description": "Create concept mastery radar chart.",
    "url": "functions.html#create_concept_mastery_radar"
  },
  {
    "type": "function",
    "name": "create_daily_comparison",
    "full_name": "tutorials.widgets.create_daily_comparison",
    "module": "tutorials.widgets",
    "description": "Create daily progress comparison chart.",
    "url": "functions.html#create_daily_comparison"
  },
  {
    "type": "function",
    "name": "display_summary_stats",
    "full_name": "tutorials.widgets.display_summary_stats",
    "module": "tutorials.widgets",
    "description": "Display summary statistics.",
    "url": "functions.html#display_summary_stats"
  },
  {
    "type": "function",
    "name": "_create_plotly_time_plot",
    "full_name": "tutorials.widgets._create_plotly_time_plot",
    "module": "tutorials.widgets",
    "description": "Create time tracking plot using Plotly.",
    "url": "functions.html#_create_plotly_time_plot"
  },
  {
    "type": "function",
    "name": "_create_matplotlib_time_plot",
    "full_name": "tutorials.widgets._create_matplotlib_time_plot",
    "module": "tutorials.widgets",
    "description": "Create time tracking plot using Matplotlib.",
    "url": "functions.html#_create_matplotlib_time_plot"
  },
  {
    "type": "function",
    "name": "_create_plotly_radar",
    "full_name": "tutorials.widgets._create_plotly_radar",
    "module": "tutorials.widgets",
    "description": "Create concept mastery radar chart using Plotly.",
    "url": "functions.html#_create_plotly_radar"
  },
  {
    "type": "function",
    "name": "_create_matplotlib_radar",
    "full_name": "tutorials.widgets._create_matplotlib_radar",
    "module": "tutorials.widgets",
    "description": "Create concept mastery radar chart using Matplotlib.",
    "url": "functions.html#_create_matplotlib_radar"
  },
  {
    "type": "function",
    "name": "_create_plotly_comparison",
    "full_name": "tutorials.widgets._create_plotly_comparison",
    "module": "tutorials.widgets",
    "description": "Create daily comparison chart using Plotly.",
    "url": "functions.html#_create_plotly_comparison"
  },
  {
    "type": "function",
    "name": "_create_matplotlib_comparison",
    "full_name": "tutorials.widgets._create_matplotlib_comparison",
    "module": "tutorials.widgets",
    "description": "Create daily comparison chart using Matplotlib.",
    "url": "functions.html#_create_matplotlib_comparison"
  },
  {
    "type": "function",
    "name": "add_molecule",
    "full_name": "tutorials.widgets.add_molecule",
    "module": "tutorials.widgets",
    "description": "Add a molecule to the visualization widget.",
    "url": "functions.html#add_molecule"
  },
  {
    "type": "function",
    "name": "create_molecule_selector",
    "full_name": "tutorials.widgets.create_molecule_selector",
    "module": "tutorials.widgets",
    "description": "Create interactive molecule selector widget.",
    "url": "functions.html#create_molecule_selector"
  },
  {
    "type": "function",
    "name": "visualize_molecule",
    "full_name": "tutorials.widgets.visualize_molecule",
    "module": "tutorials.widgets",
    "description": "Visualize a specific molecule.",
    "url": "functions.html#visualize_molecule"
  },
  {
    "type": "function",
    "name": "create_property_comparison",
    "full_name": "tutorials.widgets.create_property_comparison",
    "module": "tutorials.widgets",
    "description": "Create interactive property comparison widget.",
    "url": "functions.html#create_property_comparison"
  },
  {
    "type": "function",
    "name": "_display_molecule_list",
    "full_name": "tutorials.widgets._display_molecule_list",
    "module": "tutorials.widgets",
    "description": "Display molecule list as fallback.",
    "url": "functions.html#_display_molecule_list"
  },
  {
    "type": "function",
    "name": "_create_plotly_property_comparison",
    "full_name": "tutorials.widgets._create_plotly_property_comparison",
    "module": "tutorials.widgets",
    "description": "Create property comparison using Plotly.",
    "url": "functions.html#_create_plotly_property_comparison"
  },
  {
    "type": "function",
    "name": "_create_matplotlib_property_comparison",
    "full_name": "tutorials.widgets._create_matplotlib_property_comparison",
    "module": "tutorials.widgets",
    "description": "Create property comparison using Matplotlib.",
    "url": "functions.html#_create_matplotlib_property_comparison"
  },
  {
    "type": "function",
    "name": "on_change",
    "full_name": "tutorials.widgets.on_change",
    "module": "tutorials.widgets",
    "description": "",
    "url": "functions.html#on_change"
  },
  {
    "type": "function",
    "name": "on_molecule_change",
    "full_name": "tutorials.widgets.on_molecule_change",
    "module": "tutorials.widgets",
    "description": "",
    "url": "functions.html#on_molecule_change"
  },
  {
    "type": "class",
    "name": "WandBConfig",
    "full_name": "core.common.config.WandBConfig",
    "module": "core.common.config",
    "description": "Configuration for Weights & Biases experiment tracking.",
    "url": "classes.html#WandBConfig"
  },
  {
    "type": "class",
    "name": "ChemMLPaths",
    "full_name": "core.common.config.ChemMLPaths",
    "module": "core.common.config",
    "description": "Standard paths for ChemML data and outputs.",
    "url": "classes.html#ChemMLPaths"
  },
  {
    "type": "class",
    "name": "ChemMLConfig",
    "full_name": "core.common.config.ChemMLConfig",
    "module": "core.common.config",
    "description": "Central configuration for ChemML with environment variable support.",
    "url": "classes.html#ChemMLConfig"
  },
  {
    "type": "class",
    "name": "BaseSettings",
    "full_name": "core.common.config.BaseSettings",
    "module": "core.common.config",
    "description": "",
    "url": "classes.html#BaseSettings"
  },
  {
    "type": "class",
    "name": "Config",
    "full_name": "core.common.config.Config",
    "module": "core.common.config",
    "description": "",
    "url": "classes.html#Config"
  },
  {
    "type": "class",
    "name": "ChemMLError",
    "full_name": "core.common.errors.ChemMLError",
    "module": "core.common.errors",
    "description": "Base exception for ChemML-specific errors.",
    "url": "classes.html#ChemMLError"
  },
  {
    "type": "class",
    "name": "MolecularValidationError",
    "full_name": "core.common.errors.MolecularValidationError",
    "module": "core.common.errors",
    "description": "Error in molecular data validation.",
    "url": "classes.html#MolecularValidationError"
  },
  {
    "type": "class",
    "name": "ModelError",
    "full_name": "core.common.errors.ModelError",
    "module": "core.common.errors",
    "description": "Error in model operations.",
    "url": "classes.html#ModelError"
  },
  {
    "type": "class",
    "name": "DataProcessingError",
    "full_name": "core.common.errors.DataProcessingError",
    "module": "core.common.errors",
    "description": "Error in data processing operations.",
    "url": "classes.html#DataProcessingError"
  },
  {
    "type": "class",
    "name": "ConfigurationError",
    "full_name": "core.common.errors.ConfigurationError",
    "module": "core.common.errors",
    "description": "Error in configuration setup.",
    "url": "classes.html#ConfigurationError"
  },
  {
    "type": "class",
    "name": "RetryableError",
    "full_name": "core.common.errors.RetryableError",
    "module": "core.common.errors",
    "description": "Exception that indicates an operation should be retried.",
    "url": "classes.html#RetryableError"
  },
  {
    "type": "class",
    "name": "PerformanceMetrics",
    "full_name": "core.common.performance.PerformanceMetrics",
    "module": "core.common.performance",
    "description": "Container for performance metrics.",
    "url": "classes.html#PerformanceMetrics"
  },
  {
    "type": "class",
    "name": "PerformanceMonitor",
    "full_name": "core.common.performance.PerformanceMonitor",
    "module": "core.common.performance",
    "description": "Global performance monitoring singleton.",
    "url": "classes.html#PerformanceMonitor"
  },
  {
    "type": "class",
    "name": "MolecularDataProcessor",
    "full_name": "core.data.MolecularDataProcessor",
    "module": "core.data",
    "description": "Comprehensive molecular data processing pipeline.\n\nHandles SMILES validation, molecular standardization, and dataset preparation.",
    "url": "classes.html#MolecularDataProcessor"
  },
  {
    "type": "class",
    "name": "DataSplitter",
    "full_name": "core.data.DataSplitter",
    "module": "core.data",
    "description": "Advanced data splitting strategies for molecular datasets.\n\nProvides various splitting methods including scaffold-based splits\nfor avoiding data leakage in drug discovery applications.",
    "url": "classes.html#DataSplitter"
  },
  {
    "type": "class",
    "name": "FeatureScaler",
    "full_name": "core.data.FeatureScaler",
    "module": "core.data",
    "description": "Feature scaling utilities for molecular descriptors and fingerprints.",
    "url": "classes.html#FeatureScaler"
  },
  {
    "type": "class",
    "name": "DataProcessor",
    "full_name": "core.data.DataProcessor",
    "module": "core.data",
    "description": "General data processing utilities for ChemML workflows.\n\nProvides common data processing operations for molecular and chemical data.",
    "url": "classes.html#DataProcessor"
  },
  {
    "type": "class",
    "name": "LegacyModuleWrapper",
    "full_name": "core.data.LegacyModuleWrapper",
    "module": "core.data",
    "description": "Wrapper for legacy ChemML modules to ensure backward compatibility.\n\nProvides a compatibility layer for older ChemML modules while transitioning\nto the new hybrid architecture.",
    "url": "classes.html#LegacyModuleWrapper"
  },
  {
    "type": "class",
    "name": "RegressionEvaluator",
    "full_name": "core.evaluation.RegressionEvaluator",
    "module": "core.evaluation",
    "description": "Comprehensive evaluation for regression tasks.\n\nProvides standard regression metrics plus chemistry-specific evaluations.",
    "url": "classes.html#RegressionEvaluator"
  },
  {
    "type": "class",
    "name": "ClassificationEvaluator",
    "full_name": "core.evaluation.ClassificationEvaluator",
    "module": "core.evaluation",
    "description": "Comprehensive evaluation for classification tasks.",
    "url": "classes.html#ClassificationEvaluator"
  },
  {
    "type": "class",
    "name": "ModelComparator",
    "full_name": "core.evaluation.ModelComparator",
    "module": "core.evaluation",
    "description": "Compare multiple models using various evaluation strategies.",
    "url": "classes.html#ModelComparator"
  },
  {
    "type": "class",
    "name": "BaseFeaturizer",
    "full_name": "core.featurizers.BaseFeaturizer",
    "module": "core.featurizers",
    "description": "Abstract base class for molecular featurizers.",
    "url": "classes.html#BaseFeaturizer"
  },
  {
    "type": "class",
    "name": "MorganFingerprint",
    "full_name": "core.featurizers.MorganFingerprint",
    "module": "core.featurizers",
    "description": "Modern Morgan fingerprint implementation using latest RDKit APIs.\n\nThis eliminates the deprecation warnings from DeepChem's implementation.",
    "url": "classes.html#MorganFingerprint"
  },
  {
    "type": "class",
    "name": "DescriptorCalculator",
    "full_name": "core.featurizers.DescriptorCalculator",
    "module": "core.featurizers",
    "description": "Modern molecular descriptor calculator using latest RDKit APIs.\n\nCalculates a comprehensive set of molecular descriptors with proper\nerror handling and modern API usage.",
    "url": "classes.html#DescriptorCalculator"
  },
  {
    "type": "class",
    "name": "ECFPFingerprint",
    "full_name": "core.featurizers.ECFPFingerprint",
    "module": "core.featurizers",
    "description": "Modern ECFP (Extended Connectivity Fingerprint) implementation.\n\nThis is essentially equivalent to Morgan fingerprints but with\nthe traditional ECFP naming convention.",
    "url": "classes.html#ECFPFingerprint"
  },
  {
    "type": "class",
    "name": "CombinedFeaturizer",
    "full_name": "core.featurizers.CombinedFeaturizer",
    "module": "core.featurizers",
    "description": "Combines multiple featurizers into a single feature vector.\n\nThis allows you to easily combine fingerprints and descriptors.",
    "url": "classes.html#CombinedFeaturizer"
  },
  {
    "type": "class",
    "name": "CustomRDKitFeaturizer",
    "full_name": "core.featurizers.CustomRDKitFeaturizer",
    "module": "core.featurizers",
    "description": "Custom RDKit featurizer combining multiple molecular features.\n\nA comprehensive featurizer that combines fingerprints and descriptors\nto provide a rich representation of molecular properties.",
    "url": "classes.html#CustomRDKitFeaturizer"
  },
  {
    "type": "class",
    "name": "HybridMolecularFeaturizer",
    "full_name": "core.featurizers.HybridMolecularFeaturizer",
    "module": "core.featurizers",
    "description": "Hybrid molecular featurizer combining RDKit and DeepChem features.\n\nThis featurizer implements the hybrid architecture approach, combining:\n- Custom RDKit features (Morgan fingerprints, molecular desc",
    "url": "classes.html#HybridMolecularFeaturizer"
  },
  {
    "type": "class",
    "name": "BaseModel",
    "full_name": "core.models.BaseModel",
    "module": "core.models",
    "description": "Abstract base class for all ChemML models.",
    "url": "classes.html#BaseModel"
  },
  {
    "type": "class",
    "name": "LinearModel",
    "full_name": "core.models.LinearModel",
    "module": "core.models",
    "description": "Linear regression models with regularization options.\n\nSupports standard linear regression, Ridge, and Lasso regularization.",
    "url": "classes.html#LinearModel"
  },
  {
    "type": "class",
    "name": "RandomForestModel",
    "full_name": "core.models.RandomForestModel",
    "module": "core.models",
    "description": "Random Forest model for regression and classification tasks.\n\nProvides excellent baseline performance for molecular property prediction.",
    "url": "classes.html#RandomForestModel"
  },
  {
    "type": "class",
    "name": "SVMModel",
    "full_name": "core.models.SVMModel",
    "module": "core.models",
    "description": "Support Vector Machine for regression and classification.\n\nGood for non-linear relationships in molecular data.",
    "url": "classes.html#SVMModel"
  },
  {
    "type": "class",
    "name": "NeuralNetwork",
    "full_name": "core.models.NeuralNetwork",
    "module": "core.models",
    "description": "Feed-forward neural network for molecular property prediction.",
    "url": "classes.html#NeuralNetwork"
  },
  {
    "type": "class",
    "name": "PerformanceDashboard",
    "full_name": "core.monitoring.dashboard.PerformanceDashboard",
    "module": "core.monitoring.dashboard",
    "description": "Smart dashboard for ChemML performance monitoring.",
    "url": "classes.html#PerformanceDashboard"
  },
  {
    "type": "class",
    "name": "ProteinPreparationPipeline",
    "full_name": "core.preprocessing.protein_preparation.ProteinPreparationPipeline",
    "module": "core.preprocessing.protein_preparation",
    "description": "Pipeline for preparing protein structures for molecular docking.\n\nThis class handles downloading PDB structures, converting them to PDBQT format,\nand organizing metadata for downstream docking experim",
    "url": "classes.html#ProteinPreparationPipeline"
  },
  {
    "type": "class",
    "name": "ModelRecommendationEngine",
    "full_name": "core.recommendations.ModelRecommendationEngine",
    "module": "core.recommendations",
    "description": "AI-powered model recommendation for molecular ML tasks.",
    "url": "classes.html#ModelRecommendationEngine"
  },
  {
    "type": "class",
    "name": "DataLoader",
    "full_name": "core.utils.io_utils.DataLoader",
    "module": "core.utils.io_utils",
    "description": "Load data from various formats for ChemML workflows",
    "url": "classes.html#DataLoader"
  },
  {
    "type": "class",
    "name": "ResultsExporter",
    "full_name": "core.utils.io_utils.ResultsExporter",
    "module": "core.utils.io_utils",
    "description": "Export results and visualizations",
    "url": "classes.html#ResultsExporter"
  },
  {
    "type": "class",
    "name": "ConfigManager",
    "full_name": "core.utils.io_utils.ConfigManager",
    "module": "core.utils.io_utils",
    "description": "Manage configuration files for experiments",
    "url": "classes.html#ConfigManager"
  },
  {
    "type": "class",
    "name": "FileManager",
    "full_name": "core.utils.io_utils.FileManager",
    "module": "core.utils.io_utils",
    "description": "Manage file operations and directory structure",
    "url": "classes.html#FileManager"
  },
  {
    "type": "class",
    "name": "ClassificationMetrics",
    "full_name": "core.utils.metrics.ClassificationMetrics",
    "module": "core.utils.metrics",
    "description": "Comprehensive classification metrics evaluator.",
    "url": "classes.html#ClassificationMetrics"
  },
  {
    "type": "class",
    "name": "RegressionMetrics",
    "full_name": "core.utils.metrics.RegressionMetrics",
    "module": "core.utils.metrics",
    "description": "Comprehensive regression metrics evaluator.",
    "url": "classes.html#RegressionMetrics"
  },
  {
    "type": "class",
    "name": "MolecularMetrics",
    "full_name": "core.utils.metrics.MolecularMetrics",
    "module": "core.utils.metrics",
    "description": "Metrics specific to molecular analysis.",
    "url": "classes.html#MolecularMetrics"
  },
  {
    "type": "class",
    "name": "DatasetSplitter",
    "full_name": "core.utils.ml_utils.DatasetSplitter",
    "module": "core.utils.ml_utils",
    "description": "Split datasets for machine learning workflows",
    "url": "classes.html#DatasetSplitter"
  },
  {
    "type": "class",
    "name": "FeatureScaler",
    "full_name": "core.utils.ml_utils.FeatureScaler",
    "module": "core.utils.ml_utils",
    "description": "Feature scaling utilities",
    "url": "classes.html#FeatureScaler"
  },
  {
    "type": "class",
    "name": "ModelEvaluator",
    "full_name": "core.utils.ml_utils.ModelEvaluator",
    "module": "core.utils.ml_utils",
    "description": "Evaluate machine learning models",
    "url": "classes.html#ModelEvaluator"
  },
  {
    "type": "class",
    "name": "CrossValidator",
    "full_name": "core.utils.ml_utils.CrossValidator",
    "module": "core.utils.ml_utils",
    "description": "Cross-validation utilities",
    "url": "classes.html#CrossValidator"
  },
  {
    "type": "class",
    "name": "ModelPersistence",
    "full_name": "core.utils.ml_utils.ModelPersistence",
    "module": "core.utils.ml_utils",
    "description": "Save and load models with metadata",
    "url": "classes.html#ModelPersistence"
  },
  {
    "type": "class",
    "name": "MolecularDescriptors",
    "full_name": "core.utils.molecular_utils.MolecularDescriptors",
    "module": "core.utils.molecular_utils",
    "description": "Calculate molecular descriptors using RDKit",
    "url": "classes.html#MolecularDescriptors"
  },
  {
    "type": "class",
    "name": "LipinskiFilter",
    "full_name": "core.utils.molecular_utils.LipinskiFilter",
    "module": "core.utils.molecular_utils",
    "description": "Filter molecules based on Lipinski's Rule of Five",
    "url": "classes.html#LipinskiFilter"
  },
  {
    "type": "class",
    "name": "SMILESProcessor",
    "full_name": "core.utils.molecular_utils.SMILESProcessor",
    "module": "core.utils.molecular_utils",
    "description": "Process and manipulate SMILES strings",
    "url": "classes.html#SMILESProcessor"
  },
  {
    "type": "class",
    "name": "MoleculeVisualizer",
    "full_name": "core.utils.molecular_utils.MoleculeVisualizer",
    "module": "core.utils.molecular_utils",
    "description": "Visualize molecules using various methods",
    "url": "classes.html#MoleculeVisualizer"
  },
  {
    "type": "class",
    "name": "StructuralAlerts",
    "full_name": "core.utils.molecular_utils.StructuralAlerts",
    "module": "core.utils.molecular_utils",
    "description": "Check for structural alerts in molecules.",
    "url": "classes.html#StructuralAlerts"
  },
  {
    "type": "class",
    "name": "SimilarityCalculator",
    "full_name": "core.utils.molecular_utils.SimilarityCalculator",
    "module": "core.utils.molecular_utils",
    "description": "Calculate molecular similarity using various metrics.",
    "url": "classes.html#SimilarityCalculator"
  },
  {
    "type": "class",
    "name": "MolecularVisualization",
    "full_name": "core.utils.molecular_utils.MolecularVisualization",
    "module": "core.utils.molecular_utils",
    "description": "Visualize molecules in 2D and 3D.",
    "url": "classes.html#MolecularVisualization"
  },
  {
    "type": "class",
    "name": "QuantumCircuitBuilder",
    "full_name": "core.utils.quantum_utils.QuantumCircuitBuilder",
    "module": "core.utils.quantum_utils",
    "description": "Build quantum circuits for molecular systems",
    "url": "classes.html#QuantumCircuitBuilder"
  },
  {
    "type": "class",
    "name": "VQEOptimizer",
    "full_name": "core.utils.quantum_utils.VQEOptimizer",
    "module": "core.utils.quantum_utils",
    "description": "Variational Quantum Eigensolver for molecular ground state calculation",
    "url": "classes.html#VQEOptimizer"
  },
  {
    "type": "class",
    "name": "MolecularHamiltonian",
    "full_name": "core.utils.quantum_utils.MolecularHamiltonian",
    "module": "core.utils.quantum_utils",
    "description": "Generate molecular Hamiltonians for quantum simulation",
    "url": "classes.html#MolecularHamiltonian"
  },
  {
    "type": "class",
    "name": "QuantumMachineLearning",
    "full_name": "core.utils.quantum_utils.QuantumMachineLearning",
    "module": "core.utils.quantum_utils",
    "description": "Quantum machine learning utilities using PennyLane",
    "url": "classes.html#QuantumMachineLearning"
  },
  {
    "type": "class",
    "name": "MockQuantumCircuit",
    "full_name": "core.utils.quantum_utils.MockQuantumCircuit",
    "module": "core.utils.quantum_utils",
    "description": "",
    "url": "classes.html#MockQuantumCircuit"
  },
  {
    "type": "class",
    "name": "MolecularVisualizer",
    "full_name": "core.utils.visualization.MolecularVisualizer",
    "module": "core.utils.visualization",
    "description": "Visualize molecular structures and properties.",
    "url": "classes.html#MolecularVisualizer"
  },
  {
    "type": "class",
    "name": "ModelVisualizer",
    "full_name": "core.utils.visualization.ModelVisualizer",
    "module": "core.utils.visualization",
    "description": "Visualize model performance and analysis.",
    "url": "classes.html#ModelVisualizer"
  },
  {
    "type": "class",
    "name": "ChemicalSpaceVisualizer",
    "full_name": "core.utils.visualization.ChemicalSpaceVisualizer",
    "module": "core.utils.visualization",
    "description": "Visualize chemical space and molecular similarity.",
    "url": "classes.html#ChemicalSpaceVisualizer"
  },
  {
    "type": "class",
    "name": "DeepChemModelWrapper",
    "full_name": "integrations.deepchem_integration.DeepChemModelWrapper",
    "module": "integrations.deepchem_integration",
    "description": "Wrapper for DeepChem models to provide consistent ChemML interface.",
    "url": "classes.html#DeepChemModelWrapper"
  },
  {
    "type": "class",
    "name": "HybridFeaturizer",
    "full_name": "integrations.deepchem_integration.HybridFeaturizer",
    "module": "integrations.deepchem_integration",
    "description": "Combine ChemML custom featurizers with DeepChem featurizers.",
    "url": "classes.html#HybridFeaturizer"
  },
  {
    "type": "class",
    "name": "PipelineResults",
    "full_name": "integrations.pipeline.PipelineResults",
    "module": "integrations.pipeline",
    "description": "Results from complete drug discovery pipeline.",
    "url": "classes.html#PipelineResults"
  },
  {
    "type": "class",
    "name": "ScreeningResults",
    "full_name": "integrations.pipeline.ScreeningResults",
    "module": "integrations.pipeline",
    "description": "Results from virtual screening.",
    "url": "classes.html#ScreeningResults"
  },
  {
    "type": "class",
    "name": "DrugDiscoveryPipeline",
    "full_name": "integrations.pipeline.DrugDiscoveryPipeline",
    "module": "integrations.pipeline",
    "description": "Complete drug discovery pipeline integrating all ChemML components.",
    "url": "classes.html#DrugDiscoveryPipeline"
  },
  {
    "type": "class",
    "name": "MolecularGCN",
    "full_name": "research.advanced_models.MolecularGCN",
    "module": "research.advanced_models",
    "description": "Graph Convolutional Network for molecular property prediction.\n\nUses graph convolutions to learn from molecular structure.",
    "url": "classes.html#MolecularGCN"
  },
  {
    "type": "class",
    "name": "MolecularGAT",
    "full_name": "research.advanced_models.MolecularGAT",
    "module": "research.advanced_models",
    "description": "Graph Attention Network for molecular property prediction.\n\nUses attention mechanisms to focus on important molecular substructures.",
    "url": "classes.html#MolecularGAT"
  },
  {
    "type": "class",
    "name": "MolecularTransformer",
    "full_name": "research.advanced_models.MolecularTransformer",
    "module": "research.advanced_models",
    "description": "Transformer model for SMILES sequence processing.\n\nUses self-attention to capture long-range dependencies in molecular sequences.",
    "url": "classes.html#MolecularTransformer"
  },
  {
    "type": "class",
    "name": "MultiTaskMolecularModel",
    "full_name": "research.advanced_models.MultiTaskMolecularModel",
    "module": "research.advanced_models",
    "description": "Multi-task learning model for molecular property prediction.\n\nPredicts multiple molecular properties simultaneously with shared representations.",
    "url": "classes.html#MultiTaskMolecularModel"
  },
  {
    "type": "class",
    "name": "MetaLearningModel",
    "full_name": "research.advanced_models.MetaLearningModel",
    "module": "research.advanced_models",
    "description": "Meta-learning model for few-shot molecular property prediction.\n\nUses Model-Agnostic Meta-Learning (MAML) for rapid adaptation to new properties.",
    "url": "classes.html#MetaLearningModel"
  },
  {
    "type": "class",
    "name": "AttentionMolecularModel",
    "full_name": "research.advanced_models.AttentionMolecularModel",
    "module": "research.advanced_models",
    "description": "Molecular model with attention mechanisms for interpretability.\n\nProvides attention weights to understand which molecular features are important.",
    "url": "classes.html#AttentionMolecularModel"
  },
  {
    "type": "class",
    "name": "PatientStratificationEngine",
    "full_name": "research.clinical_research.PatientStratificationEngine",
    "module": "research.clinical_research",
    "description": "Advanced patient stratification for clinical trials.\n\nProvides sophisticated algorithms for identifying patient subgroups\nbased on genomic, clinical, and molecular data.",
    "url": "classes.html#PatientStratificationEngine"
  },
  {
    "type": "class",
    "name": "ClinicalTrialOptimizer",
    "full_name": "research.clinical_research.ClinicalTrialOptimizer",
    "module": "research.clinical_research",
    "description": "Clinical trial optimization and design assistant.\n\nProvides tools for optimizing trial design, sample size calculation,\nand endpoint selection.",
    "url": "classes.html#ClinicalTrialOptimizer"
  },
  {
    "type": "class",
    "name": "RegulatoryComplianceFramework",
    "full_name": "research.clinical_research.RegulatoryComplianceFramework",
    "module": "research.clinical_research",
    "description": "Regulatory compliance framework for AI in clinical research.\n\nProvides tools for ensuring regulatory compliance, documentation,\nand validation of AI models in clinical settings.",
    "url": "classes.html#RegulatoryComplianceFramework"
  },
  {
    "type": "class",
    "name": "ADMETPredictor",
    "full_name": "research.drug_discovery.admet.ADMETPredictor",
    "module": "research.drug_discovery.admet",
    "description": "Predict ADMET properties using simple rule-based and ML approaches.",
    "url": "classes.html#ADMETPredictor"
  },
  {
    "type": "class",
    "name": "DrugLikenessAssessor",
    "full_name": "research.drug_discovery.admet.DrugLikenessAssessor",
    "module": "research.drug_discovery.admet",
    "description": "Assess drug-likeness of molecules using various filters and metrics.",
    "url": "classes.html#DrugLikenessAssessor"
  },
  {
    "type": "class",
    "name": "ToxicityPredictor",
    "full_name": "research.drug_discovery.admet.ToxicityPredictor",
    "module": "research.drug_discovery.admet",
    "description": "Predict various toxicity endpoints for molecules.",
    "url": "classes.html#ToxicityPredictor"
  },
  {
    "type": "class",
    "name": "DockingResult",
    "full_name": "research.drug_discovery.docking.DockingResult",
    "module": "research.drug_discovery.docking",
    "description": "Results from molecular docking simulation.",
    "url": "classes.html#DockingResult"
  },
  {
    "type": "class",
    "name": "TargetAnalysis",
    "full_name": "research.drug_discovery.docking.TargetAnalysis",
    "module": "research.drug_discovery.docking",
    "description": "Comprehensive protein target analysis results.",
    "url": "classes.html#TargetAnalysis"
  },
  {
    "type": "class",
    "name": "ProteinAnalyzer",
    "full_name": "research.drug_discovery.docking.ProteinAnalyzer",
    "module": "research.drug_discovery.docking",
    "description": "Analyze protein structures for drug design.",
    "url": "classes.html#ProteinAnalyzer"
  },
  {
    "type": "class",
    "name": "DockingResults",
    "full_name": "research.drug_discovery.docking.DockingResults",
    "module": "research.drug_discovery.docking",
    "description": "Container for molecular docking results.",
    "url": "classes.html#DockingResults"
  },
  {
    "type": "class",
    "name": "MolecularDocker",
    "full_name": "research.drug_discovery.docking.MolecularDocker",
    "module": "research.drug_discovery.docking",
    "description": "Molecular docking simulation engine.",
    "url": "classes.html#MolecularDocker"
  },
  {
    "type": "class",
    "name": "BindingSitePredictor",
    "full_name": "research.drug_discovery.docking.BindingSitePredictor",
    "module": "research.drug_discovery.docking",
    "description": "Predict and analyze protein binding sites.",
    "url": "classes.html#BindingSitePredictor"
  },
  {
    "type": "class",
    "name": "OptimizedCompound",
    "full_name": "research.drug_discovery.docking.OptimizedCompound",
    "module": "research.drug_discovery.docking",
    "description": "Optimized compound from SBDD.",
    "url": "classes.html#OptimizedCompound"
  },
  {
    "type": "class",
    "name": "OptimizationResults",
    "full_name": "research.drug_discovery.docking.OptimizationResults",
    "module": "research.drug_discovery.docking",
    "description": "Results from structure-based drug design optimization.",
    "url": "classes.html#OptimizationResults"
  },
  {
    "type": "class",
    "name": "SBDDOptimizer",
    "full_name": "research.drug_discovery.docking.SBDDOptimizer",
    "module": "research.drug_discovery.docking",
    "description": "Structure-based drug design optimization engine.",
    "url": "classes.html#SBDDOptimizer"
  },
  {
    "type": "class",
    "name": "MolecularGenerator",
    "full_name": "research.drug_discovery.generation.MolecularGenerator",
    "module": "research.drug_discovery.generation",
    "description": "Generate novel molecular structures using various strategies.",
    "url": "classes.html#MolecularGenerator"
  },
  {
    "type": "class",
    "name": "FragmentBasedGenerator",
    "full_name": "research.drug_discovery.generation.FragmentBasedGenerator",
    "module": "research.drug_discovery.generation",
    "description": "Generate molecules using fragment-based approaches.",
    "url": "classes.html#FragmentBasedGenerator"
  },
  {
    "type": "class",
    "name": "MolecularOptimizer",
    "full_name": "research.drug_discovery.molecular_optimization.MolecularOptimizer",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Base class for molecular optimization strategies.",
    "url": "classes.html#MolecularOptimizer"
  },
  {
    "type": "class",
    "name": "BayesianOptimizer",
    "full_name": "research.drug_discovery.molecular_optimization.BayesianOptimizer",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Bayesian optimization for molecular design.",
    "url": "classes.html#BayesianOptimizer"
  },
  {
    "type": "class",
    "name": "GeneticAlgorithmOptimizer",
    "full_name": "research.drug_discovery.molecular_optimization.GeneticAlgorithmOptimizer",
    "module": "research.drug_discovery.molecular_optimization",
    "description": "Genetic algorithm optimization for molecular design.",
    "url": "classes.html#GeneticAlgorithmOptimizer"
  },
  {
    "type": "class",
    "name": "MolecularOptimizer",
    "full_name": "research.drug_discovery.optimization.MolecularOptimizer",
    "module": "research.drug_discovery.optimization",
    "description": "Base class for molecular optimization strategies.",
    "url": "classes.html#MolecularOptimizer"
  },
  {
    "type": "class",
    "name": "BayesianOptimizer",
    "full_name": "research.drug_discovery.optimization.BayesianOptimizer",
    "module": "research.drug_discovery.optimization",
    "description": "Bayesian optimization for molecular design.",
    "url": "classes.html#BayesianOptimizer"
  },
  {
    "type": "class",
    "name": "GeneticAlgorithmOptimizer",
    "full_name": "research.drug_discovery.optimization.GeneticAlgorithmOptimizer",
    "module": "research.drug_discovery.optimization",
    "description": "Genetic algorithm optimization for molecular design.",
    "url": "classes.html#GeneticAlgorithmOptimizer"
  },
  {
    "type": "class",
    "name": "MolecularPropertyPredictor",
    "full_name": "research.drug_discovery.properties.MolecularPropertyPredictor",
    "module": "research.drug_discovery.properties",
    "description": "Predict various molecular properties relevant to drug discovery.",
    "url": "classes.html#MolecularPropertyPredictor"
  },
  {
    "type": "class",
    "name": "TrainedPropertyModel",
    "full_name": "research.drug_discovery.properties.TrainedPropertyModel",
    "module": "research.drug_discovery.properties",
    "description": "Wrapper class for trained property prediction models.",
    "url": "classes.html#TrainedPropertyModel"
  },
  {
    "type": "class",
    "name": "DescriptorCalculator",
    "full_name": "research.drug_discovery.qsar.DescriptorCalculator",
    "module": "research.drug_discovery.qsar",
    "description": "Calculate molecular descriptors for QSAR modeling",
    "url": "classes.html#DescriptorCalculator"
  },
  {
    "type": "class",
    "name": "QSARModel",
    "full_name": "research.drug_discovery.qsar.QSARModel",
    "module": "research.drug_discovery.qsar",
    "description": "QSAR model builder and evaluator",
    "url": "classes.html#QSARModel"
  },
  {
    "type": "class",
    "name": "ActivityPredictor",
    "full_name": "research.drug_discovery.qsar.ActivityPredictor",
    "module": "research.drug_discovery.qsar",
    "description": "Predict biological activity using QSAR models",
    "url": "classes.html#ActivityPredictor"
  },
  {
    "type": "class",
    "name": "TrainedQSARModel",
    "full_name": "research.drug_discovery.qsar.TrainedQSARModel",
    "module": "research.drug_discovery.qsar",
    "description": "Wrapper class for trained QSAR models.",
    "url": "classes.html#TrainedQSARModel"
  },
  {
    "type": "class",
    "name": "VirtualScreener",
    "full_name": "research.drug_discovery.screening.VirtualScreener",
    "module": "research.drug_discovery.screening",
    "description": "Main virtual screening class for compound library filtering and ranking.\n\nThis class provides a unified interface for different virtual screening\napproaches including similarity-based, pharmacophore-b",
    "url": "classes.html#VirtualScreener"
  },
  {
    "type": "class",
    "name": "SimilarityScreener",
    "full_name": "research.drug_discovery.screening.SimilarityScreener",
    "module": "research.drug_discovery.screening",
    "description": "Similarity-based virtual screening using molecular fingerprints.",
    "url": "classes.html#SimilarityScreener"
  },
  {
    "type": "class",
    "name": "PharmacophoreScreener",
    "full_name": "research.drug_discovery.screening.PharmacophoreScreener",
    "module": "research.drug_discovery.screening",
    "description": "Pharmacophore-based virtual screening.\n\nNote: This is a simplified implementation. Full pharmacophore screening\nwould require specialized software like RDKit's pharmacophore features\nor external tools",
    "url": "classes.html#PharmacophoreScreener"
  },
  {
    "type": "class",
    "name": "EnvironmentalMonitoringSystem",
    "full_name": "research.environmental_chemistry.EnvironmentalMonitoringSystem",
    "module": "research.environmental_chemistry",
    "description": "AI-powered environmental monitoring system for real-time analysis\nof air quality, water quality, and soil contamination.",
    "url": "classes.html#EnvironmentalMonitoringSystem"
  },
  {
    "type": "class",
    "name": "GreenChemistryOptimizer",
    "full_name": "research.environmental_chemistry.GreenChemistryOptimizer",
    "module": "research.environmental_chemistry",
    "description": "AI system for optimizing green chemistry processes and reducing\nenvironmental impact of chemical reactions.",
    "url": "classes.html#GreenChemistryOptimizer"
  },
  {
    "type": "class",
    "name": "AtmosphericChemistryAnalyzer",
    "full_name": "research.environmental_chemistry.AtmosphericChemistryAnalyzer",
    "module": "research.environmental_chemistry",
    "description": "Advanced AI system for analyzing atmospheric chemistry data,\nincluding trace gas analysis and air quality forecasting.",
    "url": "classes.html#AtmosphericChemistryAnalyzer"
  },
  {
    "type": "class",
    "name": "MolecularOptimizer",
    "full_name": "research.generative.MolecularOptimizer",
    "module": "research.generative",
    "description": "Optimize molecular properties using reinforcement learning.\n\nUses a pre-trained generative model and optimizes for desired properties\nusing policy gradient methods.",
    "url": "classes.html#MolecularOptimizer"
  },
  {
    "type": "class",
    "name": "MolecularDataset",
    "full_name": "research.generative.MolecularDataset",
    "module": "research.generative",
    "description": "Dataset for molecular SMILES and properties.",
    "url": "classes.html#MolecularDataset"
  },
  {
    "type": "class",
    "name": "MolecularVAE",
    "full_name": "research.generative.MolecularVAE",
    "module": "research.generative",
    "description": "Variational Autoencoder for molecular generation.\n\nEncodes SMILES strings into a continuous latent space and\ngenerates new molecules by sampling from this space.",
    "url": "classes.html#MolecularVAE"
  },
  {
    "type": "class",
    "name": "ConditionalVAE",
    "full_name": "research.generative.ConditionalVAE",
    "module": "research.generative",
    "description": "Conditional VAE for property-guided molecular generation.\n\nExtends MolecularVAE to condition generation on desired properties.",
    "url": "classes.html#ConditionalVAE"
  },
  {
    "type": "class",
    "name": "MolecularGAN",
    "full_name": "research.generative.MolecularGAN",
    "module": "research.generative",
    "description": "Generative Adversarial Network for molecular generation.\n\nUses adversarial training to generate realistic molecular structures.",
    "url": "classes.html#MolecularGAN"
  },
  {
    "type": "class",
    "name": "Generator",
    "full_name": "research.generative.Generator",
    "module": "research.generative",
    "description": "",
    "url": "classes.html#Generator"
  },
  {
    "type": "class",
    "name": "Discriminator",
    "full_name": "research.generative.Discriminator",
    "module": "research.generative",
    "description": "",
    "url": "classes.html#Discriminator"
  },
  {
    "type": "class",
    "name": "MaterialsPropertyPredictor",
    "full_name": "research.materials_discovery.MaterialsPropertyPredictor",
    "module": "research.materials_discovery",
    "description": "AI-powered system for predicting materials properties from composition\nand structure descriptors.",
    "url": "classes.html#MaterialsPropertyPredictor"
  },
  {
    "type": "class",
    "name": "InverseMaterialsDesigner",
    "full_name": "research.materials_discovery.InverseMaterialsDesigner",
    "module": "research.materials_discovery",
    "description": "AI system for inverse materials design - designing materials with\ntarget properties using optimization algorithms.",
    "url": "classes.html#InverseMaterialsDesigner"
  },
  {
    "type": "class",
    "name": "GenerativeMaterialsModel",
    "full_name": "research.materials_discovery.GenerativeMaterialsModel",
    "module": "research.materials_discovery",
    "description": "Generative deep learning model for creating new materials compositions\nusing variational autoencoder (VAE) architecture.",
    "url": "classes.html#GenerativeMaterialsModel"
  },
  {
    "type": "class",
    "name": "MaterialsClusterAnalyzer",
    "full_name": "research.materials_discovery.MaterialsClusterAnalyzer",
    "module": "research.materials_discovery",
    "description": "AI system for discovering materials families and clusters\nin high-dimensional property space.",
    "url": "classes.html#MaterialsClusterAnalyzer"
  },
  {
    "type": "class",
    "name": "QuantumAlgorithmBase",
    "full_name": "research.modern_quantum.QuantumAlgorithmBase",
    "module": "research.modern_quantum",
    "description": "Base class for quantum algorithms using modern Qiskit 2.0+ primitives",
    "url": "classes.html#QuantumAlgorithmBase"
  },
  {
    "type": "class",
    "name": "ModernVQE",
    "full_name": "research.modern_quantum.ModernVQE",
    "module": "research.modern_quantum",
    "description": "Modern Variational Quantum Eigensolver using Qiskit 2.0+ primitives.\n\nThis implementation uses StatevectorEstimator for expectation value calculations\nand provides a clean interface for molecular grou",
    "url": "classes.html#ModernVQE"
  },
  {
    "type": "class",
    "name": "ModernQAOA",
    "full_name": "research.modern_quantum.ModernQAOA",
    "module": "research.modern_quantum",
    "description": "Modern Quantum Approximate Optimization Algorithm using Qiskit 2.0+ primitives.",
    "url": "classes.html#ModernQAOA"
  },
  {
    "type": "class",
    "name": "QuantumFeatureMap",
    "full_name": "research.modern_quantum.QuantumFeatureMap",
    "module": "research.modern_quantum",
    "description": "Modern quantum feature mapping for machine learning applications.",
    "url": "classes.html#QuantumFeatureMap"
  },
  {
    "type": "class",
    "name": "MolecularHamiltonianBuilder",
    "full_name": "research.modern_quantum.MolecularHamiltonianBuilder",
    "module": "research.modern_quantum",
    "description": "Build molecular Hamiltonians for quantum chemistry calculations.",
    "url": "classes.html#MolecularHamiltonianBuilder"
  },
  {
    "type": "class",
    "name": "HardwareEfficientAnsatz",
    "full_name": "research.modern_quantum.HardwareEfficientAnsatz",
    "module": "research.modern_quantum",
    "description": "Hardware-efficient ansatz circuits for VQE.",
    "url": "classes.html#HardwareEfficientAnsatz"
  },
  {
    "type": "class",
    "name": "QuantumChemistryWorkflow",
    "full_name": "research.modern_quantum.QuantumChemistryWorkflow",
    "module": "research.modern_quantum",
    "description": "Complete workflow for quantum chemistry calculations.",
    "url": "classes.html#QuantumChemistryWorkflow"
  },
  {
    "type": "class",
    "name": "QuantumMolecularEncoder",
    "full_name": "research.quantum.QuantumMolecularEncoder",
    "module": "research.quantum",
    "description": "Encode molecular information into quantum circuits.\n\nMaps molecular features to quantum states for quantum ML applications.",
    "url": "classes.html#QuantumMolecularEncoder"
  },
  {
    "type": "class",
    "name": "QuantumNeuralNetwork",
    "full_name": "research.quantum.QuantumNeuralNetwork",
    "module": "research.quantum",
    "description": "Quantum Neural Network implementation for molecular property prediction.\n\nCombines quantum circuits with classical neural networks.",
    "url": "classes.html#QuantumNeuralNetwork"
  },
  {
    "type": "class",
    "name": "QuantumChemistrySimulator",
    "full_name": "research.quantum.QuantumChemistrySimulator",
    "module": "research.quantum",
    "description": "Quantum chemistry simulation using quantum computing.\n\nProvides tools for simulating molecular systems on quantum computers.",
    "url": "classes.html#QuantumChemistrySimulator"
  },
  {
    "type": "class",
    "name": "HybridQuantumClassical",
    "full_name": "research.quantum.HybridQuantumClassical",
    "module": "research.quantum",
    "description": "Hybrid quantum-classical neural network.\n\nCombines quantum circuits with classical neural networks.",
    "url": "classes.html#HybridQuantumClassical"
  },
  {
    "type": "class",
    "name": "LearningActivity",
    "full_name": "tutorials.assessment.LearningActivity",
    "module": "tutorials.assessment",
    "description": "Represents a single learning activity.",
    "url": "classes.html#LearningActivity"
  },
  {
    "type": "class",
    "name": "ConceptCheckpoint",
    "full_name": "tutorials.assessment.ConceptCheckpoint",
    "module": "tutorials.assessment",
    "description": "Represents a concept understanding checkpoint.",
    "url": "classes.html#ConceptCheckpoint"
  },
  {
    "type": "class",
    "name": "LearningAssessment",
    "full_name": "tutorials.assessment.LearningAssessment",
    "module": "tutorials.assessment",
    "description": "Main assessment class for tracking student learning progress.\n\nThis class provides a standardized way to track learning activities,\nassess understanding, and generate progress reports.",
    "url": "classes.html#LearningAssessment"
  },
  {
    "type": "class",
    "name": "ProgressTracker",
    "full_name": "tutorials.assessment.ProgressTracker",
    "module": "tutorials.assessment",
    "description": "Utility class for tracking progress within a learning session.\n\nThis class provides simple methods for logging progress and generating\nvisual feedback during tutorial execution.",
    "url": "classes.html#ProgressTracker"
  },
  {
    "type": "class",
    "name": "EducationalDatasets",
    "full_name": "tutorials.data.EducationalDatasets",
    "module": "tutorials.data",
    "description": "Manager for educational datasets used in ChemML tutorials.\n\nThis class provides easy access to curated molecular datasets,\nsynthetic data generation, and educational examples.",
    "url": "classes.html#EducationalDatasets"
  },
  {
    "type": "class",
    "name": "QuantumMolecularDataset",
    "full_name": "tutorials.data.QuantumMolecularDataset",
    "module": "tutorials.data",
    "description": "",
    "url": "classes.html#QuantumMolecularDataset"
  },
  {
    "type": "class",
    "name": "EnvironmentManager",
    "full_name": "tutorials.environment.EnvironmentManager",
    "module": "tutorials.environment",
    "description": "Comprehensive environment management for ChemML tutorials.\n\nThis class handles dependency checking, environment setup, and provides\nfallback mechanisms to ensure tutorials work across different enviro",
    "url": "classes.html#EnvironmentManager"
  },
  {
    "type": "class",
    "name": "RDKitFallback",
    "full_name": "tutorials.environment.RDKitFallback",
    "module": "tutorials.environment",
    "description": "",
    "url": "classes.html#RDKitFallback"
  },
  {
    "type": "class",
    "name": "QuantumChemistryTutorial",
    "full_name": "tutorials.quantum.QuantumChemistryTutorial",
    "module": "tutorials.quantum",
    "description": "Educational quantum chemistry tutorial framework.\n\nThis class provides interactive quantum chemistry tutorials including\nVQE demonstrations, quantum molecular simulation, and quantum machine learning.",
    "url": "classes.html#QuantumChemistryTutorial"
  },
  {
    "type": "class",
    "name": "QuantumMachineLearning",
    "full_name": "tutorials.quantum.QuantumMachineLearning",
    "module": "tutorials.quantum",
    "description": "Quantum machine learning tutorial components.\n\nThis class provides educational examples of quantum machine learning\nalgorithms and their applications to chemistry problems.",
    "url": "classes.html#QuantumMachineLearning"
  },
  {
    "type": "class",
    "name": "QuantumTutorialManager",
    "full_name": "tutorials.quantum.QuantumTutorialManager",
    "module": "tutorials.quantum",
    "description": "Main manager for quantum computing tutorials.\n\nProvides high-level interface for quantum tutorial components including\ncircuit widgets, VQE optimization, and molecular Hamiltonian visualization.",
    "url": "classes.html#QuantumTutorialManager"
  },
  {
    "type": "class",
    "name": "BellStateTutorial",
    "full_name": "tutorials.quantum.BellStateTutorial",
    "module": "tutorials.quantum",
    "description": "Interactive Bell state tutorial.",
    "url": "classes.html#BellStateTutorial"
  },
  {
    "type": "class",
    "name": "MultiMoleculeVQE",
    "full_name": "tutorials.quantum.MultiMoleculeVQE",
    "module": "tutorials.quantum",
    "description": "Multi-molecule VQE comparison tool.",
    "url": "classes.html#MultiMoleculeVQE"
  },
  {
    "type": "class",
    "name": "QuantumMLDemo",
    "full_name": "tutorials.quantum.QuantumMLDemo",
    "module": "tutorials.quantum",
    "description": "Quantum machine learning demonstration.",
    "url": "classes.html#QuantumMLDemo"
  },
  {
    "type": "class",
    "name": "QuantumAssessment",
    "full_name": "tutorials.quantum.QuantumAssessment",
    "module": "tutorials.quantum",
    "description": "Comprehensive quantum computing assessment.",
    "url": "classes.html#QuantumAssessment"
  },
  {
    "type": "class",
    "name": "AnsatzDesigner",
    "full_name": "tutorials.quantum.AnsatzDesigner",
    "module": "tutorials.quantum",
    "description": "Interactive ansatz designer widget.",
    "url": "classes.html#AnsatzDesigner"
  },
  {
    "type": "class",
    "name": "ErrorAnalysisTool",
    "full_name": "tutorials.quantum.ErrorAnalysisTool",
    "module": "tutorials.quantum",
    "description": "Quantum error analysis tool.",
    "url": "classes.html#ErrorAnalysisTool"
  },
  {
    "type": "class",
    "name": "QuantumAdvantageExplorer",
    "full_name": "tutorials.quantum.QuantumAdvantageExplorer",
    "module": "tutorials.quantum",
    "description": "Quantum advantage exploration tool.",
    "url": "classes.html#QuantumAdvantageExplorer"
  },
  {
    "type": "class",
    "name": "QuantumMLWorkshop",
    "full_name": "tutorials.quantum.QuantumMLWorkshop",
    "module": "tutorials.quantum",
    "description": "Quantum machine learning workshop.",
    "url": "classes.html#QuantumMLWorkshop"
  },
  {
    "type": "class",
    "name": "ExerciseLauncher",
    "full_name": "tutorials.quantum.ExerciseLauncher",
    "module": "tutorials.quantum",
    "description": "Exercise launcher interface.",
    "url": "classes.html#ExerciseLauncher"
  },
  {
    "type": "class",
    "name": "QuantumCircuitWidget",
    "full_name": "tutorials.quantum.QuantumCircuitWidget",
    "module": "tutorials.quantum",
    "description": "Interactive quantum circuit builder widget.",
    "url": "classes.html#QuantumCircuitWidget"
  },
  {
    "type": "class",
    "name": "VQEOptimizationTracker",
    "full_name": "tutorials.quantum.VQEOptimizationTracker",
    "module": "tutorials.quantum",
    "description": "VQE optimization tracking and visualization.",
    "url": "classes.html#VQEOptimizationTracker"
  },
  {
    "type": "class",
    "name": "MolecularHamiltonianVisualizer",
    "full_name": "tutorials.quantum.MolecularHamiltonianVisualizer",
    "module": "tutorials.quantum",
    "description": "Molecular Hamiltonian visualization and analysis.",
    "url": "classes.html#MolecularHamiltonianVisualizer"
  },
  {
    "type": "class",
    "name": "QuantumStateAnalyzer",
    "full_name": "tutorials.quantum.QuantumStateAnalyzer",
    "module": "tutorials.quantum",
    "description": "Quantum state analysis and visualization.",
    "url": "classes.html#QuantumStateAnalyzer"
  },
  {
    "type": "class",
    "name": "RuleDashboard",
    "full_name": "tutorials.utils.RuleDashboard",
    "module": "tutorials.utils",
    "description": "",
    "url": "classes.html#RuleDashboard"
  },
  {
    "type": "class",
    "name": "SimilarityExplorer",
    "full_name": "tutorials.utils.SimilarityExplorer",
    "module": "tutorials.utils",
    "description": "",
    "url": "classes.html#SimilarityExplorer"
  },
  {
    "type": "class",
    "name": "InteractiveAssessment",
    "full_name": "tutorials.widgets.InteractiveAssessment",
    "module": "tutorials.widgets",
    "description": "Interactive assessment widget for tutorial sections.\n\nThis class creates interactive quizzes, concept checks, and knowledge\nassessments that can be embedded in notebooks.",
    "url": "classes.html#InteractiveAssessment"
  },
  {
    "type": "class",
    "name": "ProgressDashboard",
    "full_name": "tutorials.widgets.ProgressDashboard",
    "module": "tutorials.widgets",
    "description": "Progress tracking dashboard for learning analytics.\n\nThis class creates interactive dashboards to visualize student progress,\ntime tracking, and concept mastery across tutorial sessions.",
    "url": "classes.html#ProgressDashboard"
  },
  {
    "type": "class",
    "name": "MolecularVisualizationWidget",
    "full_name": "tutorials.widgets.MolecularVisualizationWidget",
    "module": "tutorials.widgets",
    "description": "Interactive molecular visualization widget.\n\nThis class provides interactive molecular visualization capabilities\nfor educational purposes in computational chemistry tutorials.",
    "url": "classes.html#MolecularVisualizationWidget"
  }
]
