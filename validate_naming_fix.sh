#!/bin/bash

# Validation script for fix_naming_consistency.sh
# Tests the script for potential issues before execution

echo "==============================================================================="
echo "           VALIDATING fix_naming_consistency.sh SCRIPT"
echo "==============================================================================="
echo "üîç Testing script for potential issues before execution..."
echo ""

# Test 1: Check if required files exist
echo "TEST 1: Checking required files exist"
echo "==============================================================================="

check_file() {
    local file=$1
    local description=$2
    if [[ -f "$file" ]]; then
        echo "‚úÖ $description exists: $file"
        return 0
    else
        echo "‚ùå $description missing: $file"
        return 1
    fi
}

check_file "README.md" "README file"
check_file "pyproject.toml" "Project config"
check_file ".github/workflows/ci-cd.yml" "CI/CD workflow"

# Test 2: Check git repository status
echo ""
echo "TEST 2: Git repository validation"
echo "==============================================================================="

if git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚úÖ Git repository detected"
    
    # Check if we have a remote
    if git config --get remote.origin.url > /dev/null 2>&1; then
        REMOTE_URL=$(git config --get remote.origin.url)
        echo "‚úÖ Git remote exists: $REMOTE_URL"
        
        # Validate remote URL format
        if [[ $REMOTE_URL == *"github.com"* ]]; then
            echo "‚úÖ GitHub remote detected"
        else
            echo "‚ö†Ô∏è  Non-GitHub remote: $REMOTE_URL"
        fi
    else
        echo "‚ùå No git remote configured"
    fi
else
    echo "‚ùå Not a git repository"
fi

# Test 3: Check current content to understand what will be changed
echo ""
echo "TEST 3: Analyzing current content"
echo "==============================================================================="

echo "Current README badge references:"
if grep -n "github.com" README.md | head -5; then
    echo "‚úÖ Found GitHub references in README"
else
    echo "‚ÑπÔ∏è  No GitHub references found in README"
fi

echo ""
echo "Current workflow names:"
if [[ -f ".github/workflows/ci-cd.yml" ]]; then
    grep "^name:" .github/workflows/ci-cd.yml || echo "‚ÑπÔ∏è  No name field in CI/CD workflow"
else
    echo "‚ÑπÔ∏è  CI/CD workflow file not found"
fi

echo ""
echo "Package name in pyproject.toml:"
if grep "^name = " pyproject.toml; then
    echo "‚úÖ Package name found"
else
    echo "‚ö†Ô∏è  Package name not found in expected format"
fi

# Test 4: Dry-run simulation of key operations
echo ""
echo "TEST 4: Dry-run simulation"
echo "==============================================================================="

echo "Simulating sed operations (no actual changes):"

# Test badge URL replacement
if grep -q "hachmannlab/qemlflow" README.md; then
    echo "‚úÖ Would update README badges (hachmannlab/qemlflow found)"
    echo "   Preview of changes:"
    REPO_URL=$(git config --get remote.origin.url 2>/dev/null || echo "unknown")
    if [[ $REPO_URL == *"github.com"* ]]; then
        REPO_PATH=$(echo $REPO_URL | sed 's/.*github.com[:-]//' | sed 's/\.git$//')
        echo "   hachmannlab/qemlflow ‚Üí $REPO_PATH"
    fi
else
    echo "‚ÑπÔ∏è  No hachmannlab/qemlflow badges to update"
fi

# Test workflow name replacement
if [[ -f ".github/workflows/ci-cd.yml" ]] && grep -q "name: ChemML CI/CD Pipeline" .github/workflows/ci-cd.yml; then
    echo "‚úÖ Would update CI/CD workflow name"
    echo "   ChemML CI/CD Pipeline ‚Üí QeMLflow CI/CD Pipeline"
else
    echo "‚ÑπÔ∏è  CI/CD workflow name already correct or file not found"
fi

# Test 5: Check for potential issues
echo ""
echo "TEST 5: Potential issue detection"
echo "==============================================================================="

# Check for problematic characters in files
echo "Checking for potential sed issues:"

check_sed_safety() {
    local file=$1
    local name=$2
    if [[ -f "$file" ]]; then
        # Check for characters that might cause sed issues
        if grep -q '[|/]' "$file"; then
            echo "‚ö†Ô∏è  $name contains characters that might interfere with sed (| /)"
            echo "   Lines with special characters:"
            grep -n '[|/]' "$file" | head -3
        else
            echo "‚úÖ $name appears safe for sed operations"
        fi
    fi
}

check_sed_safety "README.md" "README.md"
check_sed_safety ".github/workflows/ci-cd.yml" "CI/CD workflow"

# Test 6: Backup file handling
echo ""
echo "TEST 6: Backup file handling validation"
echo "==============================================================================="

echo "Checking if backup files would be created properly:"
# Simulate backup creation
touch test_backup_simulation.txt.bak
if [[ -f "test_backup_simulation.txt.bak" ]]; then
    echo "‚úÖ Backup file creation works"
    rm test_backup_simulation.txt.bak
else
    echo "‚ùå Backup file creation might fail"
fi

# Check for existing backup files that might interfere
if find . -name "*.bak" -type f | head -1 > /dev/null; then
    echo "‚ö†Ô∏è  Existing backup files found:"
    find . -name "*.bak" -type f
    echo "   These will be deleted by the script"
else
    echo "‚úÖ No existing backup files to conflict"
fi

# Final assessment
echo ""
echo "==============================================================================="
echo "                        VALIDATION SUMMARY"
echo "==============================================================================="

# Determine if script is safe to run
ISSUES=0

# Check critical requirements
if [[ ! -f "README.md" ]]; then
    echo "‚ùå CRITICAL: README.md missing"
    ((ISSUES++))
fi

if [[ ! -f "pyproject.toml" ]]; then
    echo "‚ùå CRITICAL: pyproject.toml missing"
    ((ISSUES++))
fi

if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå CRITICAL: Not a git repository"
    ((ISSUES++))
fi

if [[ $ISSUES -eq 0 ]]; then
    echo "‚úÖ VALIDATION PASSED: Script appears safe to execute"
    echo ""
    echo "üöÄ RECOMMENDATION: Proceed with fix_naming_consistency.sh"
    echo ""
    echo "What the script will do:"
    echo "1. ‚úÖ Update README badge URLs to point to correct repository"
    echo "2. ‚úÖ Rename workflow names for consistency (ChemML ‚Üí QeMLflow)"
    echo "3. ‚úÖ Create backup files before making changes"
    echo "4. ‚úÖ Clean up backup files after completion"
    echo "5. ‚úÖ Provide detailed summary of changes made"
    echo ""
    echo "‚ö†Ô∏è  SAFETY NOTES:"
    echo "- Script uses 'set -e' to exit on any error"
    echo "- Creates .bak files before making changes"
    echo "- Only makes text replacements, no file deletions"
    echo "- All changes can be reverted via git if needed"
else
    echo "‚ùå VALIDATION FAILED: $ISSUES critical issues found"
    echo ""
    echo "üõë RECOMMENDATION: Fix issues before running script"
fi

echo "==============================================================================="
