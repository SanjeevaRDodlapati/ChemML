name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Validate release
  validate:
    runs-on: ubuntu-latest
    name: Validate Release

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-core.txt
        pip install build twine pytest pytest-cov

    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=src --cov-report=xml

    - name: Build package
      run: |
        python -m build

    - name: Validate package
      run: |
        twine check dist/*

  # Create GitHub release
  release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: validate
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        # Generate changelog (simple version)
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed in v$VERSION" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: QeMLflow v${{ steps.changelog.outputs.version }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false

  # Publish to PyPI
  publish:
    runs-on: ubuntu-latest
    name: Publish to PyPI
    needs: [validate, release]
    environment: release
    permissions:
      id-token: write

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: |
        python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true

  # Build and push Docker image
  docker:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: validate

    steps:
    - uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: chemml/chemml
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
