"""
Utils module with optimized lazy loading
Auto-generated by AdvancedImportOptimizer
"""
from typing import TYPE_CHECKING, Any

# Type checking imports (zero runtime cost)
if TYPE_CHECKING:
    from typing import Dict, List, Optional

# Core eager imports (lightweight only)
from .config_cache import *
from .imports import *
from .lazy_imports import *

# Lazy loading registry
_LAZY_MODULES = {}


def __getattr__(name: str) -> Any:
    """Lazy loading for heavy modules"""
    for module_name, module_path in _LAZY_MODULES.items():
        try:
            module = __import__(module_path, fromlist=[name], level=1)
            if hasattr(module, name):
                # Cache the attribute for future access
                globals()[name] = getattr(module, name)
                return globals()[name]
        except (ImportError, AttributeError):
            continue

    raise AttributeError(f"module '{__name__}' has no attribute '{name}'")


# Version info
__version__ = "0.2.0"
